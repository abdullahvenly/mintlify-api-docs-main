openapi: 3.1.0
info:
  title: Wallet API
  description: Wallet API Documentation.
  contact:
    name: Venly
    url: https://venly.io
    email: contact@venly.io
  version: 0.62.0
servers:
  - url: https://api-wallet-sandbox.venly.io
    description: Sandbox environment for testing and development
  - url: https://api-wallet.venly.io
    description: Production environment for live applications

paths:
  /actuator/health:
    get:
      tags:
        - Wallet-API Health
      summary: Check Health 
      description: This endpoint is used to check the current health of the **Wallet-API**. It returns the API health status as either **UP** or **DOWN**.
      operationId: healthCheckWallet
      responses:
        '200':
          description: Wallet-API health result
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    description: "Indicates the status of API services as either `UP` or `DOWN`."
                    example: "UP"
      security:
        - OAuth2: []
  /api/users:
    get:
      tags:
        - User
      summary: 'Get all Users'
      description: "This endpoint retrieves all your users and their information."
      operationId: getAll
      parameters:
        - name: page
          description: "The current page number"
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: "The number of items per page"
          required: false
          schema:
            type: integer
            format: int32
        - name: reference
          description: "Filter your users based on reference identifier"
          in: query
          required: false
          schema:
            type: string
        - name: includeSigningMethods
          in: query
          description: "Whether to include signing method details in the response"
          required: false
          schema:
            type: boolean
            default: false
        - name: owner
          in: query
          description: " Filter users by company owner using the company UUID"
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: All users retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    example: true
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'


      security:
        - OAuth2:
            - view:users
            - whitelabel
    post:
      tags:
        - User
      summary: 'Create User'
      description: |
        Creates a new user account along with their primary signing method. Users are 
        unique entities that can own and manage multiple wallets.
        
        **Signing Method Requirements:**
        - The first signing method must be a six-digit PIN
        - This PIN serves as the primary authentication method for wallet access
        - Signing methods are required to authorize transactions and access wallet functions
        
        **User-Wallet Relationship:**
        - Each user can be associated with multiple wallets
        - The signing method applies to all wallets owned by the user
        - Users maintain a single identity across all their associated wallets
        
        This endpoint combines user creation and security setup in a single operation
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserCommand'
        required: true
      responses:
        '200':
          description: User is created.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - create:users
            - whitelabel        
  /api/users/{userId}:
    get:
      tags:
        - User
      summary: 'Get User by ID'
      description: "This endpoint retrieves detailed information for a specific user by their `UUID`."
      operationId: getUser
      parameters:
        - name: userId
          description: "This is the user `ID` whose details you want to fetch."
          example: "9b5514c7-d093-4cba-9635-a535k31d7030"
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A specific user's details retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/UserDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - view:users
            - whitelabel
    put:
      tags:
        - User
      summary: 'Update User’s Reference'
      description: |
        Updates the reference identifier for a specific user based on the user `UUID`.
        The reference is a custom identifier that can be used to link users to external systems.
      operationId: updateUser
      parameters:
        - name: userId
          description: "The user `UUID` whose **reference** you want to update."
          example: "9b5514c7-d093-4cba-9635-a535k31d7030"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              description: "The updated `reference` of the user"
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        '200':
          description: User's reference updated successfully.
          content:
            application/json:
              schema:
                  properties: 
                    success: 
                      type: "boolean"
                    result:
                      type: "object"
                      properties: 
                        id: 
                          type: "string"
                          description: "The wallet ID"
                        reference: 
                          type: "string"
                          description: "Updated description"
                        createdAt: 
                          type: "string"
                          description: "Time-date when the reference was updated"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - update:users
            - whitelabel
    delete:
      tags:
        - User
      summary: 'Delete User'
      description: "This endpoint deletes a user. All the linked wallets to the user will be inaccessible once the user has been deleted."
      operationId: deleteUser
      parameters:
        - name: Signing-Method
          in: header
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          required: true
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
        - name: userId
          description: "This is the `UUID` of the user you want to delete."
          example: "9b5514c7-d093-4cba-9635-a535k31d7030"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User deleted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - delete:users
            - whitelabel
  /api/users/{userId}/signing-methods:
    post:
      tags:
        - User
      summary: 'Create User’s Signing Method'
      description: "This endpoint allows you to create a signing method for a user, whether it's their first or an additional one. The first signing method must always be a six-digit `PIN`, and does not require the `Signing-Method` to be passed in the header. For creating subsequent signing methods like `BIOMETRIC`/`EMERGENCY_CODE`/`PASSWORD`, include an existing valid `Signing-Method` in the request header."
      operationId: createSigningMethod
      parameters:
        - name: Signing-Method
          in: header
          description: "You can choose between the `Signing-Method` or the `Encrypted-Signing-Method` header. The `Signing-Method` header is not required if you are creating the first signing method as `PIN`. It is only required when you create a subsequent signing method for the user. Format should be `id:value`."
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
        - name: userId
          description: "This is the `UUID` of user whose **signing method** you want to create."
          example: "9b5514c7-d093-4cba-9635-a535k31d7030"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: "The signing method to create for the user:"
              $ref: '#/components/schemas/CreateSigningMethodRequest_OneOf'
        required: true
      responses:
        '200':
          description: Signing method is created for user.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/SigningMethodDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - update:users
            - whitelabel
  /api/users/{userId}/signing-methods/{signingMethodId}:          
    put:
      tags:
        - User
      summary: 'Update User’s Signing Method'
      description: "This endpoint is used to update a user's signing method. This can be done, in case the user forgets their PIN. In order to update a signing method, another valid signign method has to be passed in the header."
      operationId: updateSigningMethod
      parameters:
        - name: Signing-Method
          in: header
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          required: true
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
        - name: userId
          description: "This is the `UUID` of the user whos signing method you want to update."
          example: "9b5514c7-d093-4cba-9635-a535k31d7030"
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: signingMethodId
          description: "This is the `UUID` of signing method you want to update."
          example: "1420c1c9-26bb-4844-ba4e-0a7914c2cfc2"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              description: "The request parameters for updating a user's signing method"
              $ref: '#/components/schemas/UpdateSigningMethodRequest'
        required: true
      responses:
        '200':
          description: Signing method of user updated successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/SigningMethodDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - update:users
            - whitelabel
    delete:
      tags:
        - User
      summary: 'Delete User’s Signing Method'
      description: "This endpoint is used to delete a user's signing method."
      operationId: deleteSigningMethod
      parameters:
        - name: Signing-Method
          in: header
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          required: true
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
        - name: userId
          description: "This is the `UUID` of the user whos signing method you want to delete."
          example: "9b5514c7-d093-4cba-9635-a535k31d7030"
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: signingMethodId
          description: "This is the `UUID` of signing method you want to delete."
          example: "1420c1c9-26bb-4844-ba4e-0a7914c2cfc2"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Signing Method deleted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - update:users
            - whitelabel
  /api/wallets/{id}:
    get:
      tags:
        - Wallet
      summary: 'Get Wallet'
      description: "This endpoint gets a wallet by id."
      operationId: viewWallet
      parameters:
        - name: id
          description: "This is the ID of the wallet who's details you want to get."
          example: "ae300910-3ad2-4cf6-8776-48a85dda27fc"
          in: path
          required: true
          schema:
            type: string
        - name: includeBalance
          description: "This flag indicates to include the wallet balance or not."
          in: query
          required: false
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Retrieved the wallet's information successfully.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/WalletDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - view:wallets
            - manage:wallets
            - sign:wallets
            - whitelabel
  /api/wallets/{id}/metadata:
    patch:
      tags:
        - Wallet
      summary: 'Update Wallet'
      description: |
        Updates modifiable metadata properties of an existing wallet. This endpoint 
        allows you to modify the wallet's description, set primary status, archive/unarchive 
        the wallet, or update the custom identifier for external system integration
      operationId: updateMetadata_1
      parameters:
        - name: id
          description: "This is the `UUID` of the wallet"
          example: "ae300910-3ad2-4cf6-8776-48a85dda27fc"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              description: "The request parameters for updating wallet's description and/or archiving/unarchiving the wallet"
              $ref: '#/components/schemas/UpdateWalletMetadataRequest'
        required: true
      responses:
        '200':
          description: Wallet description and/or arhive/unarchive successful.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/WalletDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - manage:wallets
            - whitelabel            
  /api/wallets:
    get:
      tags:
        - Wallet
      summary: 'Get all Wallets'
      description: |
        Retrieves a paginated list of all wallets accessible to your account. This endpoint 
        supports comprehensive filtering, sorting, and inclusion options to help you find 
        specific wallets or groups of wallets based on various criteria.
        
        **Key Features:**
        - Filter by blockchain network, user, or company
        - Include or exclude archived wallets
        - Sort results by multiple criteria
        - Control balance information inclusion for performance
        - Search by wallet address or custom identifier
        
        Use this endpoint for wallet management dashboards, reporting, or integration 
        with external systems requiring wallet inventory data.
      operationId: viewWallets_1
      parameters:
        - name: secretType
          in: query
          required: false
          description: "Filter wallets by specific blockchain network"
          schema:
            type: string
            enum:
              - AETERNITY
              - AVAC
              - BITCOIN
              - BSC
              - ETHEREUM
              - GOCHAIN
              - HEDERA
              - LITECOIN
              - VECHAIN
              - MATIC
              - NEO
              - IMX
              - ARBITRUM
              - OPTIMISM
              - BASE
              - XPLA
              - SOLANA
              - SUI
        - name: includeUsers
          description: "Indicates whether or not to include the wallet's of your sub-users in the result."
          in: query
          required: false
          schema:
            type: boolean
        - name: address
          description: "Filter by exact wallet address on the blockchain"
          in: query
          required: false
          schema:
            type: string
        - name: archived
          description: "Include archived wallets in the results (excluded by default)"
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: includeBalance
          description: "Include current balance information in the response (may impact performance)"
          in: query
          required: false
          schema:
            type: boolean
            default: true
        - name: linkable
          in: query
          required: false
          schema:
            type: boolean
        - name: userId
          description: "Filter wallets by user `UUID`"
          in: query
          required: false
          schema:
            type: string
        - name: sortOn
          description: "The name of the parameter that you want to sort on"
          in: query
          required: false
          schema:
            type: string
        - name: sortOrder
          description: "Indication to sort in ascending or descending order"
          in: query
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: page
          description: "The current page number"
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: size
          description: "The number of items per page"
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: identifier
          description: "Identifier to fetch a single or group of wallets"
          in: query
          required: false
          schema:
            type: string
        - name: owner
          description: "Pass the company ID to fetch all the wallets linked to the company."
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Retrieved all wallets information successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                      type: array
                      items:
                        $ref: '#/components/schemas/WalletDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - view:wallets
            - manage:wallets
            - sign:wallets
            - whitelabel
    post:
      tags:
        - Wallet
      summary: 'Create Wallet'
      description: |
        Creates a new wallet for an existing user with a configured signing method.
        
        **Prerequisites:**
        - User must be created to which the wallet will be linked
        - User must have at least one configured signing method (used to authenticate wallet creation)
      operationId: createWallet
      parameters:
        - name: Signing-Method
          in: header
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          required: true
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiWalletRequest'
        required: true
      responses:
        '200':
          description: Wallet created successfully.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/WalletDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - ARKANE_ONLY
            - manage:wallets
            - whitelabel                  
  /api/wallets/{walletId}/export:
    post:
      tags:
        - Wallet
      summary: "Export Wallet"
      description: |
        Exports wallet credentials for use in external applications or backup purposes.
        
        **Security Considerations:**
        - Password-protected keystores are recommended for enhanced security against network attacks
        - Once exported, private keys are outside our security controls
        - Compromised keys can result in unauthorized access and potential fund loss
        
        **Important:** Exported credentials grant full wallet access. Store them securely 
        and never share with untrusted parties.
      operationId: exportById
      parameters:
        - name: Signing-Method
          in: header
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          required: true
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
        - name: walletId
          description: "This is the `UUID` of the wallet whose keystore/ private key you want to export."
          example: "8ff0351b-e404-4416-b0a0-c695dbe679f1"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportKeyCommand'
        required: true
      responses:
        '200':
          description: Wallet exported successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/ExportedWalletDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - export:wallets
  /api/wallets/import:
    post:
      tags:
        - Wallet
      summary: 'Import Wallet'
      description: "This endpoint is used to import a wallet. Read more about [how to import a wallet](https://docs.venly.io/docs/import-a-wallet)."
      operationId: importWallet
      parameters:
        - name: Signing-Method
          in: header
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          required: true
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WalletImportRequest_OneOf'
        required: true
      responses:
        '200':
          description: Wallet imported successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/WalletDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - manage:wallets
            - whitelabel
  /api/wallets/address/validation/{secretType}/{walletAddress}:
    get:
      tags:
        - Wallet
      operationId: validateAddress
      summary: "Validate Wallet Address"
      description: "This endpoint is used to validate whether the format of a wallet address is correct for a specific chain."
      parameters:
        - name: secretType
          in: path
          required: true
          description: 'The blockchain of the wallet'
          schema:
            type: string
            enum:
              - AETERNITY
              - AVAC
              - BITCOIN
              - BSC
              - ETHEREUM
              - GOCHAIN
              - HEDERA
              - LITECOIN
              - VECHAIN
              - MATIC
              - NEO
              - IMX
              - ARBITRUM
              - OPTIMISM
              - BASE
              - XPLA
              - SOLANA
              - SUI
        - name: walletAddress
          in: path
          description: 'The public wallet address of the wallet'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Wallet address format validated successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/ValidWalletAddressDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/wallets/{walletId}/events:
    get:
      tags:
        - Wallet
      operationId: index
      summary: "Get all Wallet Events"
      description: "This endpoint retrieves all the events related to a wallet by `walletId`. The events can be wallet created, funds transfer, signed signature, etc."
      parameters:
        - name: walletId
          in: path
          description: 'The `UUID` of the wallet'
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Retrieved all wallet events successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApplicationEventResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/wallets/{walletId}/balance:
    get:
      tags:
        - Balance
      operationId: viewBalance
      summary: "Get native Balance by walletId"
      description: "This endpoint gets native balance of a wallet by wallet `UUID`."
      parameters:
        - name: walletId
          description: "`UUID` of the wallet to fetch native balance for"
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Native balance of wallet retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/WalletNativeBalanceDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/wallets/{walletId}/balance/tokens:
    get:
      tags:
        - Balance
      operationId: viewTokenBalances
      summary: " Get all ERC20 Token Balance by walletId"
      description: "This endpoint fetches all the ERC20 token balance by wallet `UUID`"
      parameters:
        - name: walletId
          description: "`UUID` of the wallet"
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: tokenAddress
          description: "Filter results by specific token contract addresses. Accepts multiple addresses 
            to retrieve balances for multiple tokens in a single request. Each address must 
            be a valid contract address on the specified blockchain network."
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          examples:
            single_token:
              summary: 'Single token address'
              value: ['0xA0b86a33E6411C476e19F6DD4F63187Bb9E76Ee8']
            multiple_tokens:
              summary: 'Multiple token addresses'
              value: [
                '0xA0b86a33E6411C476e19F6DD4F63187Bb9E76Ee8',
                '0x6B175474E89094C44Da98b954EedeAC495271d0F',
                '0xdAC17F958D2ee523a2206206994597C13D831ec7'
              ]
        - name: all
          description: "Set to `false` if  you do not want to retrieve 0 or dust balances (example 0.00000000001). When set to `true` everything is returned including 0 balances. In case of **HEDERA**: tokens with 0 balance are associated tokens."
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: includePossibleSpam
          description: "Indication to include possible spam tokens in the response body or not."
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: ERC20 token balances of wallet retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/TokenBalance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/wallets/{walletId}/balance/tokens/{token}:
    get:
      tags:
        - Balance
      operationId: viewTokenBalance
      summary: "Get specific ERC20 Token Balance by walletId and token address"
      description: "This endpoint retrieves ERC20 Token balances by wallet `UUID` and token contract address."
      parameters:
        - name: walletId
          description: "`UUID` of the wallet"
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: token
          description: "Smart contract address of the token for which to retrieve balance information"
          in: path
          required: true
          schema:
            type: string
        - name: includePossibleSpam
          description: "Indication to include possible spam tokens in the response body or not."
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: ERC20 token balance of wallet retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TokenBalance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/wallets/{secretType}/{walletAddress}/tokens/associations:
    get:
      tags:
        - Balance
      operationId: getTokenAssociations
      summary: " Get Token Associations for Hedera Wallet"
      description: "This endpoint retrieves the token assocciations for a Hedera wallet using the wallet address."
      parameters:
        - name: secretType
          description: "The blockchain of the wallet. This will be `HEDERA`."
          in: path
          required: true
          schema:
            type: string
            enum:
              - HEDERA
        - name: walletAddress
          description: "The wallet address"
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Token assocciations of Hedera wallet retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TokenAssociation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/wallets/{secretType}/{walletAddress}/balance:
    get:
      tags:
        - Balance
      operationId: viewBalance_1
      summary: "Get native Balance by Chain and Wallet Address"
      description: |
        Retrieves the native token balance for a specific wallet address on the specified 
        blockchain network. This endpoint returns the current balance in both human-readable 
        and raw formats, along with token metadata and USD exchange rates when available.
      parameters:
        - name: secretType
          description: "Blockchain network on which to query the wallet balance"
          in: path
          required: true
          schema:
            type: string
            enum:
              - AETERNITY
              - AVAC
              - BITCOIN
              - BSC
              - ETHEREUM
              - GOCHAIN
              - HEDERA
              - LITECOIN
              - VECHAIN
              - MATIC
              - NEO
              - IMX
              - ARBITRUM
              - OPTIMISM
              - BASE
              - XPLA
              - SOLANA
              - SUI
        - name: walletAddress
          description: 'Public blockchain address of the wallet to query'
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Native balance of wallet retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/WalletNativeBalanceDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/wallets/{secretType}/{walletAddress}/balance/tokens:
    get:
      tags:
        - Balance
      operationId: viewTokenBalances_1
      summary: "Get ERC20 Balance by Chain and Wallet Address"
      description: |
        Retrieves ERC20 token balances for a specific wallet address 
        on the specified blockchain network. This endpoint returns detailed balance information 
        including token metadata, exchange rates, and USD valuations when available.
        
        **Filtering Options:**
        - Query specific tokens by contract address
        - Show all tokens or only those with non-zero balances
        - Include or exclude potential spam/scam tokens
      parameters:
        - name: secretType
          description: 'Blockchain network on which to query token balances'
          in: path
          required: true
          schema:
            type: string
            enum:
              - AETERNITY
              - AVAC
              - BITCOIN
              - BSC
              - ETHEREUM
              - GOCHAIN
              - HEDERA
              - LITECOIN
              - VECHAIN
              - MATIC
              - NEO
              - IMX
              - ARBITRUM
              - OPTIMISM
              - BASE
              - XPLA
              - SOLANA
              - SUI
        - name: walletAddress
          description: "The address of the wallet to fetch token balance for"
          in: path
          required: true
          schema:
            type: string
        - name: tokenAddress
          description: " Filter results by specific token contract addresses. Accepts multiple addresses 
            to retrieve balances for multiple tokens in a single request. If omitted, 
            returns balances for all tokens"
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
          examples:
            single_token:
              summary: 'Query specific token'
              value: ['0xA0b86a33E6411C476e19F6DD4F63187Bb9E76Ee8']
            multiple_tokens:
              summary: 'Query multiple tokens'
              value: [
                '0xA0b86a33E6411C476e19F6DD4F63187Bb9E76Ee8',
                '0x6B175474E89094C44Da98b954EedeAC495271d0F'
              ]
        - name: all
          description: "Include tokens with zero balances in the response (when false, only returns tokens with positive balances)"
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: includePossibleSpam
          description: "Include tokens flagged as potential spam or scam tokens in the response"
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: ERC20 token balance of wallet retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/TokenBalance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/wallets/{secretType}/{walletAddress}/balance/tokens/{token}:
    get:
      tags:
        - Balance
      operationId: viewTokenBalance_1
      summary: "Get specific ERC20 Token Balance by Chain, Wallet Address, and Token Address"
      description: "This endpoint gets the ERC20 token balance by Wallet `ID`, wallet address, and token address. "
      parameters:
        - name: secretType
          description: "Blockchain network on which the token contract is deployed"
          in: path
          required: true
          schema:
            type: string
            enum:
              - AETERNITY
              - AVAC
              - BITCOIN
              - BSC
              - ETHEREUM
              - GOCHAIN
              - HEDERA
              - LITECOIN
              - VECHAIN
              - MATIC
              - NEO
              - IMX
              - ARBITRUM
              - OPTIMISM
              - BASE
              - XPLA
              - SOLANA
              - SUI
        - name: walletAddress
          description: "The address of the wallet to fetch token balances for"
          in: path
          required: true
          schema:
            type: string
        - name: token
          description: "Contract address of the token (contract) to fetch the balance for"
          in: path
          required: true
          schema:
            type: string
        - name: includePossibleSpam
          description: "Indication to include possible spam tokens in the response body or not."
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: ERC20 token balance of wallet retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TokenBalance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/transactions:
    get:
      tags:
        - Transactions
      summary: "Get all Transactions"
      description: |
        Retrieves a paginated list of transactions with optional filtering capabilities.
        
        **Features:**
        - Filter by transaction status
        - Filter by specific user UUID
        - Configurable pagination
        - Flexible sorting options
        - Optional user details inclusion
      operationId: getAll_1
      parameters:
        - name: statuses
          description: "Filter the results based on the transaction's current status"
          in: query
          required: false
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
              enum:
                - PENDING
                - SUCCEEDED
                - FAILED
                - OVERRIDDEN
                - EXPIRED
                - CANCELED
                - UNKNOWN
            default: ["SUCCEEDED"]
            minItems: 1
            maxItems: 7
          example: ["SUCCEEDED", "PENDING"]
        - name: userId
          description: "Filter the transactions by your users with `userId`"
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: includeUsers
          description: "Boolean flag to indicate whether to show your users in the result or not"
          in: query
          required: false
          schema:
            type: boolean
        - name: page
          description: "The current page number"
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: size
          description: "The number of items per page"
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: sortOn
          description: "Name of the parameter to sort on"
          in: query
          required: false
          schema:
            type: string
            enum: 
              - createdAt
              - nonce
          example: "createdAt"
        - name: sortOrder
          description: "Indication to sort in ascending or descending order"
          in: query
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: All transactions retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  pagination:
                    type: object
                    properties:
                      pageNumber:
                        type: integer
                        format: int32
                        description: "The current page number"
                      pageSize:
                        type: integer
                        format: int32
                        description: "Number of items per page"
                      numberOfPages:
                        type: integer
                        format: int32
                        description: "Total number of pages"
                      numberOfElements:
                        type: integer
                        format: int64
                        description: "Total number of result entities"
                      hasNextPage:
                        type: boolean
                        description: "Indicates if the result has a next page"
                      hasPreviousPage:
                        type: boolean
                        description: "Indicates if the result has a previous page"
                  sort:
                    type: object
                    properties:
                      orders:
                        type: array
                        items:
                          type: object
                          properties:
                            weight:
                              type: integer
                              format: int32
                            property:
                              type: string
                              description: "The name of the property that results are filtered on"
                            direction:
                              type: string
                              description: "Ascending or descending result order"
                              enum:
                                - ASC
                                - DESC
                  result:
                    type: object
                    properties:
                      expiresAt:
                        type: string
                        format: date-time
                      createdAt:
                        type: string
                        format: date-time
                        description: "The date-time when the transaction was created"
                      transactionRequest:
                        $ref: '#/components/schemas/TransactionRequestBase'
                      transactionHash:
                        type: string
                        description: "The transaction hash"
                      originId:
                        type: string
                      resubmittedTransactionId:
                        type: string
                        deprecated: true
                      replacedBy:
                        type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []

    post:
      tags:
        - Transactions
      summary: 'Create Transaction'
      description: |
        Creates a blockchain transaction of any supported type with autogenrating the gas fields.
        
        **Supported Transaction Types:**
        - Native token transfers
        - ERC-20 token transfers
        - NFT transfers (ERC-721, ERC-1155)
        - Smart contract interactions
      operationId: createTransaction
      parameters:
        - name: Signing-Method
          in: header
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          required: true
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: "The request parameters for executing a transaction"
              $ref: '#/components/schemas/CreateTransactionRequest_OneOf' 
        required: true
      responses:
        '200':
          description: Transaction executed successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TransactionResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []

  /api/transactions/{id}/confirm:
    post:
      tags:
        - Transactions
      operationId: confirmTransaction
      summary: "Confirm Transaction Request"
      description: |
        Confirms a saved transaction request and prepares it for execution by updating its status 
        from **SAVED** to **READY**.
        
        **Process flow:**
        1. Validates the saved transaction request parameters
        2. Calculates and populates gas fees, nonce, and other blockchain-specific fields
        3. Updates status to **READY**, making it available for execution
        4. Sets expiration time for the confirmed transaction
        
        **When to use:**
        - After creating a transaction request with `status: "SAVED"`
        - Before calling the execute endpoint to complete the transaction
        - When you're ready to finalize gas calculations and network parameters
        
        **Important notes:**
        - Only works with transaction requests in **SAVED** status
        - Gas fields will be auto-populated based on current network conditions
        - The confirmed transaction will have an expiration time after which it cannot be executed
      parameters:
        - name: Signing-Method
          in: header
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          required: true
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
        - name: id
          description: "UUID of the transaction request to confirm"
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "3d3649c3-50ff-49c4-a74b-4fc74fb507a6"
      requestBody:
        description: "Blockchain of the transaction request"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmSignableCommand'
        required: true
      responses:
        '200':
          description: Transaction confirmed successfully and ready for execution.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: "Indicates whether the confirmation was successful"
                    example: true
                  result:
                    $ref: '#/components/schemas/TransactionRequestedResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - save:transaction

  /api/transactions/{id}/execute:
    post:
      tags:
        - Transactions
      operationId: executeTransaction
      summary: "Execute Transaction Request"
      description: |
        Executes a confirmed transaction request by transaction UUID, by performing the blockchain transaction operation.
        
        **Prerequisites:**
        - Transaction request must be in **READY** status (use confirm endpoint first)
        - Transaction must not be expired
        
        **Process:**
        1. Validates the transaction request status and expiration
        2. Authenticates using provided signing method
        3. Signs and broadcasts the transaction to the blockchain network
        4. Returns the transaction result with hash and network confirmation
        
      parameters:
        - name: Signing-Method
          in: header
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          required: true
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
        - name: id
          description: "UUID of the transaction request to execute"
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "3d3649c3-50ff-49c4-a74b-4fc74fb507a6"
      requestBody:
        description: "Blockchain for the transaction"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmSignableCommand'
        required: true
      responses:
        '200':
          description: Transaction executed successfully and broadcast to the blockchain.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: "Indicates whether the transaction execution was successful"
                    example: true
                  result:
                    $ref: '#/components/schemas/TransactionResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - sign:wallets

  /api/transactions/execute:
    post:
      tags:
        - Transactions
      summary: 'Execute Transaction'
      description: |
        Creates and executes a blockchain transaction of any supported type.
        
        **Supported Transaction Types:**
        - Native token transfers
        - ERC-20 token transfers
        - NFT transfers (ERC-721, ERC-1155)
        - Smart contract interactions
      operationId: executeTransaction_1
      parameters:
        - name: Signing-Method
          in: header
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          required: true
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: "The request parameters for executing a transaction"
              $ref: '#/components/schemas/BuildAndExecuteTransactionRequest'
        required: true
      responses:
        '200':
          description: Transaction executed successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TransactionResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - sign:wallets
  /api/transactions/build:
    post:
      tags:
        - Transactions
      summary: 'Build Transaction Request'
      description: |
        Transforms a generic transaction request into a blockchain-specific transaction with 
        all necessary parameters populated for the target network.
        
        **What this endpoint does:**
        - Validates transaction data against the specified blockchain network
        - Converts generic amounts to blockchain-native units (e.g., 0.1 SUI → 100000000 MIST)
        - Calculates and populates network-specific parameters (gas price, gas budget, nonce)
        - Transforms generic transaction types to chain-specific types (TRANSFER → SUI_TRANSFER)
        - Returns a structured transaction request ready for confirmation and execution
        
        **Supported transaction types:**
        - **Native transfers**: Send blockchain's native currency (ETH, SUI, MATIC, etc.)
        - **Token transfers**: Send ERC-20 or equivalent tokens
        - **NFT transfers**: Transfer ERC-721/ERC-1155 or equivalent NFTs
        - **Contract execution**: Call smart contract functions
        - **Multi-transfers**: Batch multiple operations (Hedera only)
      operationId: buildTransaction
      requestBody:
        content:
          application/json:
            schema:
              description: "The request parameters for preparing a transaction for a specififc chain"
              $ref: '#/components/schemas/BuildTransactionRequest_OneOf'
        required: true
      responses:
        '200':
          description: Transaction prepared for a specific chain successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/BuildTransaction_OneOf'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - sign:wallets
  /api/transactions/{secretType}/{transactionHash}/status:
    get:
      tags:
        - Transactions
      operationId: getStatus
      summary: "Get Transaction Status"
      description: |
        Retrieves the current status of a blockchain transaction using its unique hash identifier.
        
        This endpoint queries the specified blockchain network to determine the transaction's current state,
        such as whether it's pending, confirmed, or failed. The status is fetched directly from the 
        blockchain's network nodes to ensure accuracy.
        
        **Supported Status Values:**
        - `PENDING` - Transaction submitted but not yet confirmed
        - `SUCCEEDED` - Transaction successfully confirmed on blockchain
        - `FAILED` - Transaction failed during execution
        - `UNKNOWN` - Status cannot be determined (unsupported chain or invalid hash)
      parameters:
        - name: secretType
          description: "The blockchain of the transaction"
          in: path
          required: true
          schema:
            type: string
            enum:
              - AETERNITY
              - AVAC
              - BITCOIN
              - BSC
              - ETHEREUM
              - GOCHAIN
              - HEDERA
              - LITECOIN
              - VECHAIN
              - MATIC
              - NEO
              - IMX
              - ARBITRUM
              - OPTIMISM
              - BASE
              - XPLA
              - SOLANA
              - SUI
        - name: transactionHash
          description: "The transaction hash of the transaction to check the status for"
          in: path
          required: true
          schema:
            type: string
        - name: endpoint
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Transaction status retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TxInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/transactions/{secretType}/fees:
    get:
      tags:
        - Transactions
      operationId: getStatus_1
      summary: "Get Gas Price for a Chain"
      description: "This endpoint fetches the current fees (for EVM based chains: `gasprice`) for a specific chain"
      parameters:
        - name: secretType
          description: "The blockchain for which you want to get gas price details"
          in: path
          required: true
          schema:
            type: string
            enum:
              - AETERNITY
              - AVAC
              - BITCOIN
              - BSC
              - ETHEREUM
              - GOCHAIN
              - HEDERA
              - LITECOIN
              - VECHAIN
              - MATIC
              - NEO
              - IMX
              - ARBITRUM
              - OPTIMISM
              - BASE
              - XPLA
              - SOLANA
              - SUI
      responses:
        '200':
          description: Gas price for a chain retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/signatures:
    get:
      tags:
        - Signatures
      operationId: getUserSignatureRequests
      summary: "Get Signature Request by userId"
      description: "This endpoint retrives all the signature requests, and the results can be filtered by `userId` and signature status."
      parameters:
        - name: status
          description: "Filter the results by the signature status."
          in: query
          required: false
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
              enum:
                - SAVED
                - READY
                - SIGNED
                - EXPIRED
                - CANCELED
            default:
              - READY
        - name: page
          description: "The current page number"
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: size
          description: "The number of items per page"
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: sortOn
          description: "Name of the parameter to sort on"
          in: query
          required: false
          schema:
            type: string
        - name: sortOrder
          description: "Indication to sort in ascending or descending order"
          in: query
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: includeUsers
          description: "Boolean flag to indicate whether to show your users in the result or not"
          in: query
          required: false
          schema:
            type: boolean
        - name: userId
          description: "Filter the signatures by your users with `userId`"
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Signature requests retrieved succesfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  pagination:
                    type: object
                    properties:
                      pageNumber:
                        type: integer
                        format: int32
                        description: "The current page number"
                      pageSize:
                        type: integer
                        format: int32
                        description: "The number of items per page"
                      numberOfPages:
                        type: integer
                        format: int32
                        description: "The total number of pages"
                      numberOfElements:
                        type: integer
                        format: int64
                      hasNextPage:
                        type: boolean
                        description: "Indicates whether or not there is a next page"
                      hasPreviousPage:
                        type: boolean
                        description: "Indicates whether or not there is a previous page"
                  sort:
                    type: object
                    properties:
                      orders:
                        type: array
                        items:
                          type: object
                          properties:
                            weight:
                              type: integer
                              format: int32
                            property:
                              type: string
                            direction:
                              type: string
                              enum:
                                - ASC
                                - DESC
                  result:
                    $ref: '#/components/schemas/SignatureRequestDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
    post:
      tags:
        - Signatures
      summary: 'Create or Sign Signature'
      description: |
        Creates and optionally executes cryptographic signatures for blockchain messages and structured data.
        
        **Supported signature types:**
        - **Message signing**: Plain text message signing using personal_sign method
        - **EIP-712**: Ethereum typed structured data signing for improved security and usability
      operationId: signTransaction
      parameters:
        - name: Signing-Method
          in: header
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          required: true
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: "The request parameters for building and signing a signature request"
              $ref: '#/components/schemas/BuildAndExecuteSignatureRequest'
        required: true
      responses:
        '200':
          description: Signature created and signed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: "Indicates whether the operation was successful"
                    example: true
                  result:
                    oneOf:
                      - $ref: '#/components/schemas/SavedOrReadySignatureResponse'
                      - $ref: '#/components/schemas/ExecutedSignatureResponse'
                    discriminator:
                      propertyName: type
                      mapping:
                        savedOrReady: '#/components/schemas/SavedOrReadySignatureResponse'
                        executed: '#/components/schemas/ExecutedSignatureResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - sign:wallets
            - save:signature

  /api/signatures/{id}/confirm:
    post:
      tags:
        - Signatures
      operationId: confirmSignatureRequest
      summary: "Confirm Signature"
      description: |
        Confirms a saved signature request and prepares it for execution by updating its status 
        from **SAVED** to **READY**.
        
        **Process flow:**
        1. Validates the saved signature request parameters
        2. For transaction signatures: Calculates and populates gas fees, nonce, and other required fields
        3. Updates status to **READY**, making it available for signing
        4. Sets expiration time for the confirmed request
      parameters:
        - name: id
          description: "The UUID of the signature request to mark as READY"
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "3d3649c3-50ff-49c4-a74b-4fc74fb507a6"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmSignatureRequest_OneOf'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/SignatureRequestDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/signatures/{id}/sign:
    post:
      tags:
        - Signatures
      summary: 'Sign Signature'
      description: |
        Executes a confirmed signature request by performing the cryptographic signing operation. It returns the completed signature in the appropriate format.
        
        **Prerequisites:**
        - Signature request must be in **READY** status (use confirm endpoint first)
      operationId: signSignatureRequest
      parameters:
        - name: Signing-Method
          in: header
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          required: true
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
        - name: id
          description: "UUID of the signature request to execute"
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "3d3649c3-50ff-49c4-a74b-4fc74fb507a6"
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignSignatureRequestCommand'
      responses:
        '200':
          description: Signature signed successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/Signature_OneOf'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - sign:wallets
  /api/signatures/build:
    post:
      tags:
        - Signatures
      operationId: buildSignature
      summary: "Build Signature Request"
      description: |
        Transforms a generic signature request into a blockchain-specific signature request 
        with all necessary parameters populated for the target network.
        
        **Supported operations:**
        - **Plain Message signing**
        - **EIP-712 structured data signing**
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildSignatureRequest_OneOf'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/signatures/verification:
    post:
      tags:
        - Signatures
      operationId: isValidSignature
      summary: "Verify Signed Signature"
      description: "Cryptographically verifies that a signature was signed by a specific wallet address for the given message or data."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatureVerificationRequest'
        required: true
      responses:
        '200':
          description: Verification of the signed signature successful.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                  result:
                    type: boolean
                    description: |
                      Verification result:
                      - `true`: Signature is valid and was signed by the specified wallet address
                      - `false`: Signature is invalid or was not signed by the specified wallet address
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/signatures/{id}:
    get:
      tags:
        - Signatures
      operationId: getSignatureRequestById
      summary: "Get Signature Request by id"
      description: |
        Retrieves a signature request by its unique identifier, including current status, 
        metadata, and signing details.
        
        **Returns information about:**
        - Current signature request status (SAVED, READY, SIGNED, EXPIRED, CANCELED)
        - Original request parameters and data
        - Timestamps (created, expires, signed)
        - Signature results (if completed)
        - Associated wallet and blockchain network details
      parameters:
        - name: id
          description: "UUID of the signature request to retrieve"
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "3d3649c3-50ff-49c4-a74b-4fc74fb507a6"
      responses:
        '200':
          description: Specific signature request retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/SignatureRequestDTO'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
    delete:
      tags:
        - Signatures
      operationId: cancel_2
      summary: "Cancel Signature Request"
      description: |
        Cancels a signature request by setting its status to **CANCELED**. This prevents 
        the signature from being executed and marks it as permanently inactive.
        
        **Cancellation rules:**
        - Can only cancel requests with status: **SAVED** or **READY**
        - Cannot cancel already **SIGNED**, **EXPIRED**, or **CANCELED** requests
        - Action is irreversible - canceled requests cannot be reactivated
      parameters:
      - name: id
        description: "UUID of the signature request to cancel"
        in: path
        required: true
        schema:
          type: string
          format: uuid
        example: "3d3649c3-50ff-49c4-a74b-4fc74fb507a6"
      responses:
        '200':
          description: Signature deleted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []                 
  /api/transactions/resubmit:
    post:
      tags:
        - Transactions
      summary: 'Resubmit Transaction'
      description: "This endpoint immediately tries to resubmit a stuck transaction. Sometimes a transaction fails to execute/propagate. This can be due to several factors, for example, the gas price is too low."
      operationId: resubmit
      parameters:
        - name: Signing-Method
          in: header
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          required: true
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: "The request parameters for resubmitting a transaction"
              $ref: '#/components/schemas/ResubmitRequest'
        required: true
      responses:
        '200':
          description: Transaction resubmitted successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TransactionResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - sign:wallets
  /api/transactions/cancel:
    post:
      tags:
        - Transactions
      summary: 'Cancel Transaction'
      description: "This endpoint immediately tries to cancel a stuck transaction."
      operationId: cancel
      parameters:
        - name: Signing-Method
          in: header
          required: true
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: "The request parameters for cancelling a transaction"
              $ref: '#/components/schemas/CancelRequest'
        required: true
      responses:
        '200':
          description: Transaction canceled successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TransactionResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - sign:wallets
  /api/contracts/read:
    post:
      tags:
        - Contract
      operationId: readContract
      summary: "Read Contract"
      description: "This endpoint allows you to read contract functions. This function is only available for EVM-based chains."
      requestBody:
        content:
          application/json:
            schema:
              description: "The request parameters for reading a contract"
              $ref: '#/components/schemas/ContractReadRequest'
        required: true
      responses:
        '200':
          description: Contract read successful.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContractReadResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/contracts/abi/encode:
    post:
      tags:
        - Contract
      operationId: encode
      summary: "Encode Inputs"
      description: "This endpoint allows you to encode contract functions. This function is only available for EVM-based chains."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractEncodeRequest'
            example:
              outputs: []
              functionName: "mintNonFungibleBatch"
              secretType: "ARBITRUM"
              inputs:
                - type: "uint256"
                  value: "1"
                - type: "uint256[]"
                  value: "[\"2\"]"
                - type: "address[]"
                  value: "[\"0xC8AC9e0988af73902517f39b4dA8C94cd1B697e5\"]"
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/ContractEncodeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/contracts/abi/decode:
    post:
      tags:
        - Contract
      operationId: decode
      summary: "Decode Inputs"
      description: "This endpoint allows you to decode contract functions. This function is only available for EVM-based chains."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractDecodeRequest'
            example:
              outputs:
                - type: "uint256"
                - type: "uint256[]"
                - type: "address[]"
              data: "0x0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000c8ac9e0988af73902517f39b4da8c94cd1b697e5"
              secretType: "ARBITRUM"
        required: true
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/ContractDecodeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/wallets/{id}/user:
    put:
      tags:
        - Wallet
      summary: 'Link Wallet to User'
      description: "This endpoint is used only when migrating from the old/deprecated wallet management to the new user management. Click [here](https://docs.venly.io/docs/user-management) to read more about user management. It is used to link an existing wallet to a user."
      operationId: linkWalletToUser
      deprecated: true
      parameters:
        - name: Signing-Method
          in: header
          required: true
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
        - name: id
          description: "This is the wallet `ID`"
          example: "87c7d2fa-8507-4aa2-964a-50c4cb9cb070"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: "The request parameters to link a wallet to a specific user"
              $ref: '#/components/schemas/LinkWalletToUserCommand'
        required: true
      responses:
        '200':
          description: Wallet linked to user successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/WalletDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - manage:users
            - whitelabel      
  /api/wallets/{id}/security:
    patch:
      tags:
        - Wallet
      summary: "Update Wallet PIN code"
      description: "This endpoint has been deprecated. Please click here to read about [Signing Methods](https://docs.venly.io/docs/signing-methods-api-flow)."
      operationId: updateSecurity
      deprecated: true
      parameters:
        - name: Signing-Method
          in: header
          required: true
          description: "A valid signing method for the user. Format should be `id:value`. **NOTE**: You can choose between the `Signing-Method`  and the `Encrypted-Signing-Method`"
          example: 756ae7a7-3713-43ee-9936-0dff50306488:123456
          schema:
            type: string
        - name: Encrypted-Signing-Method
          in: header
          description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
          required: false
          schema:
            type: string
        - name: id
          description: "This is the `ID` of the wallet who's **PIN code** you want to update. "
          example: "8ff0351b-e404-4416-b0a0-c695dbe679f1"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWalletSecurityRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/WalletDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - manage:wallets
            - whitelabel
  /api/wallets/{walletId}/nonfungibles:
    get:
      tags:
        - Non-Fungibles
      operationId: listNonFungibles
      summary: "Get NFTs by walletId"
      description: "This endpoint retrieves NFTs by wallet `ID`"
      parameters:
        - name: walletId
          description: "`ID` of the wallet"
          in: path
          required: true
          schema:
            type: string
        - name: includePossibleSpam
          description: "Indication to include possible spam NFTs in the response body or not."
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: includeNsfw
          description: "Boolean flag which indicates to show the NSFW NFTs in the response body or not."
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: contract-addresses
          description: "When set, the result will only contain tokens of these NFT contract addresses. Multiple values can be set."
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: NFTs of wallet retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/NonFungibleAssetBalance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - filter:nsfw 
  /api/wallets/nonfungibles:
    get:
      tags:
        - Non-Fungibles
      operationId: listNonFungibles_1
      summary: "Get NFTs by Chain"
      description: "This endpoint retrieves NFTs by blockchain."
      parameters:
        - name: includePossibleSpam
          description: "Indication to include possible spam NFTs in the response body or not."
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: includeNsfw
          description: "Boolean flag which indicates to show the NSFW NFTs in the response body or not."
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: userId
          description: "Filter results based on the user `ID`."
          in: query
          required: false
          schema:
            type: string
        - name: includeUsers
          description: "Boolean flag to include the users who hold the NFT or not"
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: secretType
          description: "The blockchain to filter and retrieve NFTs by"
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - AETERNITY
                - AVAC
                - BITCOIN
                - BSC
                - ETHEREUM
                - GOCHAIN
                - HEDERA
                - LITECOIN
                - VECHAIN
                - MATIC
                - NEO
                - IMX
                - ARBITRUM
                - OPTIMISM
                - BASE
                - XPLA
                - SOLANA
      responses:
        '200':
          description: NFTs of wallet retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/WalletItemsDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - filter:nsfw
  /api/wallets/{secretType}/{walletAddress}/nonfungibles:
    get:
      tags:
        - Non-Fungibles
      operationId: listNonFungiblesByAddress
      summary: "Get NFTs by Chain and Wallet Address"
      description: "This endpoint retrieves NFTs by blockchain and wallet address."
      parameters:
        - name: secretType
          description: "Blockchain to filter by"
          in: path
          required: true
          schema:
            type: string
            enum:
              - AETERNITY
              - AVAC
              - BITCOIN
              - BSC
              - ETHEREUM
              - GOCHAIN
              - HEDERA
              - LITECOIN
              - VECHAIN
              - MATIC
              - NEO
              - IMX
              - ARBITRUM
              - OPTIMISM
              - BASE
              - XPLA
              - SOLANA
              - SUI
        - name: walletAddress
          description: "Wallet address to get NFTs"
          in: path
          required: true
          schema:
            type: string
        - name: contract-addresses
          description: "When set, the result will only contain tokens of these NFT contract addresses. Multiple values can be set."
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
        - name: includeNsfw
          description: "Boolean flag which indicates to show the NSFW NFTs in the response body or not."
          in: query
          required: false
          schema:
            type: boolean
            default: false
        - name: includePossibleSpam
          description: "Indication to include possible spam NFTs in the response body or not."
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: NFTs of wallet retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/NonFungibleAssetBalance'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - filter:nsfw
  /api/nonfungibles/{secretType}/{contractAddress}:
    get:
      tags:
        - Non-Fungibles
      operationId: getNonFungibleContract
      summary: "Get NFT contract"
      description: "This endpoint retrieves NFT contract information by blockchain and contract address."
      parameters:
        - name: secretType
          description: "The blockchain to filter by"
          in: path
          required: true
          schema:
            type: string
            enum:
              - AETERNITY
              - AVAC
              - BITCOIN
              - BSC
              - ETHEREUM
              - GOCHAIN
              - HEDERA
              - LITECOIN
              - VECHAIN
              - MATIC
              - NEO
              - IMX
              - ARBITRUM
              - OPTIMISM
              - BASE
              - XPLA
              - SOLANA
              - SUI
        - name: contractAddress
          description: "The contract address of the NFT"
          in: path
          required: true
          schema:
            type: string
        - name: force_update
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: NFT contract information retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/NonFungibleContract'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/nonfungibles/{secretType}/{contractAddress}/{tokenId}:
    get:
      tags:
        - Non-Fungibles
      operationId: getNonFungible
      summary: "Get NFT information"
      description: "This endpoint retrieves a specific NFT information by chain, contract address, and the token `ID`."
      parameters:
        - name: secretType
          description: "The blockchain to filter by"
          in: path
          required: true
          schema:
            type: string
            enum:
              - AETERNITY
              - AVAC
              - BITCOIN
              - BSC
              - ETHEREUM
              - GOCHAIN
              - HEDERA
              - LITECOIN
              - VECHAIN
              - MATIC
              - NEO
              - IMX
              - ARBITRUM
              - OPTIMISM
              - BASE
              - XPLA
              - SOLANA
              - SUI
        - name: contractAddress
          description: "The contract address of the NFT"
          in: path
          required: true
          schema:
            type: string
        - name: tokenId
          description: "The token `ID` of the NFT"
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Specific NFT information retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/NonFungibleAsset'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/nonfungibles/{secretType}/{contractAddress}/{tokenId}/wallets:
    get:
      tags:
        - Non-Fungibles
      summary: 'Get Wallets that contain specific NFTs'
      description: "This endpoint fetches the wallet that contain a specific NFT. The wallets are filtered by blockchain, contract address of the NFT, and the token `ID`"
      operationId: getTokenWalletBalance
      parameters:
        - name: secretType
          description: "The blockchain to filter by"
          in: path
          required: true
          schema:
            type: string
            enum:
              - AETERNITY
              - AVAC
              - BITCOIN
              - BSC
              - ETHEREUM
              - GOCHAIN
              - HEDERA
              - LITECOIN
              - VECHAIN
              - MATIC
              - NEO
              - IMX
              - ARBITRUM
              - OPTIMISM
              - BASE
              - XPLA
              - SOLANA
              - SUI
        - name: contractAddress
          description: "The contract address of the specific NFT"
          in: path
          required: true
          schema:
            type: string
        - name: tokenId
          description: "The token `ID` of the NFT"
          in: path
          required: true
          schema:
            type: string
        - name: page
          description: "The current page number"
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: size
          description: "The number of items per page"
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: sortOn
          description: "Name of the parameter to sort on"
          in: query
          required: false
          schema:
            type: string
        - name: sortOrder
          description: "Indication to sort in ascending or descending order"
          in: query
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: Wallet address retrieved successfully containing a specific NFT.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  pagination:
                    type: object
                    $ref: '#/components/schemas/Pagination'
                  result:
                    type: array
                    $ref: '#/components/schemas/WalletBalanceDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - view:wallet-analytics
  /api/wallets/HEDERA/{walletAddress}/nonfungibles/allowances:
    get:
      tags:
        - Non-Fungibles
      operationId: getHederaNonfungibleAllowances
      summary: "Get Token Allowances for Hedera NFTs"
      description: "This endpoint retrieves the token allowances specifically for Hedera chain"
      parameters:
        - name: walletAddress
          description: "The public address of the wallet that own tokens"
          in: path
          required: true
          schema:
            type: string
        - name: spender
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Token allowance of Hedera wallet retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/HederaNonfungibleAllowanceDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/contracts/{secretType}/{address}/wallets:
    get:
      tags:
        - Non-Fungibles
      summary: 'Get Wallets that contain NFT from a specific Contract'
      description: "This endpoint returns the wallet address(es) which contain NFTs from a specific NFT contract address."
      operationId: getWalletBalance
      parameters:
        - name: secretType
          description: "The blockchain of the NFT"
          in: path
          required: true
          schema:
            type: string
        - name: address
          description: "The contract address of the NFT"
          in: path
          required: true
          schema:
            type: string
        - name: page
          description: "The current page number"
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: size
          description: "The number of items per page"
          in: query
          required: false
          schema:
            type: integer
            format: int32
        - name: sortOn
          description: "The name of the parameter that you want to sort on"
          in: query
          required: false
          schema:
            type: string
        - name: sortOrder
          description: "Indication to sort in ascending or descending order"
          in: query
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
      responses:
        '200':
          description: Wallet address(es) retrieved successfully containing NFTs from a specific NFT contract.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  pagination:
                    type: object
                    $ref: '#/components/schemas/Pagination'
                  result:
                    type: array
                    $ref: '#/components/schemas/WalletBalanceDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - view:wallet-analytics
  /api/wallets/{id}/swaps/pairs:
    get:
      tags:
        - Token Swapping
      summary: 'Get Token Pairs'
      description: "This endpoint gets all the possible token pairs that can be swapped based on the blockchain of the wallet."
      operationId: getTradingPairs
      parameters:
        - name: id
          description: "This is the wallet `ID`. The **SWAP** pairs will be displayed based on the blockchain of this wallet."
          example: "98aa5b11-001c-4967-84d7-1d8443cf9574"
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Token pairs retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/TradingPair'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - use:swaps
  /api/swaps/rates:
    get:
      tags:
        - Token Swapping
      summary: 'Get Exchange Rate'
      description: "This endpoint returns information about the expected result of the swap. It provides the expected output amount, as well gives information about the slippage, and fee involved for that specific swap."
      operationId: getExchangeRate
      parameters:
        - name: exchangeRateRequest
          in: query
          required: true
          schema:
            description: "The request parameters for retrieving the exchange rate, slippage, fee, expected output amount, and exchange name"
            $ref: '#/components/schemas/ExchangeRateRequest'
      responses:
        '200':
          description: Exchange rate and swap information retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/ExchangeRateResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - use:swaps       
  /api/wallets/{id}/swaps:
    post:
      tags:
        - Token Swapping
      summary: 'Build Swap'
      description: "This endpoint returns the transaction detail that is needed to perform the actual swap, based on information obtained in the **Get Exchange Rate** endpoint. This endpoint will build a transaction for you, which afterward you or your user needs to execute. Each item in the response array needs to be taken, enriched with the relevant signing method and submitted against the endpoint: `/api/transactions/execute`"
      operationId: createSwap
      parameters:
        - name: id
          description: "This is the `ID` of the source wallet. (Wallet that holds tokens to swap)"
          example: "c2747cb1-3b5b-4676-934a-0dcd08b0d5bc"
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              description: "The request parameters for creating/building the swap transactions"
              $ref: '#/components/schemas/SwapRequest'
        required: true
      responses:
        '200':
          description: Swap transactions created successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/TransactionRequest_OneOf'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2:
            - use:swaps
  /api/chains/{secretType}:
    get:
      tags:
        - Chain 
      summary: Get Chain Information
      description: Returns information about a specific blockchain.
      operationId: getChainInfo
      parameters:
        - name: secretType
          in: path
          description: 'Select the blockchain to get block information'
          required: true
          schema:
            type: string
            enum:
              - AETERNITY
              - AVAC
              - BITCOIN
              - BSC
              - ETHEREUM
              - GOCHAIN
              - HEDERA
              - LITECOIN
              - VECHAIN
              - MATIC
              - NEO
              - IMX
              - ARBITRUM
              - OPTIMISM
              - BASE
              - XPLA
              - SOLANA
              - SUI
      responses:
        '200':
          description: Block information retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/BlockchainInfoDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/chains:
    get:
      tags:
        - Chain
      operationId: secretTypes_1
      summary: "Get all supported Chains"
      description: "This endpoint returns all the supported chains by the Wallet-API."
      responses:
        '200':
          description: All supported chains retrieved successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    type: array
                    items:
                      type: string
                      description: "All the blockchains that the Wallet-API supports"
                      enum:
                        - AETERNITY
                        - AVAC
                        - BITCOIN
                        - BSC
                        - ETHEREUM
                        - GOCHAIN
                        - HEDERA
                        - LITECOIN
                        - VECHAIN
                        - MATIC
                        - NEO
                        - IMX
                        - ARBITRUM
                        - OPTIMISM
                        - BASE
                        - XPLA
                        - SOLANA
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
  /api/security:
    get:
      tags:
        - Security Endpoint
      operationId: getKeys
      summary: "Get Venly Public Key"
      description: "This endpoint retrieves the Venly public key."
      responses:
        '200':
          description: OK
          content:
            'application/json':
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/SecuritySpecificationResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '500':
          $ref: '#/components/responses/InternalServerError'
      security:
        - OAuth2: []
components:
  schemas:
    LinkWalletToUserCommand:
      type: object
      properties:
        pincode:
          type: string
          deprecated: true
        userId:
          type: string
    WalletDto:
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier for the wallet"
        address:
          type: string
          description: "Public blockchain address for receiving transactions"
        walletType:
          type: string
          description: "Classification of wallet functionality and access method"
          enum:
              - API_WALLET
        secretType:
          type: string
          description: "Blockchain network on which this wallet operates"
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - OPTIMISM
            - BASE
            - XPLA
            - SUI
        createdAt:
          type: string
          format: date-time
          description: "ISO 8601 timestamp when the wallet was created"
        archived:
          type: boolean
          description: "Indicates whether the wallet has been archived and is no longer active"
        description:
          type: string
          description: "Optional user-defined description or label for the wallet"
        primary:
          type: boolean
          description: "Indicates if this is the user's primary wallet for this blockchain"
        hasCustomPin:
          type: boolean
          description: "Indicates whether the wallet uses a custom PIN instead of the user's default PIN"
        identifier:
          type: string
          description: "Optional custom identifier for external system integration"
        userId:
          type: string
          description: "Unique identifier of the user who owns this wallet"
        custodial:
          type: boolean
          description: "Indicates whether this is a custodial wallet (keys managed by service) or non-custodial (user-controlled keys)"
        balance:
          $ref: '#/components/schemas/WalletNativeBalanceDto'

    WalletNativeBalanceDto:
      type: object
      properties:
        available:
          type: boolean
          description: "Indicates whether the balance information was successfully retrieved from the blockchain"
        secretType:
          type: string
          description: "Blockchain network on which this wallet operates"
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - OPTIMISM
            - BASE
            - XPLA
            - SOLANA
            - SUI
        balance:
          type: number
          description: "Human-readable balance of the native token in decimal format"
        gasBalance:
          type: number
          description: "Human-readable balance of the gas token used for transaction fees (identical to balance when native token is used for gas)"
        symbol:
          type: string
          description: "Ticker symbol of the native token (e.g., ETH, BTC, MATIC)"
        gasSymbol:
          type: string
          description: "Ticker symbol of the token used for paying transaction fees"
        rawBalance:
          type: string
          description: "Unformatted balance of the native token in the smallest unit (wei, satoshi, etc.)"
        rawGasBalance:
          type: string
          description: "Unformatted balance of the gas token in the smallest unit"
        decimals:
          type: integer
          format: int32
          description: "Number of decimal places used by the native token for precision (e.g., 18 for ETH, 8 for BTC)"
        exchange:
          type: object
          properties:
            usdPrice:
              type: number
              format: float
              description: "Current USD exchange rate per unit of the native token"
            usdBalanceValue:
              type: number
              format: float
              description: "Total USD value of all native token holdings in this wallet"
            
    CreateUserCommand:
      type: object
      description: "The request parameters for user creation"
      properties:
        reference:
          type: string
          description: "A keyword to identify or group your users together. This can be used later to filter out specific users based on this reference"
        signingMethod:
          description: "⚠️ IMPORTANT: The first signing method for any user must always be a PIN. Additional signing methods can be any supported type."
          $ref: '#/components/schemas/CreateSigningMethodRequest_OneOf'
    UpdateUserRequest:
      type: object
      properties:
        reference:
          type: string
          description: 'The new `reference` identifier for the user'

    SigningMethodDto:
      items: 
        type: object
        properties: 
          id: 
            type: string
            description: "The signing method `UUID`"
          type: 
            type: string
            description: "The type of signing method"
          incorrectAttempts: 
            type: integer
            format: int32
            description: "Number of incorrect signing method attempts"
          remainingAttempts: 
            type: integer
            format: int32
            description: "Number of remaining signing method attempts"
          lastUsedSuccess: 
            type: string
            description: "Date-time when signing method was last successfuly used"
          hasMasterSecret: 
            type: boolean

    
    SigningMethod_OneOf:
      oneOf:
        - $ref: '#/components/schemas/BiometricSigningMethodDto'
        - $ref: '#/components/schemas/EmergencyCodeSigningMethodDto'
        - $ref: '#/components/schemas/PinSigningMethodDto'
    SigningMethodBase:
      type: object
      properties:
        id:
          type: string
          description: "The signing method `ID`"
        type:
          type: string
          description: "The type of signing method"
          enum:
            - PIN
            - BIOMETRIC
            - EMERGENCY_CODE
        incorrectAttempts:
          type: integer
          format: int32
          description: "The number of incorrect signing method attempts"
        remainingAttempts:
          type: integer
          format: int32
          description: "The number of remaining signing method attempts left"
        lastUsedSuccess:
          type: string
          format: date-time
          description: "Last time when signing method was used successfully"
        hasMasterSecret:
          type: boolean
          description: "Indicates if the user has a master secret"
      discriminator:
        propertyName: type
        mapping:
          PIN: '#/components/schemas/PinSigningMethodDto'
          EMERGENCY_CODE: '#/components/schemas/EmergencyCodeSigningMethodDto'
          BIOMETRIC: '#/components/schemas/BiometricSigningMethodDto'
    BiometricSigningMethodDto:
      type: object
      allOf:
        - $ref: '#/components/schemas/SigningMethodBase'
        - type: object
          properties:
            physicalDeviceId:
              type: string
    EmergencyCodeSigningMethodDto:
      type: object
      allOf:
        - $ref: '#/components/schemas/SigningMethodBase'
        - type: object
          properties:
            value:
              type: string
    PinSigningMethodDto:
      type: object
      allOf:
        - $ref: '#/components/schemas/SigningMethodBase'
    
    CreateSigningMethodRequest_OneOf:
      oneOf:
        - $ref: '#/components/schemas/CreatePinSigningMethodRequest'
        - $ref: '#/components/schemas/CreateEmergencyCodeSigningMethodRequest'
        - $ref: '#/components/schemas/CreateBiometricSigningMethodRequest'
        - $ref: '#/components/schemas/CreatePasswordSigningMethodRequest'
      discriminator:
        propertyName: type
        mapping:
          PIN: '#/components/schemas/CreatePinSigningMethodRequest'
          EMERGENCY_CODE: '#/components/schemas/CreateEmergencyCodeSigningMethodRequest'
          BIOMETRIC: '#/components/schemas/CreateBiometricSigningMethodRequest'
          PASSWORD: '#/components/schemas/CreatePasswordSigningMethodRequest'
      


    CreateSigningMethodRequestBase:
      required:
        - type
      type: object
      properties:
        type:
          type: string
          description: "Authentication method type (first method must be PIN)"
          enum:
            - PIN
            - BIOMETRIC
            - EMERGENCY_CODE
            - PASSWORD
      discriminator:
        propertyName: type
        mapping:
          PIN: '#/components/schemas/CreatePinSigningMethodRequest'
          EMERGENCY_CODE: '#/components/schemas/CreateEmergencyCodeSigningMethodRequest'
          BIOMETRIC: '#/components/schemas/CreateBiometricSigningMethodRequest'
          PASSWORD: '#/components/schemas/CreatePasswordSigningMethodRequest'
    CreatePinSigningMethodRequest:
      title: "PIN"
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateSigningMethodRequestBase'
        - type: object
          required:
            - value
          properties:
            value:
              type: string
              pattern: "^\\d{6}$"
              minLength: 6
              maxLength: 6
              description: "Six-digit PIN code (mandatory as first signing method)"
              example: "123456"
    CreateEmergencyCodeSigningMethodRequest:
      title: "Emergency Code"
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateSigningMethodRequestBase'
        - type: object
          properties:
            value:
              type: string
              minLength: 25
              maxLength: 25
              pattern: "^[a-zA-Z0-9]{25}$"
              description: "25-character emergency recovery code (auto-generated if empty). Can only be added after PIN is set."
              example: "ABC123DEF456GHI789JKL012M"    
    CreateBiometricSigningMethodRequest:
      title: "Biometric"
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateSigningMethodRequestBase'
        - type: object
          required:
            - value
            - physicalDeviceId
          properties:
            value:
              type: string
              minLength: 1
              maxLength: 256
              description: "Biometric identifier or template hash. Can only be added after PIN is set."
              example: "face_id_template_abc123"
            physicalDeviceId:
              type: string
              minLength: 1
              maxLength: 100
              pattern: "^[a-zA-Z0-9_-]+$"
              description: "Unique device identifier"
              example: "device_12345_abcdef"
    CreatePasswordSigningMethodRequest:
      title: "Password"
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateSigningMethodRequestBase'
        - type: object
          required:
            - value
          properties:
            value:
              type: string
              minLength: 8
              maxLength: 128
              description: "Secure password for authentication. Can only be added after PIN is set."
              example: "MySecurePassword123!"

    UpdateSigningMethodRequest:
      type: object
      required:
        - value
      properties:
        value:
          type: string
          description: |
            The new credential value for the signing method. Format requirements vary by type:
            - **PIN**: Must be exactly 6 digits
            - **PASSWORD**: Minimum 8 characters with complexity requirements
            - **EMERGENCY_CODE**: Exactly 25 characters long. Leave empty to auto-generate.
            - **BIOMETRIC**: A unique identifier or template hash (e.g., "face_id_template_abc123")
          minLength: 6
          maxLength: 128
          examples:
            - '123456'
            - 'MySecure@Pass123'
            - 'EMG-2024-XY7Z-9ABC'
        physicalDeviceId:
          type: string
          description: |
            Unique identifier for the physical device used with biometric authentication.
            Required only when updating biometric signing methods. This links the 
            biometric data to a specific device for enhanced security.
    
    UserDto:
      type: object
      properties:
        id:
          type: string
          description: "The user `ID`"
        reference:
          type: string
          description: "Reference description of the user"
        createdAt:
          type: string
          format: date-time
          description: "The date and time when user was created"
        signingMethods: 
          type: array
          $ref: '#/components/schemas/SigningMethodDto'

    CreateWalletRequest:
      required:
        - secretType
      type: object
      properties:
        pincode:
          description: "The pin that will encrypt and decrypt the wallet"
          maxLength: 6
          minLength: 4
          pattern: ^\d+$
          type: string
        description:
          description: "A description to describe the wallet"
          maxLength: 200
          minLength: 1
          type: string
        secretType:
          description: "The blockchain on which to create the wallet"
          type: string
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - OPTIMISM
            - BASE
            - XPLA
        walletType:
          description: "The type of wallet you want to create, such as `API_WALLET`"
          type: string
          enum:
            - API_WALLET
        userId:
          description: "The `ID` of the user who you want to link this wallet to"
          type: string
    CreateApiWalletRequest:
      required:
        - secretType
        - userId
      description: "The request parameters for creating a wallet"
      type: object
      properties:
        pincode:
          description: "The pin that will encrypt and decrypt the wallet"
          maxLength: 6
          minLength: 4
          pattern: ^\d+$
          type: string
          deprecated: true
        description:
          description: "Human-readable description explaining the wallet's intended purpose or usage context"
          maxLength: 200
          minLength: 1
          type: string
        secretType:
          description: "The blockchain on which to create the wallet"
          type: string
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - OPTIMISM
            - BASE
            - XPLA
            - SOLANA
            - SUI
        userId:
          description: "The `UUID` of the user who you want to link this wallet to"
          type: string
          format: uuid
        identifier:
          description: "Optional custom identifier for wallet organization, grouping, or integration with external systems"
          type: string
    ExportKeyCommand:
      description: "Request parameters for exporting wallet credentials in different formats"
      type: object
      required:
        - type
      properties:
        type:
          description: "Format type for the exported wallet credentials"
          type: string
          enum:
            - KEYSTORE
            - PRIVATE_KEY
        pincode:
          description: "PINCODE for the wallet"
          maxLength: 6
          minLength: 4
          pattern: ^\d+$
          type: string
          deprecated: true
      oneOf:
        - title: "Keystore Export"
          description: "Export wallet as password-protected keystore file (recommended)"
          required:
            - type
            - password
          properties:
            type:
              const: "KEYSTORE"
            password:
              description: "Password to encrypt the keystore file for secure storage"
              type: string
              minLength: 6
              maxLength: 128
        - title: "Private Key Export"
          description: "Export raw private key (use with extreme caution - less secure)"
          required:
            - type
          properties:
            type:
              const: "PRIVATE_KEY"
          not:
            required:
              - password
    ExportedWalletDto:
      type: object
      properties:
        keystore:
          description: "JSON file that represents the wallet (warning: this is a string field so make sure the JSON body is escaped properly)"
          type: string
        privateKey:
          description: "The password of the keystore"
          type: string
    SwapRequest:
      required:
        - destinationWalletId
        - exchange
        - fromSecretType
        - inputAmount
        - orderType
        - outputAmount
        - toSecretType
        - walletId
      type: object
      properties:
        walletId:
          description: "The wallet `ID` of the source wallet"
          type: string
        destinationWalletId:
          description: "The wallet `ID` of the destination wallet"
          type: string
        fromSecretType:
          description: "The blockchain of source wallet"
          type: string
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - OPTIMISM
            - BASE
            - XPLA
        toSecretType:
          description: "The blockchain of the destination wallet"
          type: string
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - OPTIMISM
            - BASE
            - XPLA
        fromToken:
          description: "Source token contract address"
          type: string
        toToken:
          description: "Destination token contract address"
          type: string
        inputAmount:
          description: "The amount of tokens to swap"
          exclusiveMinimum: 0
          type: number
        outputAmount:
          description: "The amount of tokens to recieve"
          exclusiveMinimum: 0
          type: number
        orderType:
          description: "The type of order. We only allow `SELL` and `BUY`."
          type: string
          enum:
            - SELL
            - BUY
        exchange:
          description: "The name of exchange to use for the swap"
          type: string
          enum:
            - AVAX_WAVAX
            - BSC_WBNB
            - VEXCHANGE
            - UNISWAP
            - TOTLE
            - ONE_INCH
        enableGasEstimate:
          description: "Indicate to include gas estimate (response will contain value for the `gas` field). The response will include the `gasLimit` that needs to be used to execute the swap."
          type: boolean

    BuildTransaction_OneOf:
      oneOf:
        - $ref: '#/components/schemas/AETransactionRequest'
        - $ref: '#/components/schemas/ArbitrumContractExecutionRequest'
        - $ref: '#/components/schemas/ArbitrumErc20TransactionRequest'
        - $ref: '#/components/schemas/ArbitrumErc721TransactionRequest'
        - $ref: '#/components/schemas/ArbitrumTransactionRequest'
        - $ref: '#/components/schemas/AvacContractExecutionRequest'
        - $ref: '#/components/schemas/AvacErc20TransactionRequest'
        - $ref: '#/components/schemas/AvacErc721TransactionRequest'
        - $ref: '#/components/schemas/AvacTransactionRequest'
        - $ref: '#/components/schemas/BaseContractExecutionRequest'
        - $ref: '#/components/schemas/BaseErc20TransactionRequest'
        - $ref: '#/components/schemas/BaseErc721TransactionRequest'
        - $ref: '#/components/schemas/BaseTransactionRequest'
        - $ref: '#/components/schemas/BscBep20TransactionRequest'
        - $ref: '#/components/schemas/BscContractExecutionRequest'
        - $ref: '#/components/schemas/BscErc721TransactionRequest'
        - $ref: '#/components/schemas/BscTransactionRequest'
        - $ref: '#/components/schemas/BtcTransactionRequest'
        - $ref: '#/components/schemas/ERC1155TransactionRequest'
        - $ref: '#/components/schemas/EthereumErc20TransactionRequest'
        - $ref: '#/components/schemas/EthereumErc721TransactionRequest'
        - $ref: '#/components/schemas/EthTransactionRequest'
        - $ref: '#/components/schemas/EthereumContractExecutionRequest'
        - $ref: '#/components/schemas/Go20TransactionRequest'
        - $ref: '#/components/schemas/GoTransactionRequest'
        - $ref: '#/components/schemas/HbarTransferRequest'
        - $ref: '#/components/schemas/HederaApproveAllowanceRequest'
        - $ref: '#/components/schemas/HederaMultiTransferRequest'
        - $ref: '#/components/schemas/HederaNftTransferRequest'
        - $ref: '#/components/schemas/HederaTokenAssociationRequest'
        - $ref: '#/components/schemas/HederaTokenCreationRequest'
        - $ref: '#/components/schemas/HederaTokenMintRequest'
        - $ref: '#/components/schemas/HederaTokenTransferRequest'
        - $ref: '#/components/schemas/ImxCollectionCreationTransactionRequest'
        - $ref: '#/components/schemas/ImxErc20TransactionRequest'
        - $ref: '#/components/schemas/ImxErc721TransactionRequest'
        - $ref: '#/components/schemas/ImxMetadataSchemaCreationTransactionRequest'
        - $ref: '#/components/schemas/ImxNativeTransferTransactionRequest'
        - $ref: '#/components/schemas/ImxProjectCreationTransactionRequest'
        - $ref: '#/components/schemas/ImxTokenMintTransactionRequest'
        - $ref: '#/components/schemas/LtcTransactionRequest'
        - $ref: '#/components/schemas/MaticContractExecutionRequest'
        - $ref: '#/components/schemas/MaticErc20TransactionRequest'
        - $ref: '#/components/schemas/MaticErc721TransactionRequest'
        - $ref: '#/components/schemas/MaticTransactionRequest'
        - $ref: '#/components/schemas/NeoContractExecutionRequest'
        - $ref: '#/components/schemas/NeoGasTransactionRequest'
        - $ref: '#/components/schemas/NeoNativeTransactionRequest'
        - $ref: '#/components/schemas/VIP180TransactionRequest'
        - $ref: '#/components/schemas/VechainContractExecutionRequest'
        - $ref: '#/components/schemas/VechainErc1155TransactionRequest'
        - $ref: '#/components/schemas/VetTransactionRequest'
        - $ref: '#/components/schemas/VthoTransactionRequest'
        - $ref: '#/components/schemas/XplaContractExecutionRequest'
        - $ref: '#/components/schemas/XplaCw20TransactionRequest'
        - $ref: '#/components/schemas/XplaErc721TransactionRequest'
        - $ref: '#/components/schemas/XplaTransactionRequest'
        - $ref: '#/components/schemas/OptimismContractExecutionRequest'
        - $ref: '#/components/schemas/OptimismErc20TransactionRequest'
        - $ref: '#/components/schemas/OptimismErc721TransactionRequest'
        - $ref: '#/components/schemas/OptimismTransactionRequest'
        - $ref: '#/components/schemas/SolanaNftTransferRequest'
        - $ref: '#/components/schemas/SolanaProgramExecutionRequest'
        - $ref: '#/components/schemas/SolanaTokenTransferRequest'
        - $ref: '#/components/schemas/SolanaTransferTransactionRequest'
        - $ref: '#/components/schemas/SuiTransferTransactionRequest'
        - $ref: '#/components/schemas/SuiTokenTransferRequest'
        - $ref: '#/components/schemas/SuiNftTransferRequest'
        - $ref: '#/components/schemas/SuiPackageExecutionRequest'


    TransactionRequest_OneOf:
      oneOf:
        - $ref: '#/components/schemas/AETransactionRequest'
        - $ref: '#/components/schemas/ArbitrumContractExecutionRequest'
        - $ref: '#/components/schemas/ArbitrumErc20TransactionRequest'
        - $ref: '#/components/schemas/ArbitrumErc721TransactionRequest'
        - $ref: '#/components/schemas/ArbitrumTransactionRequest'
        - $ref: '#/components/schemas/AvacContractExecutionRequest'
        - $ref: '#/components/schemas/AvacErc20TransactionRequest'
        - $ref: '#/components/schemas/AvacErc721TransactionRequest'
        - $ref: '#/components/schemas/AvacTransactionRequest'
        - $ref: '#/components/schemas/BaseContractExecutionRequest'
        - $ref: '#/components/schemas/BaseErc20TransactionRequest'
        - $ref: '#/components/schemas/BaseErc721TransactionRequest'
        - $ref: '#/components/schemas/BaseTransactionRequest'
        - $ref: '#/components/schemas/BscBep20TransactionRequest'
        - $ref: '#/components/schemas/BscContractExecutionRequest'
        - $ref: '#/components/schemas/BscErc721TransactionRequest'
        - $ref: '#/components/schemas/BscTransactionRequest'
        - $ref: '#/components/schemas/BtcTransactionRequest'
        - $ref: '#/components/schemas/ERC1155TransactionRequest'
        - $ref: '#/components/schemas/EthereumErc20TransactionRequest'
        - $ref: '#/components/schemas/EthereumErc721TransactionRequest'
        - $ref: '#/components/schemas/EthTransactionRequest'
        - $ref: '#/components/schemas/EthereumContractExecutionRequest'
        - $ref: '#/components/schemas/Go20TransactionRequest'
        - $ref: '#/components/schemas/GoTransactionRequest'
        - $ref: '#/components/schemas/HbarTransferRequest'
        - $ref: '#/components/schemas/HederaApproveAllowanceRequest'
        - $ref: '#/components/schemas/HederaMultiTransferRequest'
        - $ref: '#/components/schemas/HederaNftTransferRequest'
        - $ref: '#/components/schemas/HederaTokenAssociationRequest'
        - $ref: '#/components/schemas/HederaTokenCreationRequest'
        - $ref: '#/components/schemas/HederaTokenMintRequest'
        - $ref: '#/components/schemas/HederaTokenTransferRequest'
        - $ref: '#/components/schemas/ImxCollectionCreationTransactionRequest'
        - $ref: '#/components/schemas/ImxErc20TransactionRequest'
        - $ref: '#/components/schemas/ImxErc721TransactionRequest'
        - $ref: '#/components/schemas/ImxMetadataSchemaCreationTransactionRequest'
        - $ref: '#/components/schemas/ImxNativeTransferTransactionRequest'
        - $ref: '#/components/schemas/ImxProjectCreationTransactionRequest'
        - $ref: '#/components/schemas/ImxTokenMintTransactionRequest'
        - $ref: '#/components/schemas/LtcTransactionRequest'
        - $ref: '#/components/schemas/MaticContractExecutionRequest'
        - $ref: '#/components/schemas/MaticErc20TransactionRequest'
        - $ref: '#/components/schemas/MaticErc721TransactionRequest'
        - $ref: '#/components/schemas/MaticTransactionRequest'
        - $ref: '#/components/schemas/NeoContractExecutionRequest'
        - $ref: '#/components/schemas/NeoGasTransactionRequest'
        - $ref: '#/components/schemas/NeoNativeTransactionRequest'
        - $ref: '#/components/schemas/VIP180TransactionRequest'
        - $ref: '#/components/schemas/VechainContractExecutionRequest'
        - $ref: '#/components/schemas/VechainErc1155TransactionRequest'
        - $ref: '#/components/schemas/VetTransactionRequest'
        - $ref: '#/components/schemas/VthoTransactionRequest'
        - $ref: '#/components/schemas/XplaContractExecutionRequest'
        - $ref: '#/components/schemas/XplaCw20TransactionRequest'
        - $ref: '#/components/schemas/XplaErc721TransactionRequest'
        - $ref: '#/components/schemas/XplaTransactionRequest'
        - $ref: '#/components/schemas/OptimismContractExecutionRequest'
        - $ref: '#/components/schemas/OptimismErc20TransactionRequest'
        - $ref: '#/components/schemas/OptimismErc721TransactionRequest'
        - $ref: '#/components/schemas/OptimismTransactionRequest'
        - $ref: '#/components/schemas/SolanaNftTransferRequest'
        - $ref: '#/components/schemas/SolanaProgramExecutionRequest'
        - $ref: '#/components/schemas/SolanaTokenTransferRequest'
        - $ref: '#/components/schemas/SolanaTransferTransactionRequest'
        - $ref: '#/components/schemas/SuiTransferTransactionRequest'
        - $ref: '#/components/schemas/SuiTokenTransferRequest'
        - $ref: '#/components/schemas/SuiPackageExecutionRequest'
        - $ref: '#/components/schemas/SuiNftTransferRequest'
    TransactionRequestBase:
      required:
        - type
        - walletId
      type: object
      properties:
        walletId:
          type: string
          description: "The wallet `ID` that executed the tx"
        pincode:
          maxLength: 6
          minLength: 4
          pattern: ^\d+$
          type: string
          deprecated: true
        type:
          type: string
          description: "The type of transaction"
          enum:
            - AE_TRANSACTION
            - BSC_CONTRACT_EXECUTION
            - BSC_BEP20_TRANSACTION
            - BSC_ERC721_TRANSACTION
            - BSC_TRANSACTION
            - AVAC_CONTRACT_EXECUTION
            - AVAC_ERC20_TRANSACTION
            - AVAC_ERC721_TRANSACTION
            - AVAC_TRANSACTION
            - BTC_TRANSACTION
            - ETH_TRANSACTION
            - ETHEREUM_CONTRACT_EXECUTION
            - ETHEREUM_ERC20_TRANSACTION
            - ETHEREUM_ERC721_TRANSACTION
            - GO_TRANSACTION
            - GOCHAIN_GO20_TRANSACTION
            - HBAR_TRANSFER
            - HEDERA_TOKEN_TRANSFER
            - HEDERA_NFT_TRANSFER
            - HEDERA_TOKEN_ASSOCIATION
            - HEDERA_TOKEN_CREATION
            - HEDERA_TOKEN_MINT
            - HEDERA_MULTI_TRANSFER
            - HEDERA_APPROVE_ALLOWANCE
            - LTC_TRANSACTION
            - MATIC_CONTRACT_EXECUTION
            - MATIC_ERC20_TRANSACTION
            - MATIC_ERC721_TRANSACTION
            - MATIC_TRANSACTION
            - NEO_CONTRACT_EXECUTION
            - NEO_GAS_TRANSACTION
            - NEO_NATIVE_TRANSACTION
            - VECHAIN_CONTRACT_EXECUTION
            - VECHAIN_ERC1155_TRANSACTION
            - VECHAIN_VIP180_TRANSACTION
            - VET_TRANSACTION
            - VTHO_TRANSACTION
            - IMX_TRANSACTION
            - IMX_ERC20_TRANSACTION
            - IMX_ERC721_TRANSACTION
            - IMX_COLLECTION_CREATION
            - IMX_PROJECT_CREATION
            - IMX_METADATA_SCHEMA_CREATION
            - IMX_TOKEN_MINT
            - ARBITRUM_TRANSACTION
            - ARBITRUM_ERC20_TRANSACTION
            - ARBITRUM_ERC721_TRANSACTION
            - ARBITRUM_CONTRACT_EXECUTION
            - BASE_TRANSACTION
            - BASE_ERC20_TRANSACTION
            - BASE_ERC721_TRANSACTION
            - BASE_CONTRACT_EXECUTION
            - XPLA_TRANSACTION
            - XPLA_CW20_TRANSACTION
            - XPLA_ERC721_TRANSACTION
            - XPLA_CONTRACT_EXECUTION
            - OPTIMISM_TRANSACTION
            - OPTIMISM_ERC20_TRANSACTION
            - OPTIMISM_ERC721_TRANSACTION
            - OPTIMISM_CONTRACT_EXECUTION
            - SOLANA_TRANSFER
            - SOLANA_TOKEN_TRANSFER
            - SOLANA_NFT_TRANSFER
            - SOLANA_PROGRAM_EXECUTION
            - SUI_TRANSFER
            - SUI_TOKEN_TRANSFER
            - SUI_NFT_TRANSFER
            - SUI_PACKAGE_EXECUTION
        status:
          type: string
          description: "The status of transaction"
          enum:
            - SAVED
            - READY
            - PENDING
            - SUCCEEDED
            - FAILED
            - OVERRIDDEN
            - EXPIRED
            - CANCELED
            - UNKNOWN
      discriminator:
        propertyName: type
        mapping:
          AE_TRANSACTION: '#/components/schemas/AETransactionRequest'
          ARBITRUM_CONTRACT_EXECUTION: '#/components/schemas/ArbitrumContractExecutionRequest'
          ARBITRUM_ERC20_TRANSACTION: '#/components/schemas/ArbitrumErc20TransactionRequest'
          ARBITRUM_ERC721_TRANSACTION: '#/components/schemas/ArbitrumErc721TransactionRequest'
          ARBITRUM_TRANSACTION: '#/components/schemas/ArbitrumTransactionRequest'
          AVAC_CONTRACT_EXECUTION: '#/components/schemas/AvacContractExecutionRequest'
          AVAC_ERC20_TRANSACTION: '#/components/schemas/AvacErc20TransactionRequest'
          AVAC_ERC721_TRANSACTION: '#/components/schemas/AvacErc721TransactionRequest'
          AVAC_TRANSACTION: '#/components/schemas/AvacTransactionRequest'
          BASE_CONTRACT_EXECUTION: '#/components/schemas/BaseContractExecutionRequest'
          BASE_ERC20_TRANSACTION: '#/components/schemas/BaseErc20TransactionRequest'
          BASE_ERC721_TRANSACTION: '#/components/schemas/BaseErc721TransactionRequest'
          BASE_TRANSACTION: '#/components/schemas/BaseTransactionRequest'
          BSC_BEP20_TRANSACTION: '#/components/schemas/BscBep20TransactionRequest'
          BSC_CONTRACT_EXECUTION: '#/components/schemas/BscContractExecutionRequest'
          BSC_ERC721_TRANSACTION: '#/components/schemas/BscErc721TransactionRequest'
          BSC_TRANSACTION: '#/components/schemas/BscTransactionRequest'
          BTC_TRANSACTION: '#/components/schemas/BtcTransactionRequest'
          ETH_TRANSACTION: '#/components/schemas/EthTransactionRequest'
          ETHEREUM_ERC20_TRANSACTION: '#/components/schemas/EthereumErc20TransactionRequest'
          ETHEREUM_ERC721_TRANSACTION: '#/components/schemas/EthereumErc721TransactionRequest'
          ETHEREUM_CONTRACT_EXECUTION: '#/components/schemas/EthereumContractExecutionRequest'
          GOCHAIN_GO20_TRANSACTION: '#/components/schemas/Go20TransactionRequest'
          GO_TRANSACTION: '#/components/schemas/GoTransactionRequest'
          HBAR_TRANSFER: '#/components/schemas/HbarTransferRequest'
          HEDERA_APPROVE_ALLOWANCE: '#/components/schemas/HederaApproveAllowanceRequest'
          HEDERA_MULTI_TRANSFER: '#/components/schemas/HederaMultiTransferRequest'
          HEDERA_NFT_TRANSFER: '#/components/schemas/HederaNftTransferRequest'
          HEDERA_TOKEN_ASSOCIATION: '#/components/schemas/HederaTokenAssociationRequest'
          HEDERA_TOKEN_CREATION: '#/components/schemas/HederaTokenCreationRequest'
          HEDERA_TOKEN_MINT: '#/components/schemas/HederaTokenMintRequest'
          HEDERA_TOKEN_TRANSFER: '#/components/schemas/HederaTokenTransferRequest'
          IMX_COLLECTION_CREATION: '#/components/schemas/ImxCollectionCreationTransactionRequest'
          IMX_ERC20_TRANSACTION: '#/components/schemas/ImxErc20TransactionRequest'
          IMX_ERC721_TRANSACTION: '#/components/schemas/ImxErc721TransactionRequest'
          IMX_METADATA_SCHEMA_CREATION: '#/components/schemas/ImxMetadataSchemaCreationTransactionRequest'
          IMX_TRANSACTION: '#/components/schemas/ImxNativeTransferTransactionRequest'
          IMX_PROJECT_CREATION: '#/components/schemas/ImxProjectCreationTransactionRequest'
          IMX_TOKEN_MINT: '#/components/schemas/ImxTokenMintTransactionRequest'
          LTC_TRANSACTION: '#/components/schemas/LtcTransactionRequest'
          MATIC_CONTRACT_EXECUTION: '#/components/schemas/MaticContractExecutionRequest'
          MATIC_ERC20_TRANSACTION: '#/components/schemas/MaticErc20TransactionRequest'
          MATIC_ERC721_TRANSACTION: '#/components/schemas/MaticErc721TransactionRequest'
          MATIC_TRANSACTION: '#/components/schemas/MaticTransactionRequest'
          NEO_CONTRACT_EXECUTION: '#/components/schemas/NeoContractExecutionRequest'
          NEO_GAS_TRANSACTION: '#/components/schemas/NeoGasTransactionRequest'
          NEO_NATIVE_TRANSACTION: '#/components/schemas/NeoNativeTransactionRequest'
          VECHAIN_VIP180_TRANSACTION: '#/components/schemas/VIP180TransactionRequest'
          VECHAIN_CONTRACT_EXECUTION: '#/components/schemas/VechainContractExecutionRequest'
          VECHAIN_ERC1155_TRANSACTION: '#/components/schemas/VechainErc1155TransactionRequest'
          VET_TRANSACTION: '#/components/schemas/VetTransactionRequest'
          VTHO_TRANSACTION: '#/components/schemas/VthoTransactionRequest'
          XPLA_CONTRACT_EXECUTION: '#/components/schemas/XplaContractExecutionRequest'
          XPLA_CW20_TRANSACTION: '#/components/schemas/XplaCw20TransactionRequest'
          XPLA_ERC721_TRANSACTION: '#/components/schemas/XplaErc721TransactionRequest'
          XPLA_TRANSACTION: '#/components/schemas/XplaTransactionRequest'
          OPTIMISM_CONTRACT_EXECUTION: '#/components/schemas/OptimismContractExecutionRequest'
          OPTIMISM_ERC20_TRANSACTION: '#/components/schemas/OptimismErc20TransactionRequest'
          OPTIMISM_ERC721_TRANSACTION: '#/components/schemas/OptimismErc721TransactionRequest'
          OPTIMISM_TRANSACTION: '#/components/schemas/OptimismTransactionRequest'
          SOLANA_NFT_TRANSFER: '#/components/schemas/SolanaNftTransferRequest'
          SOLANA_PROGRAM_EXECUTION: '#/components/schemas/SolanaProgramExecutionRequest'
          SOLANA_TOKEN_TRANSFER: '#/components/schemas/SolanaTokenTransferRequest'
          SOLANA_TRANSFER: '#/components/schemas/SolanaTransferTransactionRequest'
          SUI_TRANSFER: '#/components/schemas/SuiTransferTransactionRequest'
          SUI_TOKEN_TRANSFER: '#/components/schemas/SuiTokenTransferRequest'
          SUI_NFT_TRANSFER: '#/components/schemas/SuiNftTransferRequest'
          SUI_PACKAGE_EXECUTION: '#/components/schemas/SuiPackageExecutionRequest'
    AETransactionRequest:
      required:
        - to
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            to:
              type: string
            value:
              type: integer
            fee:
              type: integer
              deprecated: true
            ttl:
              type: integer
            nonce:
              type: integer
            data:
              type: string
    ArbitrumContractExecutionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            maxFeePerGas:
              type: integer
            maxPriorityFeePerGas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            functionName:
              type: string
            inputs:
              type: array
              items:
                $ref: '#/components/schemas/JsonNode'
    ArbitrumErc20TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            maxFeePerGas:
              type: integer
            maxPriorityFeePerGas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
    ArbitrumErc721TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            maxFeePerGas:
              type: integer
            maxPriorityFeePerGas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            from:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            amount:
              type: integer
            tokenId:
              type: integer
    ArbitrumTransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            maxFeePerGas:
              type: integer
            maxPriorityFeePerGas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            data:
              type: string
    AvacContractExecutionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            network:
              $ref: '#/components/schemas/Network'
            value:
              type: integer
            to:
              type: string
            functionName:
              type: string
            inputs:
              type: array
              items:
                $ref: '#/components/schemas/JsonNode'
    AvacErc20TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
    AvacErc721TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            tokenId:
              type: integer
            amount:
              type: integer
            to:
              type: string
            from:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            value:
              type: integer
    AvacTransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            data:
              type: string
    BaseContractExecutionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            functionName:
              type: string
            inputs:
              type: array
              items:
                $ref: '#/components/schemas/JsonNode'
    BaseErc20TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
    BaseErc721TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            from:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            amount:
              type: integer
            tokenId:
              type: integer
    BaseTransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            data:
              type: string
    BscBep20TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
    BscContractExecutionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            network:
              $ref: '#/components/schemas/Network'
            value:
              type: integer
            to:
              type: string
            functionName:
              type: string
            inputs:
              type: array
              items:
                $ref: '#/components/schemas/JsonNode'
    BscErc721TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            tokenId:
              type: integer
            amount:
              type: integer
            to:
              type: string
            from:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            value:
              type: integer
    BscTransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            data:
              type: string
    BtcTransactionRequest:
      required:
        - to
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            value:
              type: integer
            feePerByte:
              type: integer
              format: int32
            to:
              type: string
    ERC1155TransactionClause:
      required:
        - from
        - to
        - tokenAddress
        - tokenId
      type: object
      properties:
        from:
          type: string
        to:
          type: string
        tokenId:
          type: integer
        amount:
          type: integer
        tokenAddress:
          type: string
    ERC1155TransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            blockRef:
              type: string
            chainTag:
              type: string
            expiration:
              type: integer
              format: int32
            gas:
              type: integer
              format: int32
            gasPriceCoef:
              type: integer
              format: int32
            nonce:
              type: string
            clauses:
              type: array
              items:
                $ref: '#/components/schemas/ERC1155TransactionClause'
    Erc20TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
    Erc721TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            tokenId:
              type: integer
            amount:
              type: integer
            to:
              type: string
            from:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            value:
              type: integer
    EthTransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            data:
              type: string
    EthereumContractExecutionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            functionName:
              type: string
            inputs:
              type: array
              items:
                $ref: '#/components/schemas/JsonNode'
    Go20TransactionRequest:
      required:
        - to
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
    GoTransactionRequest:
      required:
        - to
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            data:
              type: string
    HbarTransferRequest:
      required:
        - amount
        - to
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            from:
              type: string
            to:
              type: string
            transactionMemo:
              type: string
            amount:
              type: integer
    HederaApproveAllowanceRequest:
      required:
        - allowanceType
        - spenderAccount
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            allowanceType:
              type: string
              enum:
                - HBAR
                - TOKEN
                - NFT
                - NFT_ALL
            spenderAccount:
              type: string
            amount:
              type: integer
              format: int64
            tokenId:
              type: string
            serial:
              type: integer
              format: int64
    HederaCustomFee:
      type: object
      properties:
        type:
          type: string
          enum:
            - FIXED_FEE
            - FRACTIONAL_FEE
            - ROYALTY_FEE
    HederaMultiTransferRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            transactionMemo:
              type: string
            transfers:
              type: array
              items:
                $ref: '#/components/schemas/HederaTransactionRequest'
    HederaNftTransferRequest:
      required:
        - serial
        - to
        - tokenId
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            from:
              type: string
            to:
              type: string
            transactionMemo:
              type: string
            tokenId:
              type: string
            serial:
              type: integer
              format: int64
    HederaTokenAssociationRequest:
      required:
        - tokenIds
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            tokenIds:
              type: array
              items:
                type: string
            transactionMemo:
              type: string
    HederaTokenCreationRequest:
      required:
        - name
        - symbol
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            treasuryAccountId:
              type: string
            name:
              type: string
            symbol:
              type: string
            memo:
              type: string
            tokenType:
              type: string
              enum:
                - FUNGIBLE_COMMON
                - NON_FUNGIBLE_UNIQUE
            supplyType:
              type: string
              enum:
                - FINITE
                - INFINITE
            decimals:
              type: integer
              format: int32
            initialSupply:
              type: integer
              format: int64
            maxSupply:
              type: integer
              format: int64
            customFees:
              type: array
              items:
                $ref: '#/components/schemas/HederaCustomFee'
    HederaTokenMintRequest:
      required:
        - tokenId
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            tokenId:
              type: string
            metadata:
              type: string
            amount:
              type: integer
              format: int64
    HederaTokenTransferRequest:
      required:
        - amount
        - to
        - tokenId
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            from:
              type: string
            to:
              type: string
            transactionMemo:
              type: string
            tokenId:
              type: string
            amount:
              type: integer
    HederaTransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
    ImxCollectionCreationTransactionRequest:
      required:
        - contractAddress
        - name
        - projectId
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            collectionImageUrl:
              type: string
            contractAddress:
              type: string
            description:
              type: string
            iconUrl:
              type: string
            metadataApiUrl:
              type: string
            name:
              type: string
            ownerPublicKey:
              type: string
            projectId:
              type: integer
    ImxErc20TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            amount:
              type: integer
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            to:
              type: string
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
    ImxErc721TransactionRequest:
      required:
        - tokenAddress
        - tokenId
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            to:
              type: string
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            tokenId:
              type: integer
              format: int64
            amount:
              type: integer
    ImxMetadataSchemaCreationTransactionRequest:
      required:
        - contractAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            contractAddress:
              type: string
            metadata:
              type: array
              items:
                $ref: '#/components/schemas/ImxMetadataSchemaItem'
    ImxMetadataSchemaItem:
      type: object
      properties:
        type:
          type: string
          enum:
            - discrete
            - enum
            - boolean
            - text
        filterable:
          type: boolean
        name:
          type: string
    ImxMintDestination:
      type: object
      properties:
        address:
          type: string
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/ImxMintToken'
    ImxMintRoyalty:
      type: object
      properties:
        recipient:
          type: string
        percentage:
          type: number
          format: double
    ImxMintToken:
      type: object
      properties:
        id:
          type: string
        metadataBlueprint:
          type: string
        royalties:
          type: array
          items:
            $ref: '#/components/schemas/ImxMintRoyalty'
    ImxNativeTransferTransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            amount:
              type: integer
            to:
              type: string
            data:
              type: string
    ImxProjectCreationTransactionRequest:
      required:
        - companyName
        - contactEmail
        - name
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            name:
              type: string
            companyName:
              type: string
            contactEmail:
              type: string
    ImxTokenMintTransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            tokenAddress:
              type: string
            destinations:
              type: array
              items:
                $ref: '#/components/schemas/ImxMintDestination'
    JsonNode:
      type: object
    LtcTransactionRequest:
      required:
        - to
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            value:
              type: integer
            feePerKiloByte:
              type: integer
              format: int32
            to:
              type: string
    MaticContractExecutionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            network:
              $ref: '#/components/schemas/Network'
            value:
              type: integer
            to:
              type: string
            functionName:
              type: string
            inputs:
              type: array
              items:
                $ref: '#/components/schemas/JsonNode'
    EthereumErc20TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string     
    EthereumErc721TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            tokenId:
              type: integer
            amount:
              type: integer
            to:
              type: string
            from:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            value:
              type: integer
    MaticErc20TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string              
    MaticErc721TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            tokenId:
              type: integer
            amount:
              type: integer
            to:
              type: string
            from:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            value:
              type: integer
    MaticTransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            data:
              type: string
    NeoContractCallOutput:
      type: object
      properties:
        to:
          type: string
        amount:
          type: number
        assetId:
          type: string
    NeoContractExecutionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            to:
              type: string
            functionName:
              type: string
            networkFee:
              type: string
            systemFee:
              type: string
            inputs:
              type: array
              items:
                $ref: '#/components/schemas/JsonNode'
            outputs:
              type: array
              items:
                $ref: '#/components/schemas/NeoContractCallOutput'
    NeoGasTransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            to:
              type: string
            value:
              type: number
    NeoNativeTransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            to:
              type: string
            value:
              type: integer
    Network:
      required:
        - name
        - nodeUrl
      type: object
      properties:
        name:
          type: string
        nodeUrl:
          type: string
        chainId:
          type: integer
    VIP180TransactionClause:
      required:
        - to
        - tokenAddress
      type: object
      properties:
        to:
          type: string
        amount:
          type: integer
        tokenAddress:
          pattern: ^0x[a-fA-F0-9]{40}$
          type: string
    VIP180TransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            blockRef:
              type: string
            chainTag:
              type: string
            expiration:
              type: integer
              format: int32
            gas:
              type: integer
              format: int32
            gasPriceCoef:
              type: integer
              format: int32
            nonce:
              type: string
            clauses:
              type: array
              items:
                $ref: '#/components/schemas/VIP180TransactionClause'
    ValidateSigningMethodCommand:
      required:
        - id
        - value
      type: object
      properties:
        id:
          type: string
        value:
          type: string
    VechainContractExecution:
      type: object
      properties:
        amount:
          type: string
        to:
          type: string
        functionName:
          type: string
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/JsonNode'
    VechainContractExecutionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            blockRef:
              type: string
            chainTag:
              type: string
            expiration:
              type: integer
              format: int32
            gas:
              type: integer
              format: int32
            gasPriceCoef:
              type: integer
              format: int32
            nonce:
              type: string
            contractCalls:
              type: array
              items:
                $ref: '#/components/schemas/VechainContractExecution'
    VechainErc1155TransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            blockRef:
              type: string
            chainTag:
              type: string
            expiration:
              type: integer
              format: int32
            gas:
              type: integer
              format: int32
            gasPriceCoef:
              type: integer
              format: int32
            nonce:
              type: string
            status:
              type: string
            clauses:
              type: array
              items:
                $ref: '#/components/schemas/VetErc1155TransactionClause'
    VetErc1155TransactionClause:
      type: object
      properties:
        from:
          type: string
        to:
          type: string
        amount:
          type: integer
        tokenId:
          type: string
        tokenAddress:
          type: string
    VetTransactionClause:
      type: object
      properties:
        to:
          type: string
        amount:
          type: integer
        data:
          type: string
    VetTransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            blockRef:
              type: string
            chainTag:
              type: string
            expiration:
              type: integer
              format: int32
            gas:
              type: integer
              format: int32
            gasPriceCoef:
              type: integer
              format: int32
            nonce:
              type: string
            clauses:
              type: array
              items:
                $ref: '#/components/schemas/VetTransactionClause'
    VthoTransactionClause:
      required:
        - to
      type: object
      properties:
        to:
          type: string
        amount:
          type: integer
    VthoTransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            signingMethod:
              $ref: '#/components/schemas/ValidateSigningMethodCommand'
            blockRef:
              type: string
            chainTag:
              type: string
            expiration:
              type: integer
              format: int32
            gas:
              type: integer
              format: int32
            gasPriceCoef:
              type: integer
              format: int32
            nonce:
              type: string
            clauses:
              type: array
              items:
                $ref: '#/components/schemas/VthoTransactionClause'
    XplaContractExecutionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            functionName:
              type: string
            inputs:
              type: array
              items:
                $ref: '#/components/schemas/JsonNode'
    XplaCw20TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
    XplaErc721TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            from:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            amount:
              type: integer
            tokenId:
              type: integer
    XplaTransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            gasPrice:
              type: integer
            gas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            data:
              type: string
    
    WalletImportRequest_OneOf:
      description: |
        Request schema for importing existing wallets from various blockchain networks.
        The schema automatically validates the correct format based on the importWalletType.
      oneOf:
        - $ref: '#/components/schemas/KeystoreImportRequest'
        - $ref: '#/components/schemas/PrivateKeyImportRequest'
        - $ref: '#/components/schemas/WifImportRequest'
        - $ref: '#/components/schemas/WalletMigrationImportRequest'
      discriminator:
        propertyName: importWalletType
    WalletImportRequestBase:
      type: object
      description: 'Common properties for all wallet import requests'
      required:
        - importWalletType
        - walletType
        - userId
      properties:
        importWalletType:
          description: |
            Specifies the blockchain network and credential format for wallet import.
            [View complete import type documentation](https://docs.venly.io/docs/import-a-wallet#import-wallet-types)
          type: string
          enum:
            - AETERNITY_KEYSTORE
            - AETERNITY_PRIVATE_KEY
            - BSC_KEYSTORE
            - BSC_PRIVATE_KEY
            - AVAC_KEYSTORE
            - AVAC_PRIVATE_KEY
            - ETHEREUM_KEYSTORE
            - MATIC_KEYSTORE
            - ETHEREUM_PRIVATE_KEY
            - MATIC_PRIVATE_KEY
            - GOCHAIN_KEYSTORE
            - GOCHAIN_PRIVATE_KEY
            - HEDERA_KEYSTORE
            - HEDERA_PRIVATE_KEY
            - VECHAIN_PRIVATE_KEY
            - VECHAIN_KEYSTORE
            - BITCOIN_WIF
            - BITCOIN_WIF_PASSPHRASE
            - LITECOIN_WIF
            - LITECOIN_WIF_PASSPHRASE
            - NEO_KEYSTORE
            - NEO_PRIVATE_KEY
            - NEO_WIF
            - IMX_KEYSTORE
            - IMX_PRIVATE_KEY
            - ARBITRUM_KEYSTORE
            - ARBITRUM_PRIVATE_KEY
            - BASE_KEYSTORE
            - BASE_PRIVATE_KEY
            - XPLA_KEYSTORE
            - XPLA_PRIVATE_KEY
            - OPTIMISM_KEYSTORE
            - OPTIMISM_PRIVATE_KEY
            - SOLANA_KEYSTORE
            - SOLANA_PRIVATE_KEY
            - SUI_KEYSTORE
            - SUI_PRIVATE_KEY
            - MIGRATION
        userId:
          type: string
          format: uuid
          description: 'Unique identifier (UUID) of the user who will own the imported wallet'
        custodial:
          type: boolean
          description: 'Whether the wallet will be managed as custodial or non-custodial'
          default: true
        pincode:
          description: "The PINCODE of the wallet"
          maxLength: 6
          minLength: 4
          pattern: ^\d+$
          type: string
          deprecated: true

    KeystoreImportRequest:
      description: 'Import wallet using encrypted keystore file (recommended for security)'
      title: 'Keystore Import Request'
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          required:
            - keystore
            - password
          properties:
            keystore:
              type: string
              description: 'JSON keystore file content (encrypted wallet data)'
              example: '{"version":3,"id":"...","crypto":{...}}'
            password:
              type: string
              description: 'Password used to decrypt the keystore file'
              minLength: 1
              example: 'my-secure-password'
            importWalletType:
              enum:
                - AETERNITY_KEYSTORE
                - ARBITRUM_KEYSTORE
                - AVAC_KEYSTORE
                - BASE_KEYSTORE
                - BSC_KEYSTORE
                - ETHEREUM_KEYSTORE
                - GOCHAIN_KEYSTORE
                - HEDERA_KEYSTORE
                - IMX_KEYSTORE
                - NEO_KEYSTORE
                - OPTIMISM_KEYSTORE
                - MATIC_KEYSTORE
                - SOLANA_KEYSTORE
                - SUI_KEYSTORE
                - VECHAIN_KEYSTORE
                - XPLA_KEYSTORE

    PrivateKeyImportRequest:
      description: 'Import wallet using raw private key (use with caution - less secure)'
      title: 'Private Key Import Request'
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          required:
            - privateKey
          properties:
            privateKey:
              type: string
              description: 'Raw private key'
            importWalletType:
              enum:
                - AETERNITY_PRIVATE_KEY
                - ARBITRUM_PRIVATE_KEY
                - AVAC_PRIVATE_KEY
                - BASE_PRIVATE_KEY
                - BSC_PRIVATE_KEY
                - ETHEREUM_PRIVATE_KEY
                - GOCHAIN_PRIVATE_KEY
                - HEDERA_PRIVATE_KEY
                - IMX_PRIVATE_KEY
                - NEO_PRIVATE_KEY
                - OPTIMISM_PRIVATE_KEY
                - MATIC_PRIVATE_KEY
                - SOLANA_PRIVATE_KEY
                - SUI_PRIVATE_KEY
                - VECHAIN_PRIVATE_KEY
                - XPLA_PRIVATE_KEY

    WifImportRequest:
      description: 'Import wallet using Wallet Import Format (WIF)'
      title: 'WIF Import Request'
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          required:
            - wif
          properties:
            wif:
              type: string
              description: 'Wallet Import Format string (base58-encoded private key)'
              pattern: '^[5KL][1-9A-HJ-NP-Za-km-z]{50,51}$|^[9c][1-9A-HJ-NP-Za-km-z]{49,50}$'
              example: '5HueCGU8rMjxEXxiPuD5BDku4MkFqeZyd4dZ1jvhTVqvbTLvyTJ'
            passphrase:
              type: string
              description: 'Optional passphrase for WIF decryption (required for passphrase-protected WIF)'
              example: 'my-wif-passphrase'
            importWalletType:
              enum:
                - BITCOIN_WIF
                - BITCOIN_WIF_PASSPHRASE
                - LITECOIN_WIF
                - LITECOIN_WIF_PASSPHRASE
                - NEO_WIF
          # Handle passphrase requirement conditionally
          anyOf:
            - properties:
                importWalletType:
                  enum: [BITCOIN_WIF, LITECOIN_WIF, NEO_WIF]
            - properties:
                importWalletType:
                  enum: [BITCOIN_WIF_PASSPHRASE, LITECOIN_WIF_PASSPHRASE]
              required:
                - passphrase

    WalletMigrationImportRequest:
      description: 'Migrate existing wallet between different blockchain networks'
      title: 'Wallet Migration Import Request'
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          required:
            - walletId
            - to
          properties:
            walletId:
              type: string
              format: uuid
              description: 'Unique identifier of the existing wallet to migrate'
            to:
              type: string
              description: 'Target blockchain network for migration'
              enum:
                - AETERNITY
                - AVALANCHE
                - BITCOIN
                - BSC
                - ETHEREUM
                - GOCHAIN
                - HEDERA
                - LITECOIN
                - VECHAIN
                - POLYGON
                - NEO
                - IMMUTABLE_X
                - ARBITRUM
                - BASE
                - XPLA
                - OPTIMISM
                - SOLANA
                - SUI
            importWalletType:
              const: MIGRATION

    AeternityKeystoreImportRequest:
      required:
        - keystore
        - password
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            keystore:
              type: string
            password:
              type: string
    AeternityPrivateKeyImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            privateKey:
              type: string
    ArbitrumKeystoreImportRequest:
      required:
        - keystore
        - password
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            keystore:
              type: string
            password:
              type: string
    ArbitrumPrivateKeyImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            privateKey:
              type: string
    AvacKeystoreImportRequest:
      required:
        - keystore
        - password
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            keystore:
              type: string
            password:
              type: string
    AvacPrivateKeyImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            privateKey:
              type: string
    BaseKeystoreImportRequest:
      required:
        - keystore
        - password
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            keystore:
              type: string
            password:
              type: string
    BasePrivateKeyImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            privateKey:
              type: string
    BitcoinWifImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            wif:
              type: string
    BitcoinWifPassphraseImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            wif:
              type: string
            passphrase:
              type: string
    BscKeystoreImportRequest:
      required:
        - keystore
        - password
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            keystore:
              type: string
            password:
              type: string
    BscPrivateKeyImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            privateKey:
              type: string
    EthereumKeystoreImportRequest:
      required:
        - keystore
        - password
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            keystore:
              type: string
            password:
              type: string
    EthereumPrivateKeyImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            privateKey:
              type: string
    GochainKeystoreImportRequest:
      required:
        - keystore
        - password
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            keystore:
              type: string
            password:
              type: string
    GochainPrivateKeyImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            privateKey:
              type: string
    HederaKeystoreImportRequest:
      required:
        - keystore
        - password
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            keystore:
              type: string
            password:
              type: string
    HederaPrivateKeyImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            privateKey:
              type: string
    ImxKeystoreImportRequest:
      required:
        - keystore
        - password
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            keystore:
              type: string
            password:
              type: string
    ImxPrivateKeyImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            privateKey:
              type: string
    LitecoinWifImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            wif:
              type: string
    LitecoinWifPassphraseImportRequest:
      required:
        - wif
        - passphrase
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            wif:
              type: string
            passphrase:
              type: string
    MaticKeystoreImportRequest:
      required:
        - keystore
        - password
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            keystore:
              type: string
            password:
              type: string
    MaticPrivateKeyImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            privateKey:
              type: string
    NeoKeystoreImportRequest:
      required:
        - keystore
        - password
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            keystore:
              type: string
            password:
              type: string
    NeoPrivateKeyImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            privateKey:
              type: string
    NeoWifImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            wif:
              type: string
    OptimismKeystoreImportRequest:
      required:
        - keystore
        - password
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            keystore:
              type: string
            password:
              type: string
    OptimismPrivateKeyImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            privateKey:
              type: string
    VechainKeystoreImportRequest:
      required:
        - keystore
        - password
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            keystore:
              type: string
            password:
              type: string
    VechainPrivateKeyImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            privateKey:
              type: string
    XplaKeystoreImportRequest:
      required:
        - keystore
        - password
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            keystore:
              type: string
            password:
              type: string
    XplaPrivateKeyImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            privateKey:
              type: string
    SolanaKeystoreImportRequest:
      required:
        - keystore
        - password
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            keystore:
              type: string
            password:
              type: string
    SolanaPrivateKeyImportRequest:
      type: object
      allOf:
        - $ref: '#/components/schemas/WalletImportRequestBase'
        - type: object
          properties:
            privateKey:
              type: string

    WalletBalanceDto:
      type: object
      properties:
        walletAddress:
          type: string 
          description: "The public wallet address containing the NFT"
        contractAddress:
          type: string
          description: "The NFT contract address"
        tokenBalance:
          type: integer
          format: int64   
          description: "The number of NFTs in the wallet" 
        tokenId:
          type: string
          format: int64
          description: "The token ID"   
    
    BuildTransactionRequest_OneOf:
      oneOf:
        - $ref: '#/components/schemas/BuildContractExecutionTransactionRequest'
        - $ref: '#/components/schemas/BuildGasTransferTransactionRequest'
        - $ref: '#/components/schemas/BuildMultiTransferTransactionRequest'
        - $ref: '#/components/schemas/BuildNftTransferTransactionRequest'
        - $ref: '#/components/schemas/BuildTokenTransferTransactionRequest'
        - $ref: '#/components/schemas/BuildTransferTransactionRequest'
    BuildTransactionRequestBase:
      required:
        - secretType
        - type
        - walletId
      type: object
      properties:
        walletId:
          type: string
          description: "The wallet `ID` that will execute the transaction"
        to:
          type: string
          description: "The destination wallet address"
        secretType:
          type: string
          description: "The blockchain of the transaction"
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - OPTIMISM
            - XPLA
            - BASE
            - SOLANA
            - SUI
        type:
          type: string
          description: "The type of transfer."
      discriminator:
        propertyName: type
        mapping:
          TRANSFER: '#/components/schemas/BuildTransferTransactionRequest'
          TOKEN_TRANSFER: '#/components/schemas/BuildTokenTransferTransactionRequest'
          NFT_TRANSFER: '#/components/schemas/BuildNftTransferTransactionRequest'
          CONTRACT_EXECUTION: '#/components/schemas/BuildContractExecutionTransactionRequest'
          GAS_TRANSFER: '#/components/schemas/BuildGasTransferTransactionRequest'
          MULTI_TRANSFER: '#/components/schemas/BuildMultiTransferTransactionRequest'

    CreateTransactionRequestBase:
      required:
        - secretType
        - type
        - walletId
      type: object
      properties:
        walletId:
          type: string
          description: "The wallet `ID` that will execute the transaction"
        to:
          type: string
          description: "The destination wallet address"
        secretType:
          type: string
          description: "The blockchain of the transaction"
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - OPTIMISM
            - XPLA
            - BASE
            - SOLANA
            - SUI
        type:
          type: string
          description: "The type of transfer."
      discriminator:
        propertyName: type
        mapping:
          TRANSFER: '#/components/schemas/CreateTransferTransactionRequest'
          TOKEN_TRANSFER: '#/components/schemas/CreateTokenTransferTransactionRequest'
          NFT_TRANSFER: '#/components/schemas/CreateNftTransferTransactionRequest'
          CONTRACT_EXECUTION: '#/components/schemas/CreateContractExecutionTransactionRequest'
          GAS_TRANSFER: '#/components/schemas/CreateGasTransferTransactionRequest'
          MULTI_TRANSFER: '#/components/schemas/CreateMultiTransferTransactionRequest'
          
    BuildTransferTransactionRequest:
      title: "Build Native Token Transfer Request"
      required:
        - secretType
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/BuildTransactionRequestBase'
        - type: object
          properties:
            data:
              type: string
            value:
              exclusiveMinimum: 0
              type: number
              description: "The amount of native coins you want to transfer"
            chainSpecificFields:
              $ref: '#/components/schemas/chainSpecificFields_OneOf' 
    BuildTokenTransferTransactionRequest:
      title: "Build ERC20 Token Transfer Request"
      required:
        - secretType
        - tokenAddress
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/BuildTransactionRequestBase'
        - type: object
          properties:
            tokenAddress:
              description: "Token contract address of the token"
              type: string
            value:
              description: "Amount you want to transfer"
              exclusiveMinimum: 0
              type: number
            chainSpecificFields:
              type: object
              $ref: '#/components/schemas/chainSpecificFields_OneOf'
    BuildNftTransferTransactionRequest:
      title: "Build NFT Transfer Request"
      required:
        - secretType
        - tokenAddress
        - tokenId
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/BuildTransactionRequestBase'
        - type: object
          properties:
            tokenAddress:
              type: string
              description: "The `contract address` of the NFT"
            tokenId:
              type: integer
              description: "The token `ID` of the NFT"
            amount:
              type: integer
              description: "Only applicable for fungible tokens. The amount of fungible tokens you want to transfer"
            chainSpecificFields:
              type: object
              $ref: '#/components/schemas/chainSpecificFields_OneOf'        
    BuildContractExecutionTransactionRequest:
      title: "Build Contract Execution Request"
      required:
        - functionName
      type: object
      allOf:
        - $ref: '#/components/schemas/BuildTransactionRequestBase'
        - type: object
          properties:
            functionName:
              type: string
              description: "The name of the function you want to call"
            value:
              exclusiveMinimum: 0
              type: number
            inputs:
              description: "Array of inputs needed to call the function"
              type: array
              items:
                 $ref: '#/components/schemas/ContractReadRequestInputParam'
            chainSpecificFields:
              type: object
              $ref: '#/components/schemas/chainSpecificFields_OneOf'
    BuildGasTransferTransactionRequest:
      title: "Build Gas Transfer Request"
      type: object
      allOf:
        - $ref: '#/components/schemas/BuildTransactionRequestBase'
        - type: object
          properties:
            value:
              exclusiveMinimum: 0
              type: number
              description: "The amount of gas you want to transfer"
            chainSpecificFields:
              type: object
              $ref: '#/components/schemas/chainSpecificFields_OneOf'
    BuildMultiTransferTransactionRequest:
      title: "Build Multi Transfer Request (HEDERA Only)"
      type: object
      allOf:
        - $ref: '#/components/schemas/BuildTransactionRequestBase'
        - type: object
          properties:
            chainSpecificFields:
              type: object
              $ref: '#/components/schemas/chainSpecificFieldsHedera'
            transfers:
              type: array
              description: "Define multiple transfers here"
              items:
                anyOf:
                  - $ref: '#/components/schemas/BuildNftTransferTransactionRequest'
                  - $ref: '#/components/schemas/BuildTokenTransferTransactionRequest'
                  - $ref: '#/components/schemas/BuildTransferTransactionRequest'   

    CreateTransactionRequest_OneOf:
      oneOf:
        - $ref: '#/components/schemas/CreateContractExecutionTransactionRequest'
        - $ref: '#/components/schemas/CreateGasTransferTransactionRequest'
        - $ref: '#/components/schemas/CreateMultiTransferTransactionRequest'
        - $ref: '#/components/schemas/CreateNftTransferTransactionRequest'
        - $ref: '#/components/schemas/CreateTokenTransferTransactionRequest'
        - $ref: '#/components/schemas/CreateTransferTransactionRequest' 
    CreateTransferTransactionRequest:
      title: "Create Native Token Transfer Request"
      required:
        - secretType
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateTransactionRequestBase'
        - type: object
          properties:
            type:
              type: string
              description: "The type of transfer."
              enum:
                - TRANSFER
            status:
              type: string
              description: |
                Controls the execution behavior of the transaction:
                - `SAVED`: Transaction is created and saved with a UUID for later execution 
                - `READY`: Transaction is created with a UUID, ready for execution, and has an expiration date/time
                - **Omit field**: Same behavior as `READY` - transaction is prepared and ready for immediate execution
              enum:
                - SAVED
                - READY
              example: "READY"
            data:
              type: string
            value:
              exclusiveMinimum: 0
              type: number
              description: "The amount of native coins you want to transfer"
    CreateTokenTransferTransactionRequest:
      title: "Create ERC20 Token Transfer Request"
      required:
        - secretType
        - tokenAddress
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateTransactionRequestBase'
        - type: object
          properties:
            type:
              type: string
              description: "The type of transfer."
              enum:
                - TOKEN_TRANSFER
            status:
              type: string
              description: |
                Controls the execution behavior of the transaction:
                - `SAVED`: Transaction is created and saved with a UUID for later execution 
                - `READY`: Transaction is created with a UUID, ready for execution, and has an expiration date/time
                - **Omit field**: Same behavior as `READY` - transaction is prepared and ready for immediate execution
              enum:
                - SAVED
                - READY
              example: "READY"
            tokenAddress:
              description: "Token contract address of the token"
              type: string
            value:
              description: "Amount you want to transfer"
              exclusiveMinimum: 0
              type: number
    CreateNftTransferTransactionRequest:
      title: "Create NFT Transfer Request"
      required:
        - secretType
        - tokenAddress
        - tokenId
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateTransactionRequestBase'
        - type: object
          properties:
            type:
              type: string
              description: "The type of transfer."
              enum:
                - NFT_TRANSFER
            status:
              type: string
              description: |
                Controls the execution behavior of the transaction:
                - `SAVED`: Transaction is created and saved with a UUID for later execution 
                - `READY`: Transaction is created with a UUID, ready for execution, and has an expiration date/time
                - **Omit field**: Same behavior as `READY` - transaction is prepared and ready for immediate execution
              enum:
                - SAVED
                - READY
              example: "READY"
            tokenAddress:
              type: string
              description: "The `contract address` of the NFT"
            tokenId:
              type: integer
              description: "The token `ID` of the NFT"
            amount:
              type: integer
              description: "Only applicable for fungible tokens. The amount of fungible tokens you want to transfer"        
    CreateContractExecutionTransactionRequest:
      title: "Create Contract Execution Request"
      required:
        - functionName
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateTransactionRequestBase'
        - type: object
          properties:
            type:
              type: string
              description: "The type of transfer."
              enum:
                - CONTRACT_EXECUTION
            status:
              type: string
              description: |
                Controls the execution behavior of the transaction:
                - `SAVED`: Transaction is created and saved with a UUID for later execution 
                - `READY`: Transaction is created with a UUID, ready for execution, and has an expiration date/time
                - **Omit field**: Same behavior as `READY` - transaction is prepared and ready for immediate execution
              enum:
                - SAVED
                - READY
              example: "READY"
            functionName:
              type: string
              description: "The name of the function you want to call"
            value:
              exclusiveMinimum: 0
              type: number
            inputs:
              description: "Array of inputs needed to call the function"
              type: array
              items:
                 $ref: '#/components/schemas/ContractReadRequestInputParam'
    CreateGasTransferTransactionRequest:
      title: "Create Gas Transfer Request"
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateTransactionRequestBase'
        - type: object
          properties:
            type:
              type: string
              description: "The type of transfer."
              enum:
                - GAS_TRANSFER
            status:
              type: string
              description: |
                Controls the execution behavior of the transaction:
                - `SAVED`: Transaction is created and saved with a UUID for later execution 
                - `READY`: Transaction is created with a UUID, ready for execution, and has an expiration date/time
                - **Omit field**: Same behavior as `READY` - transaction is prepared and ready for immediate execution
              enum:
                - SAVED
                - READY
              example: "READY"
            value:
              exclusiveMinimum: 0
              type: number
              description: "The amount of gas you want to transfer"
    CreateMultiTransferTransactionRequest:
      title: "Create Multi Transfer Request (HEDERA Only)"
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateTransactionRequestBase'
        - type: object
          properties:
            type:
              type: string
              description: "The type of transfer."
              enum:
                - MULTI_TRANSFER
            transfers:
              type: array
              description: "Define multiple transfers here"
              items:
                anyOf:
                  - $ref: '#/components/schemas/CreateNftTransferTransactionRequest'
                  - $ref: '#/components/schemas/CreateTokenTransferTransactionRequest'
                  - $ref: '#/components/schemas/CreateTransferTransactionRequest' 
    
    TransactionResponse:
      type: object
    TransactionRequestedResult:
      type: object
      properties:
        expiresAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        transactionRequest:
          $ref: '#/components/schemas/TransactionRequest_OneOf'
        transactionHash:
          type: string
        originId:
          type: string
        resubmittedTransactionId:
          type: string
          deprecated: true
        replacedBy:
          type: string
    SignTransactionRequestCommand:
      type: object
      properties:
        pincode:
          maxLength: 6
          minLength: 4
          pattern: ^\d+$
          type: string
    TransactionResult:
      type: object
      properties:
        id:
          type: string
          description: "The transaction `ID`"
        transactionHash:
          type: string
          description: "The transaction hash"
        transactionDetails:
          type: object
          description: "An object with additional transaction details"
    
    ConfirmSignatureRequest_OneOf:
      type: object
      title: "Secret Type Request"
      description: "Request containing the blockchain network type"
      required:
        - secretType
      properties:
        secretType:
          type: string
          description: "The blockchain network identifier"
          enum:
            - AETERNITY
            - ARBITRUM
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - HEDERA
            - IMX
            - BASE
            - XPLA
            - OPTIMISM
            - SOLANA
            - SUI
          example: "AETERNITY"
    
    ResubmitRequest:
      required:
        - secretType
        - transactionHash
      type: object
      properties:
        secretType:
          type: string
          description: "This is the blockchain of the transaction you want to resubmit."
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - OPTIMISM
            - BASE
            - XPLA
            - SOLANA
            - SUI
        transactionHash:
          description: "The `transactionHash` which can be found in the response body when you initially executed the transaction."
          type: string
        pincode:
          description: "This is the pincode of the wallet or the user "
          maxLength: 6
          minLength: 4
          pattern: ^\d+$
          type: string
          deprecated: true
    BitcoinFee:
      type: object
      properties:
        feePerByte:
          type: integer
          format: int32
        fee:
          type: integer
          format: int64
        defaultFee:
          type: boolean
    EvmGasPriceDto:
      type: object
      properties:
        gasPrice:
          type: integer
        defaultPrice:
          type: boolean
        type2TransactionFees:
          $ref: '#/components/schemas/Type2TransactionFee'
    GasPriceCoefDto:
      type: object
      properties:
        gasPriceCoef:
          type: integer
        defaultPrice:
          type: boolean
    GasPriceDto:
      type: object
      properties:
        gasPrice:
          type: integer
          description: "The gas price for one unit of gas"
        defaultPrice:
          type: boolean
    LitecoinFee:
      type: object
      properties:
        feePerKiloByte:
          type: integer
          format: int64
        fee:
          type: integer
          format: int64
        defaultFee:
          type: boolean
    
    
    BuildAndExecuteTransactionRequest:
      type: object
      properties:
        pincode:
          description: "The **PINCODE** of the wallet"
          maxLength: 6
          minLength: 4
          pattern: ^\d+$
          type: string
          deprecated: true
        transactionRequest:
          $ref: '#/components/schemas/BuildTransactionRequest_OneOf'       
    Type2TransactionFee:
      type: object
      properties:
        maxPriorityFeePerGas:
          type: integer
        maxFeePerGas:
          type: integer
    CancelRequest:
      required:
        - secretType
        - transactionHash
      type: object
      properties:
        secretType:
          description: "This is the blockchain of the transaction you want to cancel."
          type: string
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - OPTIMISM
            - BASE
            - XPLA
            - SUI
        transactionHash:
          description: "The `transactionHash` which can be found in the response body when you initially executed the transaction."
          type: string
        pincode:
          maxLength: 6
          minLength: 4
          pattern: ^\d+$
          type: string
          deprecated: true
    BuildAndExecuteSignatureRequest:
      type: object
      title: "Build and Execute Signature Request"
      description: |
        Request payload for building and executing a digital signature operation. 
        This schema supports both EIP-712 structured data signing and plain message signing 
        across multiple blockchain networks.
      properties:
        pincode:
          description: "The PINCODE of the wallet"
          maxLength: 6
          minLength: 4
          pattern: ^\d+$
          type: string
          deprecated: true
        signatureRequest:
          $ref: '#/components/schemas/BuildSignatureRequest_OneOf'
    
    BuildSignatureRequest_OneOf:
      oneOf:
        - $ref: '#/components/schemas/BuildEip712SignatureRequest'
        - $ref: '#/components/schemas/BuildMessageSignatureRequest'
      discriminator:
        propertyName: type
        mapping:
          EIP712: '#/components/schemas/BuildEip712SignatureRequest'
          MESSAGE: '#/components/schemas/BuildMessageSignatureRequest'

    BuildSignatureRequestBase:
      required:
        - secretType
        - walletId
      type: object
      properties:
        status:
          type: string
          description: |
            Controls the execution behavior of the signature request:
            - **Omit field**: Signature is executed immediately and completed in this request
            - `SAVED`: Creates a draft signature request with assigned UUID for later execution
            - `READY`: Prepares the signature request with assigned UUID, ready for immediate signing
          enum:
            - SAVED
            - READY
        type:
          description: |
            The cryptographic signature method to be used:
            - `MESSAGE`: Plain message signing (personal_sign)
            - `EIP712`: Structured data signing following EIP-712 standard for typed data
          type: string
          enum:
            - MESSAGE
            - EIP712
        secretType:
          description: "The blockchain of the signature request"
          type: string
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - OPTIMISM
            - BASE
            - XPLA
            - SOLANA
            - SUI
        walletId:
          description: "The `UUID` of the wallet that will sign the message"
          type: string
          format: uuid
      discriminator:
        propertyName: type
        mapping:
          EIP712: '#/components/schemas/BuildEip712SignatureRequest'
          MESSAGE: '#/components/schemas/BuildMessageSignatureRequest'
    BuildEip712SignatureRequest:
      title: "Build EIP712 Signature Request"
      required:
        - secretType
        - walletId
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/BuildSignatureRequestBase'
        - type: object
          properties:
            type:
              type: string
              enum: [EIP712]
              description: "Must be 'EIP712' for structured data signatures"
            secretType:
              description: "The EVM-compatible blockchain network for EIP-712 signatures"
              type: string
              enum:
                - AETERNITY
                - AVAC
                - BITCOIN
                - BSC
                - ETHEREUM
                - GOCHAIN
                - HEDERA
                - LITECOIN
                - VECHAIN
                - MATIC
                - NEO
                - IMX
                - ARBITRUM
                - OPTIMISM
                - BASE
                - XPLA
            data:
              $ref: '#/components/schemas/JsonNode'
              description: "The structured data to be signed, following EIP-712 format"
    BuildMessageSignatureRequest:
      title: "Build Message Signature Request"
      required:
        - secretType
        - walletId
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/BuildSignatureRequestBase'
        - type: object
          properties:
            type:
              type: string
              enum: [MESSAGE]
              description: "Must be 'MESSAGE' for plain data signatures"
            data:
              type: string
              description: "The message to be signed"
    
    SignSignatureRequestCommand:
      type: object
      properties:
        pincode:
          description: "The PINCODE of the wallet"
          maxLength: 6
          minLength: 4
          pattern: ^\d+$
          type: string
          deprecated: true
    
    Signature_OneOf:
      oneOf:
        - $ref: '#/components/schemas/HexSignature'
        - $ref: '#/components/schemas/RawSignature'
        - $ref: '#/components/schemas/SubmittedAndSignedTransactionSignature'
        - $ref: '#/components/schemas/TransactionSignature'
    SignatureBase:
      type: object
      properties:
        type:
          type: string
          enum:
            - HEX_SIGNATURE
            - SUBMITTED_AND_SIGNED_TRANSACTION_SIGNATURE
            - TRANSACTION_SIGNATURE
            - RAW_SIGNATURE
      discriminator:
        propertyName: type
        mapping:
          HEX_SIGNATURE: '#/components/schemas/HexSignature'
          RAW_SIGNATURE: '#/components/schemas/RawSignature'
          SUBMITTED_AND_SIGNED_TRANSACTION_SIGNATURE: '#/components/schemas/SubmittedAndSignedTransactionSignature'
          TRANSACTION_SIGNATURE: '#/components/schemas/TransactionSignature'
    HexSignature:
      type: object
      title: "Hex Signature"
      description: "Standard ECDSA signature with separate r, s, v components and concatenated signature"
      allOf:
        - $ref: '#/components/schemas/SignatureBase'
        - type: object
          properties:
            type:
              type: string
              enum: [HEX_SIGNATURE]
            r:
              type: string
              description: "The R component of the ECDSA signature (32 bytes hex)"
              example: "0xc9caa4692c96f44b5fd94d7130f62a1535e56b2f01c2df2009b890d0bc7e78f0"
            s:
              type: string
              description: "The S component of the ECDSA signature (32 bytes hex)"
              example: "0x4cb265d7329f8661b39925e13aaf5bbc6085fe072122df7af177856eebdb9c55"
            v:
              type: string
              description: "The recovery ID component (1 byte hex)"
              example: "0x1b"
            signature:
              type: string
              description: "Complete signature as concatenated hex string (r + s + v)"
              example: "0xc9caa4692c96f44b5fd94d7130f62a1535e56b2f01c2df2009b890d0bc7e78f04cb265d7329f8661b39925e13aaf5bbc6085fe072122df7af177856eebdb9c551b"
    RawSignature:
      type: object
      title: "Raw Signature"
      description: "Raw signature bytes without component separation"
      allOf:
        - $ref: '#/components/schemas/SignatureBase'
        - type: object
          properties:
            type:
              type: string
              enum: [RAW_SIGNATURE]
            signature:
              type: string
              description: "Raw signature data as hex string"
              example: "0x1234567890abcdef..."
    SubmittedAndSignedTransactionSignature:
      type: object
      title: "Submitted Transaction Signature"
      description: "Transaction that has been signed and automatically submitted to the blockchain network"
      allOf:
        - $ref: '#/components/schemas/SignatureBase'
        - type: object
          properties:
            type:
              type: string
              enum: [SUBMITTED_AND_SIGNED_TRANSACTION_SIGNATURE]
            signedTransaction:
              type: string
              description: "Serialized signed transaction data that was submitted"
              example: "0x02f86f01808459682f008459682f0e82520894..."
            transactionHash:
              type: string
              description: "Hash of the submitted transaction for tracking on-chain status"
              example: "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
            transactionDetails:
              type: object
              description: "Additional transaction metadata and network response details"
              additionalProperties: true
    TransactionSignature:
      type: object
      title: "Transaction Signature"
      description: "Signed transaction ready for broadcast to the blockchain network"
      allOf:
        - $ref: '#/components/schemas/SignatureBase'
        - type: object
          properties:
            type:
              type: string
              enum: [TRANSACTION_SIGNATURE]
            signedTransaction:
              type: string
              description: "Serialized signed transaction data ready for network broadcast"
              example: "0x02f86f01808459682f008459682f0e82520894..."

    ExecutedSignatureResponse:
      type: object
      title: "Signature Executed Response"
      description: "Response containing the completed cryptographic signature"
      properties:
        success:
          type: boolean
          description: "Indicates whether the signature operation was successful"
          example: true
        result:
          type: object
          description: "Contains the cryptographic signature components"
          properties:
            type:
              type: string
              description: "Format of the signature representation"
              example: "HEX_SIGNATURE"
            r:
              type: string
              description: "The R component of the ECDSA signature (32 bytes hex)"
              example: "0xc9caa4692c96f44b5fd94d7130f62a1535e56b2f01c2df2009b890d0bc7e78f0"
            s:
              type: string
              description: "The S component of the ECDSA signature (32 bytes hex)"
              example: "0x4cb265d7329f8661b39925e13aaf5bbc6085fe072122df7af177856eebdb9c55"
            v:
              type: string
              description: "The recovery ID component (1 byte hex, typically 0x1b or 0x1c)"
              example: "0x1b"
            signature:
              type: string
              description: "Complete signature as concatenated hex string (r + s + v)"
              example: "0xc9caa4692c96f44b5fd94d7130f62a1535e56b2f01c2df2009b890d0bc7e78f04cb265d7329f8661b39925e13aaf5bbc6085fe072122df7af177856eebdb9c551b"
    SavedOrReadySignatureResponse:
      type: object
      title: "Signature Saved/Ready Response"
      description: "Response when a signature request is created and saved for later execution"
      properties:
        success:
          type: boolean
          description: "Indicates whether the request creation was successful"
          example: true
        result:
          type: object
          description: "Contains the created signature request details"
          properties:
            createdAt:
              type: string
              format: date-time
              description: "ISO 8601 timestamp when the signature request was created"
              example: "2025-08-05T02:07:57.94806942"
            signatureRequest:
              type: object
              description: "The created signature request object"
              properties:
                id:
                  type: string
                  format: uuid
                  description: "Unique identifier for the signature request"
                  example: "3d3649c3-50ff-49c4-a74b-4fc74fb507a6"
                walletId:
                  type: string
                  format: uuid
                  description: "UUID of the wallet that will sign the message"
                  example: "21ff49aa-e8b3-4c09-930a-6db3eae7ce44"
                status:
                  type: string
                  description: "Current status of the signature request"
                  example: "SAVED"
                data:
                  type: string
                  description: "The message or data to be signed"
                  example: "I agree with terms and conditions"
                hash:
                  type: boolean
                  description: "Whether the data should be hashed before signing"
                  example: true
                type:
                  type: string
                  description: "The signature type and blockchain network"
                  example: "MATIC_RAW"
            originId:
              type: string
              format: uuid
              description: "Original request identifier for tracking purposes"
              example: "a9075cf6-2749-4f1c-8039-a031dd29152d"
    
    SignatureRequestDTO:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          description: "The date-time when the signature was created"
        expiresAt:
          type: string
          format: date-time
          description: "The date-time when the signature expires"
        signatureRequest:
          $ref: '#/components/schemas/Signature_OneOf'
        type:
          type: string
          enum:
            - AETERNITY_RAW
            - AETERNITY_TRANSACTION
            - BITCOIN_TRANSACTION
            - BSC_RAW
            - BSC_TRANSACTION
            - BSC_EIP712
            - AVAC_RAW
            - AVAC_TRANSACTION
            - AVAC_EIP712
            - ETHEREUM_RAW
            - ETHEREUM_EIP712
            - ETHEREUM_TRANSACTION
            - GOCHAIN_RAW
            - GOCHAIN_TRANSACTION
            - HEDERA_HBAR_TRANSFER
            - HEDERA_TOKEN_TRANSFER
            - HEDERA_NFT_TRANSFER
            - HEDERA_TOKEN_ASSOCIATION
            - HEDERA_TOKEN_CREATION
            - HEDERA_TOKEN_MINT
            - HEDERA_RAW
            - HEDERA_TRANSACTION
            - HEDERA_MULTI_TRANSFER
            - HEDERA_APPROVE_ALLOWANCE
            - LITECOIN_TRANSACTION
            - MATIC_RAW
            - MATIC_TRANSACTION
            - MATIC_EIP712
            - NEO_CONTRACT_EXECUTION
            - NEO_GAS_TRANSACTION
            - NEO_MESSAGE
            - NEO_NATIVE_TRANSACTION
            - VECHAIN_TRANSACTION
            - VECHAIN_RAW
            - IMX_RAW
            - IMX_EIP712
            - IMX_TRANSFER
            - IMX_ERC20_TRANSFER
            - IMX_ERC721_TRANSFER
            - IMX_COLLECTION_CREATION
            - IMX_PROJECT_CREATION
            - IMX_METADATA_SCHEMA_CREATION
            - IMX_TOKEN_MINT
            - ARBITRUM_RAW
            - ARBITRUM_TRANSACTION
            - ARBITRUM_EIP712
            - BASE_RAW
            - BASE_TRANSACTION
            - BASE_EIP712
            - XPLA_RAW
            - XPLA_TRANSACTION
            - OPTIMISM_RAW
            - OPTIMISM_TRANSACTION
            - OPTIMISM_EIP712
            - SOLANA_TRANSACTION
            - SOLANA_RAW
            - SUI_RAW
      discriminator:
        propertyName: type
        mapping:
          AETERNITY_RAW: '#/components/schemas/AeternityRawSignatureRequest'
          AETERNITY_TRANSACTION: '#/components/schemas/AeternityTransactionSignatureRequest'
          BITCOIN_TRANSACTION: '#/components/schemas/BitcoinTransactionSignatureRequest'
          BSC_RAW: '#/components/schemas/BscRawSignatureRequest'
          BSC_TRANSACTION: '#/components/schemas/BscTransactionSignatureRequest'
          BSC_EIP712: '#/components/schemas/BscEip712SignatureRequest'
          AVAC_RAW: '#/components/schemas/AvacRawSignatureRequest'
          AVAC_TRANSACTION: '#/components/schemas/AvacTransactionSignatureRequest'
          AVAC_EIP712: '#/components/schemas/AvacEip712SignatureRequest'
          ETHEREUM_RAW: '#/components/schemas/EthereumRawSignatureRequest'
          ETHEREUM_EIP712: '#/components/schemas/EthereumEip712SignatureRequest'
          ETHEREUM_TRANSACTION: '#/components/schemas/EthereumTransactionSignatureRequest'
          GOCHAIN_RAW: '#/components/schemas/GochainRawSignatureRequest'
          GOCHAIN_TRANSACTION: '#/components/schemas/GochainTransactionSignatureRequest'
          HEDERA_HBAR_TRANSFER: '#/components/schemas/HbarTransferSignatureRequest'
          HEDERA_TOKEN_TRANSFER: '#/components/schemas/TokenTransferSignatureRequest'
          HEDERA_TOKEN_CREATION: '#/components/schemas/HederaTokenCreationSignatureRequest'
          HEDERA_TOKEN_MINT: '#/components/schemas/HederaTokenMintSignatureRequest'
          HEDERA_RAW: '#/components/schemas/HederaRawSignatureRequest'
          HEDERA_NFT_TRANSFER: '#/components/schemas/NftTransferSignatureRequest'
          HEDERA_TOKEN_ASSOCIATION: '#/components/schemas/TokenAssociationSignatureRequest'
          HEDERA_TRANSACTION: '#/components/schemas/HederaRawTransactionSignatureRequest'
          LITECOIN_TRANSACTION: '#/components/schemas/LitecoinTransactionSignatureRequest'
          MATIC_RAW: '#/components/schemas/MaticRawSignatureRequest'
          MATIC_TRANSACTION: '#/components/schemas/MaticTransactionSignatureRequest'
          MATIC_EIP712: '#/components/schemas/MaticEip712SignatureRequest'
          NEO_CONTRACT_EXECUTION: '#/components/schemas/NeoContractExecutionSignatureRequest'
          NEO_GAS_TRANSACTION: '#/components/schemas/NeoGasTransactionSignatureRequest'
          NEO_MESSAGE: '#/components/schemas/NeoMessageSignatureRequest'
          NEO_NATIVE_TRANSACTION: '#/components/schemas/NeoNativeTransactionSignatureRequest'
          VECHAIN_TRANSACTION: '#/components/schemas/VechainTransactionSignatureRequest'
          VECHAIN_RAW: '#/components/schemas/VechainRawSignatureRequest'
          IMX_RAW: '#/components/schemas/ImxRawSignatureRequest'
          IMX_EIP712: '#/components/schemas/ImxEip712SignatureRequest'
          IMX_TRANSFER: '#/components/schemas/ImxTransferTransactionSignatureRequest'
          IMX_ERC20_TRANSFER: '#/components/schemas/ImxErc20TransferTransactionSignatureRequest'
          IMX_ERC721_TRANSFER: '#/components/schemas/ImxErc721TransferTransactionSignatureRequest'
          ARBITRUM_RAW: '#/components/schemas/ArbitrumRawSignatureRequest'
          ARBITRUM_TRANSACTION: '#/components/schemas/ArbitrumTransactionSignatureRequest'
          ARBITRUM_EIP712: '#/components/schemas/ArbitrumEip712SignatureRequest'
          OPTIMISM_RAW: '#/components/schemas/OptimismRawSignatureRequest'
          OPTIMISM_TRANSACTION: '#/components/schemas/OptimismTransactionSignatureRequest'
          OPTIMISM_EIP712: '#/components/schemas/OptimismEip712SignatureRequest'
          BASE_RAW: '#/components/schemas/BaseRawSignatureRequest'
          BASE_TRANSACTION: '#/components/schemas/BaseTransactionSignatureRequest'
          BASE_EIP712: '#/components/schemas/BaseEip712SignatureRequest'
          XPLA_RAW: '#/components/schemas/XplaRawSignatureRequest'
          XPLA_TRANSACTION: '#/components/schemas/XplaTransactionSignatureRequest'
          SOLANA_TRANSACTION: '#/components/schemas/SolanaTransactionSignatureRequest'
          SOLANA_RAW: '#/components/schemas/SolanaRawSignatureRequest'
          SUI_RAW: '#/components/schemas/SuiRawSignatureRequest'

 
    OptimismContractExecutionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            gasPrice:
              type: integer
            gas:
              type: integer
            maxFeePerGas:
              type: integer
            maxPriorityFeePerGas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            functionName:
              type: string
            inputs:
              type: array
              items:
                $ref: '#/components/schemas/JsonNode'
    OptimismErc20TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            gasPrice:
              type: integer
            gas:
              type: integer
            maxFeePerGas:
              type: integer
            maxPriorityFeePerGas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
    OptimismErc721TransactionRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            gasPrice:
              type: integer
            gas:
              type: integer
            maxFeePerGas:
              type: integer
            maxPriorityFeePerGas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            from:
              pattern: ^0x[a-fA-F0-9]{40}$
              type: string
            amount:
              type: integer
            tokenId:
              type: integer
    OptimismTransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            gasPrice:
              type: integer
            gas:
              type: integer
            maxFeePerGas:
              type: integer
            maxPriorityFeePerGas:
              type: integer
            nonce:
              type: integer
            value:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            data:
              type: string
    SolanaAccountSeed:
      type: object
      properties:
        type:
          type: string
          enum:
            - account
            - string
        value:
          type: string
    SolanaNftTransferRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            computeUnits:
              type: integer
            baseFee:
              type: integer
            prioritizationFee:
              type: integer
            value:
              type: integer
            lastValidBlockHeight:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: '[1-9A-HJ-NP-Za-km-z]{32,44}'
              type: string
            from:
              pattern: '[1-9A-HJ-NP-Za-km-z]{32,44}'
              type: string
            amount:
              type: integer
    SolanaProgramExecutionAccount:
      type: object
      properties:
        type:
          type: string
          enum:
            - CUSTOM
            - PDA
        isWritable:
          type: boolean
        publicKey:
          type: string
        seeds:
          type: array
          items:
            $ref: '#/components/schemas/SolanaAccountSeed'
    SolanaProgramExecutionInput:
      type: object
      properties:
        type:
          type: string
          enum:
            - u8
            - u16
            - u32
            - f32
            - f64
            - u64
            - i64
            - u128
            - i128
            - u256
            - i256
            - i8
            - i16
            - i32
            - publicKey
            - bool
            - vecU8
            - str
            - struct
            - vec
        value:
          type: object
    SolanaProgramExecutionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            computeUnits:
              type: integer
            baseFee:
              type: integer
            prioritizationFee:
              type: integer
            value:
              type: integer
            lastValidBlockHeight:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            programId:
              type: string
            inputs:
              type: array
              items:
                $ref: '#/components/schemas/SolanaProgramExecutionInput'
            accounts:
              type: array
              items:
                $ref: '#/components/schemas/SolanaProgramExecutionAccount'
    SolanaTokenTransferRequest:
      required:
        - tokenAddress
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            computeUnits:
              type: integer
            baseFee:
              type: integer
            prioritizationFee:
              type: integer
            value:
              type: integer
            lastValidBlockHeight:
              type: integer
            to:
              type: string
            network:
              $ref: '#/components/schemas/Network'
            tokenAddress:
              pattern: '[1-9A-HJ-NP-Za-km-z]{32,44}'
              type: string
    SolanaTransferTransactionRequest:
      required:
        - type
        - walletId
      type: object
      allOf:
        - $ref: '#/components/schemas/TransactionRequestBase'
        - type: object
          properties:
            computeUnits:
              type: integer
              description: "Specifies the maximum compute units allowed for the transaction."
            baseFee:
              type: integer
            prioritizationFee:
              type: integer
            value:
              type: integer

            lastValidBlockHeight:
              type: integer
              description: "Specifies the last valid block height for the transaction."
            to:
              type: string
              description: "The recipient's wallet address."
            network:
              $ref: '#/components/schemas/Network'
            data:
              type: string
              description: "Additional data or instructions for the transaction."
    
    SignatureVerificationRequest:
      required:
        - message
        - secretType
        - signature
        - signerAddress
      type: object
      properties:
        secretType:
          type: string
          description: "The blockchain of the signature"
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - BASE
            - XPLA
            - SOLANA
        signerAddress:
          type: string
          description: |
            The wallet address that allegedly created the signature. Verification will 
            confirm if this address actually signed the message.
          example: "0x742d35Cc6635C0532925a3b8D400B9fBf4FB81d9"
        message:
          type: string
          description: |
            The exact original message that was signed. Must match precisely - any 
            modification will cause verification to fail.
          example: "I agree to the terms and conditions"
        signature:
          type: string
          description: |
            The cryptographic signature to verify. This should be the complete signature 
            value returned from the signing operation (e.g., hex string with r+s+v components).
          example: "0xc9caa4692c96f44b5fd94d7130f62a1535e56b2f01c2df2009b890d0bc7e78f04cb265d7329f8661b39925e13aaf5bbc6085fe072122df7af177856eebdb9c551b"
    ContractReadRequest:
      required:
        - contractAddress
        - functionName
        - secretType
      type: object
      properties:
        secretType:
          description: "The blockchain of the contract"
          type: string
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - OPTIMISM
            - BASE
            - XPLA
            - SOLANA
        walletAddress:
          description: "The wallet address"
          type: string
        contractAddress:
          description: "The contract address that you want to read"
          type: string
        functionName:
          description: "The contract function that you want to call"
          type: string
        inputs:
          description: "Array of inputs needed to call the function"
          type: array
          items:
            $ref: '#/components/schemas/ContractReadRequestInputParam'
        outputs:
          description: "Array of expected outputs"
          type: array
          items:
            $ref: '#/components/schemas/ContractReadRequestOutputParam'
    ContractReadRequestInputParam:
      required:
        - type
        - value
      type: object
      properties:
        type:
          description: "Type of the input parameter (ex. uint256)"
          type: string
        value:
          description: "Value of the input parameter. This needs to be passed as a string value"
          $ref: '#/components/schemas/JsonNode'
    ContractReadRequestOutputParam:
      required:
        - type
      type: object
      properties:
        type:
          description: "The type of output"
          type: string
        params:
          type: array
          items:
            type: object
    ContractReadRequestTupleOutputParam:
      required:
        - type
      type: object
      allOf:
        - $ref: '#/components/schemas/ContractReadRequestOutputParam'
    ContractReadResult:
      type: object
      properties:
        type:
          type: string
          description: "The type of the response value from the contract read"
        value:
          type: object
          description: "The response value from the contract read"
    WalletAddress:
      required:
        - address
        - secretType
      type: object
      properties:
        secretType:
          type: string
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - BASE
            - XPLA
        address:
          type: string
    WalletEmailRequest:
      type: object
      properties:
        addresses:
          maxItems: 200
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/WalletAddress'
    WalletOwner:
      required:
        - email
        - userId
      type: object
      properties:
        userId:
          type: string
        email:
          type: string
    WalletOwnerInfo:
      type: object
      properties:
        secretType:
          type: string
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - BASE
            - XPLA
        address:
          type: string
        owners:
          type: array
          items:
            $ref: '#/components/schemas/WalletOwner'
    UpdateWalletTypeRequest:
      required:
        - walletType
      type: object
      properties:
        walletType:
          type: string
          enum:
            - API_WALLET
        custodial:
          type: boolean
          default: false
    UpdateWalletSecurityRequest:
      type: object
      properties:
        pincode:
          description: "The current PINCODE of the wallet"
          maxLength: 6
          minLength: 4
          pattern: ^\d+$
          type: string
          deprecated: true
        newPincode:
          description: "The new PINCODE"          
          type: string
        hasCustomPin:
          description: "Flag that indicates if a wallet has a custom PINCODE or not"
          type: boolean
        custodial:
          type: boolean
    UpdateWalletMetadataRequest:
      type: object
      additionalProperties: false
      minProperties: 1
      properties:
        description:
          type: string
          description: Human-readable description of the wallet's purpose or contents
          minLength: 1
          maxLength: 500
          example: "Primary business account for daily transactions"       
        primary:
          type: boolean
          description: Designates this wallet as the primary/default wallet for the user
          example: true      
        archived:
          type: boolean
          description: Archives the wallet, making it read-only and hidden from API endpoints
          default: false
          example: false  
        identifier:
          type: string
          description: Unique identifier or alias for the wallet
          minLength: 1
          maxLength: 100
          example: "main-wallet-2024"
    SortDto:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/SortOrderDto'
    SortOrderDto:
      type: object
      properties:
        property:
          type: string
        direction:
          type: string
          description: "Result sorted in ascending or descending order"
          enum:
            - ASC
            - DESC
    AttributeDto:
      type: object
      properties:
        type:
          type: string
          description: "The type of attribute"
        name:
          type: string
          description: "Name of the attribute"
        value:
          type: string
          description: "Value of the attribute"
        displayType:
          type: string
          description: "The type of display on an NFT marketplace for the attribute"
        traitCount:
          type: integer
        maxValue:
          type: integer
          description: "The maximum possible value for the attribute"
    NonFungibleAssetBalance:
      type: object
      properties:
        id:
          type: string
          description: "The token `ID`"
        name:
          type: string
          description: "NFT name"
        description:
          type: string
          description: "Description of the NFT"
        url:
          type: string
        backgroundColor:
          type: string
        imageUrl:
          type: string
          description: "The URL of the NFT image"
        imagePreviewUrl:
          type: string
          description: "The URL of the NFT image"
        imageThumbnailUrl:
          type: string
          description: "The URL of the NFT image"
        animationUrls:
          type: array
          description: "An array of external NFT media such as video, audio, and animations"
          items:
            $ref: '#/components/schemas/TypeValue'
        animationUrl:
          type: string
          deprecated: true
        fungible:
          type: boolean
          description: "Indication if the token is fungible or not" 
        contract:
          $ref: '#/components/schemas/NonFungibleContract'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeDto'
        balance:
          type: integer
          description: "Balance of the NFTs"
        finalBalance:
          type: integer
        transferFees:
          type: boolean
          description: "Indication if royalties are applicable on the NFT transfer"
    NonFungibleContract:
      type: object
      properties:
        name:
          type: string
          description: "The name of the NFT collection"
        description:
          type: string
          description: "Description of the NFT collection"
        address:
          type: string
          description: "The contract address of the NFT cololection"
        symbol:
          type: string
          description: "Symbol of th NFT collection"
        media:
          $ref: '#/components/schemas/TypeValue'
        type:
          type: string
          description: "The type of token, such as `ERC_1155`"
        verified:
          type: boolean
        premium:
          type: boolean
        isNsfw:
          type: boolean
          description: "Indicates if the NFT is NSFW"
        possibleSpam:
          type: boolean
          description: "Indicates if the NFT is spam"
        categories:
          type: array
          items:
            type: string
            description: "The category of the NFT collection"
        url:
          type: string
        imageUrl:
          type: string
          description: "The URL of the image for the NFT collection"
        externalUrl:
          type: string
          writeOnly: true
          description: "The external URL such as a link to your website or landing page"
    TypeValue:
      type: object
      properties:
        type:
          type: string
          description: "The type of media. Possible values are: `video | audio | image`"
        value:
          type: string
          description: "The URL of the media file"
    ApplicationEventResult:
      type: object
      properties:
        eventTimestamp:
          type: string
          format: date-time
          description: "The date-time of the event"
        client:
          type: string
        type:
          type: string
          description: "The event type"
          enum:
            - WALLET_CREATED
            - UNCLAIMED_EMAIL_WALLET_CREATED
            - UNCLAIMED_WALLET_CREATED
            - SIGNATURE_CREATED
            - INCOMING_TRANSACTION
            - OUTGOING_TRANSACTION
            - WALLET_IMPORTED
            - WALLET_LINKED
            - WALLET_UNLINKED
            - WALLET_ARCHIVED
            - WALLET_UNARCHIVED
            - WALLET_RECOVERABLE
            - WALLET_EXPORTED
            - WALLET_UNRECOVERABLE
            - WALLET_API_KEY_ADDED
            - WALLET_API_KEY_REMOVED
            - MASTER_PIN_UPDATED
            - CUSTOM_PIN_UPDATED
            - CUSTOM_PIN_ADDED
            - CUSTOM_PIN_REMOVED
            - WALLET_CLAIMED
            - WRONG_PIN_ENTERED
            - PIN_MAX_TRIES_REACHED
            - PIN_SUCCESSFULLY_VALIDATED
            - SIGNING_METHOD_CREATED
            - SIGNING_METHOD_UPDATED
            - SIGNING_METHOD_DELETED
            - SIGNING_METHOD_SUCCESSFULLY_VALIDATED
            - SIGNING_METHOD_VALIDATION_FAILED
        metadata:
          type: string
        walletId:
          type: string
          description: "The wallet `UUID`"
    TokenBalance:
      type: object
      properties:
        tokenAddress:
          type: string
          description: "Contract address of the token"
        rawBalance:
          type: string
          description: "Raw token balance"
        balance:
          type: number
          format: double
          description: "Normalized token balance"
        decimals:
          type: integer
          format: int32
          description: "Decimals of the token"
        symbol:
          type: string
          description: "The symbol of the token"
        logo:
          type: string
          description: "Logo of the token (_URL_)"
        type:
          type: string
          description: "The type of token, which depends on the specific blockchain"
        transferable:
          type: boolean
          description: "Indicates whether or not the token can be transferred"
        name:
          type: string
          description: "Name of the token"
        possibleSpam:
          type: boolean
          description: "Indicates if the token is possibly a spam"
        exchange:
          $ref: '#/components/schemas/TokenExchange'
        categories:
          type: array
          description: "The categories under which the token falls."
          items:
            type: string
        links:
          type: object
          description: "Social links such as Website, Facebook, YouTube, etc."
          additionalProperties:
            type: string
        thumbnail:
          type: string
          description: "The URL to the token's thumbnail image"
        portfolio_percentage:
          type: number
          description: "The percentage of the token's value relative to the total portfolio value"  
    TokenExchange:
      type: object
      properties:
        usdPrice:
          type: number
          format: int64
          description: "The price in USD for one token"
        usdBalanceValue:
          type: number
          format: int64
          description: "The total price of all tokens in USD"
    TokenAssociation:
      type: object
      properties:
        address:
          type: string
          description: "The public wallet address"
        maxTokenAutoAssociations:
          type: integer
          format: int64
          description: "Number of max auto - associations. (_Without needing to associate the token first_)"
        tokens:
          uniqueItems: true
          type: array
          description: "List of associated tokens with your wallet address"
          items:
            type: string
    TradingPair:
      type: object
      properties:
        from:
          description: "Details of the source token"
          $ref: '#/components/schemas/TradingPairDetails'
        to:
          description: "Details of the destination token"
          $ref: '#/components/schemas/TradingPairDetails'
    TradingPairDetails:
      type: object
      properties:
        secretType:
          type: string
          description: "The blockchain of the token"
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - BASE
            - XPLA
        symbol:
          type: string
          description: "Symbol of the token"
        tokenAddress:
          type: string
          description: "The token address of the token to be swapped"
    ConnectedApp:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        logo:
          type: string
    WalletItemsDto:
      type: object
      properties:
        walletId:
          type: string
          description: "The wallet `ID` holding the NFT"
        walletAddress:
          type: string
          description: "The public wallet address holding the NFT"
        walletType:
          type: string
          enum:
            - API_WALLET
        secretType:
          type: string
          description: "The blockchain of the wallet"
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - BASE
            - XPLA
        items:
          type: array
          description: "Information about the NFTs"
          items:
            $ref: '#/components/schemas/NonFungibleAssetBalance'
    ValidWalletAddressDto:
      type: object
      properties:
        valid:
          type: boolean
          description: "Indicates if the format of the wallet adress is correct or not"
    HederaNonfungibleAllowanceDto:
      type: object
      properties:
        contractAddress:
          type: string
          description: "The NFT contract address"
        tokenId:
          type: string
          description: "The token `ID`"
        spender:
          type: string
        delegatingSpender:
          type: string
    UserStatisticDto:
      type: object
      properties:
        activeWalletsCount:
          type: integer
          format: int64
    TxInfo:
      type: object
      properties:
        hash:
          type: string
          description: "The transaction hash"
        status:
          type: string
          description: "The current status of the transaction"
          enum:
            - UNKNOWN
            - PENDING
            - FAILED
            - SUCCEEDED
        confirmations:
          type: integer
          description: "Refers to the number of blocks that have been added to the blockchain"
        blockHash:
          type: string
          description: "A unique identifier for a block within a blockchain"
        blockNumber:
          type: integer
          description: "Refers to the unique identifier assigned to each block in a blockchain"
        hasReachedFinality:
          type: boolean
          description: "Indicates if the transaction was completed. Refers to the irreversibility of a confirmed transaction"
        chain:
          type: string
          description: "The blockchain of the transaction"
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - BASE
            - XPLA
        input: 
          type: string
          description: "The input data of the transaction"
    ExchangeRateRequest:
      description: "Retrieve exchange rate"
      required:
        - amount
        - fromSecretType
        - orderType
        - toSecretType
      type: object
      properties:
        fromSecretType:
          description: "Blockchain of the source token"
          type: string
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - BASE
            - XPLA
        toSecretType:
          description: "Blockchain of the destination token"
          type: string
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - BASE
            - XPLA
        fromToken:
          description: "Token address of the source token"
          type: string
        toToken:
          description: "Token address of the destination token"
          type: string
        amount:
          description: "The amount of tokens to swap"
          type: number
        orderType:
          description: "The type of order. We only allow `SELL` and `BUY`."
          type: string
          enum:
            - SELL
            - BUY
    ExchangeRate:
      type: object
      properties:
        exchange:
          type: string
          description: "The name of the exchange that will carry out the swap"
          enum:
            - AVAX_WAVAX
            - BSC_WBNB
            - VEXCHANGE
            - UNISWAP
            - TOTLE
            - ONE_INCH
        orderType:
          type: string
          description: "The type of order. Values can be either `BUY` or `SELL`."
          enum:
            - SELL
            - BUY
        inputAmount:
          type: number
          description: "The number of source tokens to swap"
        outputAmount:
          type: number
          description: "The number of destination tokens you will receive after swap"
        slippage:
          type: number
          description: "The slippage, indicated as a percentage, refers to the difference between the expected price of a trade and the actual executed price"
        fee:
          type: number
          description: "The gas fee required to execute the swap"
    ExchangeRateResult:
      type: object
      properties:
        exchangeRates:
          type: array
          description: "All of the exchange rates from all token exchanges"
          items:
            $ref: '#/components/schemas/ExchangeRate'
        bestRate:
          description: "The best exchange rate out of all the crypto exchanges"
          $ref: '#/components/schemas/ExchangeRate'
    SignableListResult:
      type: object
      properties:
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/SignatureRequestDTO'
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionRequestedResult'
    NonFungibleAsset:
      type: object
      properties:
        id:
          type: string
          description: "The token `ID` of the NFT"
        name:
          type: string
          description: "The name of the NFT"
        description:
          type: string
          description: "The description of the NFT"
        url:
          type: string
        backgroundColor:
          type: string
          description: " The background color of the NFT"
        imageUrl:
          type: string
          description: "The URL of the NFT image"
        imagePreviewUrl:
          type: string
          description: "The URL of the NFT image"
        imageThumbnailUrl:
          type: string
          description: "The URL of the NFT image"
        animationUrl:
          type: string
          deprecated: true
        animationUrls:
          type: array
          description: "An array of external media for the NFT, such as video, audio, and animations."
          items:
            $ref: '#/components/schemas/TypeValue'
        fungible:
          type: boolean
          description: "Indication whether the NFT is fungible or not"
        contract:
          $ref: '#/components/schemas/NonFungibleContract'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeDto'
        transferFees:
          type: boolean
    WalletTokenBalanceDto:
      type: object
      properties:
        walletAddress:
          type: string
          description: "The public wallet address that is holding the NFT"
        contractAddress:
          type: string
          description: "The contract address of the NFT"
        tokenBalance:
          type: integer
          format: int64
    BlockchainInfoDto:
      type: object
      properties:
        blockNumber:
          type: integer
          description: "The current block number (_Keep in mind that the information is dynamic, and the block number will continue to increase as new blocks are added to the blockchain._)"
        requiredConfirmations:
          type: integer
          description: "The number of confirmations required for a transaction to be considered secure or finalized"
        chainId:
          type: integer
          description: "Chain ID (_Chain Identifier_) is a unique identifier assigned to each specific blockchain network"
    ResponseEnvelope:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the request was successful
        pagination:
          $ref: '#/components/schemas/Pagination'
        sort:
          $ref: '#/components/schemas/Sort'
        result:
          type: object
          description: Only if success = true
        errors:
          type: array
          description: Only if success = false
          items:
            $ref: '#/components/schemas/ErrorBody'
    PageableObject:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
    SortObject:
      type: object
      properties:
        unsorted:
          type: boolean
        sorted:
          type: boolean
        empty:
          type: boolean
    Pagination:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        numberOfPages:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int64
        hasNextPage:
          type: boolean
        hasPreviousPage:
          type: boolean
    Sort:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/SortOrder'
    SortOrder:
      type: object
      properties:
        weight:
          type: integer
          format: int32
        property:
          type: string
        direction:
          type: string
          enum:
            - ASC
            - DESC
    
    chainSpecificFields_OneOf:
      oneOf:
        - $ref: '#/components/schemas/chainSpecificFieldsHedera'
        - $ref: '#/components/schemas/chainSpecificFieldsEvmChains'
        - $ref: '#/components/schemas/chainSpecificFieldsSolana'
        - $ref: '#/components/schemas/chainSpecificFieldsSui'
    chainSpecificFieldsBase:
      type: object
    chainSpecificFieldsSui:
      type: object
      title: "For SUI"
      description: Transaction settings for Sui.
      properties:
        gasPrice:
          type: integer
          format: int64
          description: "The gas price in `SUI` (optional, will be calculated by the system if not supplied)"
        gasBudget:
          type: integer
          format: int64
          description: Maximum SUI to spend on gas.     
    chainSpecificFieldsHedera:
      type: object
      description: Transaction settings for Hedera.
      title: "For HEDERA"
      allOf:
        - $ref: '#/components/schemas/chainSpecificFieldsBase'
        - type: object
          properties:
            transactionMemo:
              type: string
              description: "A memo that can be used with a transaction"
              example: 0.0.2810009
    chainSpecificFieldsEvmChains:
      type: object
      title: "For EVM Chains"
      allOf:
        - $ref: '#/components/schemas/chainSpecificFieldsBase'
        - type: object
          properties:     
            gasPrice:
              type: integer
              format: int64
              description: "The gas price in `wei` for type 0 transactions. (optional, will be calculated by the system if not supplied)"
            maxFeePerGas:
              type: integer
              format: int64
              description:  The maximum total fee per gas the sender is willing to pay for a transaction, including both the base fee and priority fee (tip).
            maxPriorityFeePerGas:
              type: integer
              format: int64
              description: The maximum tip (in wei) the sender is willing to give to the miner/validator to include the transaction in a block.

    chainSpecificFieldsSolana:
      type: object
      title: "For SOLANA"
      description: Transaction settings for Solana.
      properties:
        accounts:
          type: array
          description: "Account configurations specific to the chain."
          items:
            oneOf:
              - $ref: "#/components/schemas/CustomAccount"
              - $ref: "#/components/schemas/PdaAccount"
    CustomAccount:
      type: object
      description: "Details for a CUSTOM account type."
      required:
        - type
        - isWritable
        - publicKey
      properties:
        type:
          type: string
          enum:
            - CUSTOM
          example: "CUSTOM"
        isWritable:
          type: boolean
          example: true
        publicKey:
          type: string
          description: "The public key for the CUSTOM account."
          example: "string"
    PdaAccount:
      type: object
      description: "Details for a PDA account type."
      required:
        - type
        - isWritable
        - seeds
      properties:
        type:
          type: string
          enum:
            - PDA
          example: "PDA"
        isWritable:
          type: boolean
          example: true
        seeds:
          type: array
          description: "Seed values for generating the PDA account."
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - account
                  - string
                example: "account"
              value:
                type: string 
    SecuritySpecificationResult:
      type: object
      properties:
        encryptionKeys:
          type: array
          items:
            $ref: '#/components/schemas/PublicKeyDto'   
    PublicKeyDto:
      type: object
      properties:
        id:
          type: string
        keyspec:
          type: string
          enum:
            - RSA_2048
        publicKey:
          type: string
        encryptionAlgorithm:
          type: string     
    ContractEncodeRequest:
      type: object
      properties:
        secretType:
          type: string
          description: "The blockchain of the contract"
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - XPLA
            - BASE
            - SOLANA
            - OPTIMISM
            - SUI
        functionName:
          type: string
          description: "The contract function name for which you want to encode the input parameters"
        inputs:
          type: array
          description: "Array of inputs needed to call the function"
          items:
            $ref: '#/components/schemas/ContractEncodeRequestInputParam'
        outputs:
          type: array
          description: "Array of expected outputs"
          items:
            $ref: '#/components/schemas/ContractEncodeRequestOutputParam'
    ContractEncodeRequestInputParam:
      type: object
      properties:
        type:
          type: string
          description: "Type of the input parameter (ex. uint256)"
        value:
          type: string
          description: "Value of the input parameter. This needs to be passed as a string value"
    ContractEncodeRequestOutputParam:
      type: object
      properties:
        type:
          type: string
          description: "The type of output"
    ContractEncodeResponse:
      type: object
      properties:
        data:
          type: string
          description: "The encoded data of the contract function call"
    ContractDecodeRequest:
      type: object
      properties:
        secretType:
          type: string
          description: "The blockchain of the contract"
          enum:
            - AETERNITY
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - HEDERA
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - IMX
            - ARBITRUM
            - XPLA
            - BASE
            - SOLANA
            - OPTIMISM
            - SUI
        data:
          type: string
          description: "The encoded data of the contract function call"
        outputs:
          type: array
          description: "Array of expected outputs"
          items:
            $ref: '#/components/schemas/ContractDecodeRequestOutputParam'
    ContractDecodeRequestOutputParam:
      type: object
      properties:
        type:
          type: string
          description: "The type of output"
    ContractDecodeResponse:
      type: object
      properties:
        type:
          type: string
          description: "The type of the response value from the contract read"
        value:
          type: string
          description: "The response value from the contract read"
    SuiContractCreationTransactionRequest:
      required:
      - contract
      - type
      - walletId
      type: object
      allOf:
      - $ref: '#/components/schemas/TransactionRequestBase'
      - type: object
        properties:
          to:
            type: string
          value:
            type: integer
          gasPrice:
            type: integer
          gasBudget:
            type: integer
          contract:
            $ref: '#/components/schemas/SuiContractRequest'
    SuiContractRequest:
      type: object
      properties:
        template:
          type: string
          enum:
          - VENLY_NFT
        moduleName:
          type: string
        projectUrl:
          type: string
    SuiGasPrice:
      type: object
      properties:
        gasPrice:
          type: integer
        defaultPrice:
          type: boolean
    SuiKeystoreImportRequest:
      required:
      - keystore
      - password
      type: object
      allOf:
      - $ref: '#/components/schemas/WalletImportRequestBase'
      - type: object
        properties:
          keystore:
            type: string
          password:
            type: string
    SuiNftTransferRequest:
      title: "Sui NFT Transfer Request"
      required:
      - objectId
      - type
      - walletId
      type: object
      allOf:
      - $ref: '#/components/schemas/TransactionRequestBase'
      - type: object
        properties:
          to:
            type: string
            description: "The public wallet address to which the transfer is made"
          value:
            type: integer
            description: "The amount of NFTs to transfer"
          gasPrice:
            type: integer
            description: "The gas price"
          gasBudget:
            type: integer
            description: "The gas budget for the transaction"
          objectId:
            pattern: 0x[a-fA-F0-9]{64}
            type: string
      example:
        transactionRequest:
          walletId: "5400ca2f-c3f9-4f23-8523-36dd576d255c"
          type: "NFT_TRANSFER"
          secretType: "SUI"
          to: "0xf94cb679daa8092ad1bdac1db572c687b9d620ad79a140de810f20b333695905"
          tokenAddress: "0xe0cbc78e55de2c64a1bcee84f6fb5006cc886fd883c91e9a9d60439561b9ecb5"
    SuiPackageExecutionCommand:
      type: object
      properties:
        type:
          type: string
          enum:
          - moveCall
          - transfer
          - makeMoveVec
      discriminator:
        propertyName: type
    SuiPackageExecutionInput:
      type: object
      properties:
        type:
          type: string
          enum:
          - object
          - u8
          - u16
          - u32
          - u64
          - u128
          - u256
          - bool
          - address
          - string
        value:
          type: object
    SuiPackageExecutionRequest:
      title: "Sui Package Execution Request"
      required:
      - type
      - walletId
      type: object
      allOf:
      - $ref: '#/components/schemas/TransactionRequestBase'
      - type: object
        properties:
          to:
            type: string
          value:
            type: integer
          gasPrice:
            type: integer
          gasBudget:
            type: integer
          targetPackage:
            type: string
          functionName:
            type: string
          typeArguments:
            type: array
            items:
              type: string
          inputs:
            type: array
            items:
              $ref: '#/components/schemas/SuiPackageExecutionInput'
          commands:
            type: array
            items:
              $ref: '#/components/schemas/SuiPackageExecutionCommand'
    SuiPrivateKeyImportRequest:
      type: object
      allOf:
      - $ref: '#/components/schemas/WalletImportRequestBase'
      - type: object
        properties:
          privateKey:
            type: string

    SuiTokenTransferRequest:
      required:
      - coinType
      - type
      - walletId
      type: object
      allOf:
      - $ref: '#/components/schemas/TransactionRequestBase'
      - type: object
        properties:
          to:
            type: string
            description: "The public wallet address to which the transfer is made"
          value:
            type: integer
            description: "The amount of tokens to transfer"
          gasPrice:
            type: integer
            description: "The gas price"
          gasBudget:
            type: integer
            description: "The gas budget for the transaction"
          coinType:
            pattern: ^0x[a-fA-F0-9]{64}::\w*::\w*$
            type: string

    SuiTransferTransactionRequest:
      required:
      - type
      - walletId
      type: object
      allOf:
      - $ref: '#/components/schemas/TransactionRequestBase'
      - type: object
        properties:
          to:
            type: string
            description: "The public wallet address to which the transfer is made"
          value:
            type: integer
            description: "The amount of tokens to transfer"
          gasPrice:
            type: integer
            description: "The gas price"
          gasBudget:
            type: integer
            description: "The gas budget for the transaction"
          data:
            type: string
            description: "The raw data of the transaction, such as a contract call or other custom data"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Indicates whether the request was successful
          example: false
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorBody'
          description: List of errors that occurred
        result:
          type: object
          description: >
            Present only if success == true. Contains the actual result.
            Set to null or omitted when success == false.

    # Missing Signature Request Schemas
    AeternityRawSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        hash:
          type: boolean
        type:
          type: string
          enum: [AETERNITY_RAW]

    AeternityTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [AETERNITY_TRANSACTION]

    BitcoinTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [BITCOIN_TRANSACTION]

    BscRawSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        hash:
          type: boolean
        type:
          type: string
          enum: [BSC_RAW]

    BscTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [BSC_TRANSACTION]

    BscEip712SignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          $ref: '#/components/schemas/JsonNode'
        type:
          type: string
          enum: [BSC_EIP712]

    AvacRawSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        hash:
          type: boolean
        type:
          type: string
          enum: [AVAC_RAW]

    AvacTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [AVAC_TRANSACTION]

    AvacEip712SignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          $ref: '#/components/schemas/JsonNode'
        type:
          type: string
          enum: [AVAC_EIP712]

    EthereumRawSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        hash:
          type: boolean
        type:
          type: string
          enum: [ETHEREUM_RAW]

    EthereumEip712SignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          $ref: '#/components/schemas/JsonNode'
        type:
          type: string
          enum: [ETHEREUM_EIP712]

    EthereumTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [ETHEREUM_TRANSACTION]

    GochainRawSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        hash:
          type: boolean
        type:
          type: string
          enum: [GOCHAIN_RAW]

    GochainTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [GOCHAIN_TRANSACTION]

    HbarTransferSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [HEDERA_HBAR_TRANSFER]

    TokenTransferSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [HEDERA_TOKEN_TRANSFER]

    HederaTokenCreationSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [HEDERA_TOKEN_CREATION]

    HederaTokenMintSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [HEDERA_TOKEN_MINT]

    HederaRawSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        hash:
          type: boolean
        type:
          type: string
          enum: [HEDERA_RAW]

    NftTransferSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [HEDERA_NFT_TRANSFER]

    TokenAssociationSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [HEDERA_TOKEN_ASSOCIATION]

    HederaRawTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [HEDERA_TRANSACTION]

    LitecoinTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [LITECOIN_TRANSACTION]

    MaticRawSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        hash:
          type: boolean
        type:
          type: string
          enum: [MATIC_RAW]

    MaticTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [MATIC_TRANSACTION]

    MaticEip712SignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          $ref: '#/components/schemas/JsonNode'
        type:
          type: string
          enum: [MATIC_EIP712]

    NeoContractExecutionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [NEO_CONTRACT_EXECUTION]

    NeoGasTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [NEO_GAS_TRANSACTION]

    NeoMessageSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        type:
          type: string
          enum: [NEO_MESSAGE]

    NeoNativeTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [NEO_NATIVE_TRANSACTION]

    VechainTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [VECHAIN_TRANSACTION]

    VechainRawSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        hash:
          type: boolean
        type:
          type: string
          enum: [VECHAIN_RAW]

    ImxRawSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        hash:
          type: boolean
        type:
          type: string
          enum: [IMX_RAW]

    ImxEip712SignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          $ref: '#/components/schemas/JsonNode'
        type:
          type: string
          enum: [IMX_EIP712]

    ImxTransferTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [IMX_TRANSFER]

    ImxErc20TransferTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [IMX_ERC20_TRANSFER]

    ImxErc721TransferTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [IMX_ERC721_TRANSFER]

    ArbitrumRawSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        hash:
          type: boolean
        type:
          type: string
          enum: [ARBITRUM_RAW]

    ArbitrumTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [ARBITRUM_TRANSACTION]

    ArbitrumEip712SignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          $ref: '#/components/schemas/JsonNode'
        type:
          type: string
          enum: [ARBITRUM_EIP712]

    OptimismRawSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        hash:
          type: boolean
        type:
          type: string
          enum: [OPTIMISM_RAW]

    OptimismTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [OPTIMISM_TRANSACTION]

    OptimismEip712SignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          $ref: '#/components/schemas/JsonNode'
        type:
          type: string
          enum: [OPTIMISM_EIP712]

    BaseRawSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        hash:
          type: boolean
        type:
          type: string
          enum: [BASE_RAW]

    BaseTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [BASE_TRANSACTION]

    BaseEip712SignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          $ref: '#/components/schemas/JsonNode'
        type:
          type: string
          enum: [BASE_EIP712]

    XplaRawSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        hash:
          type: boolean
        type:
          type: string
          enum: [XPLA_RAW]

    XplaTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [XPLA_TRANSACTION]

    SolanaTransactionSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        type:
          type: string
          enum: [SOLANA_TRANSACTION]

    SolanaRawSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        hash:
          type: boolean
        type:
          type: string
          enum: [SOLANA_RAW]

    SuiRawSignatureRequest:
      type: object
      properties:
        id:
          type: string
        walletId:
          type: string
        status:
          type: string
        data:
          type: string
        hash:
          type: boolean
        type:
          type: string
          enum: [SUI_RAW]

    ErrorBody:
      type: object
      properties:
        code:
          type: string
          description: Machine-readable error code (e.g., VALIDATION_ERROR, UNAUTHORIZED)
          example: "VALIDATION_ERROR"
        message:
          type: string
          description: Human-readable explanation of the error
          example: "The wallet ID must be a valid UUID."
        traceCode:
          type: string
          description: Unique identifier for tracing the error in logs

    ConfirmSignableCommand:
      type: object
      properties:
        secretType:
          type: string
          enum:
            - AETERNITY
            - ARBITRUM
            - AVAC
            - BITCOIN
            - BSC
            - ETHEREUM
            - GOCHAIN
            - LITECOIN
            - VECHAIN
            - MATIC
            - NEO
            - HEDERA
            - IMX
            - BASE
            - XPLA
            - OPTIMISM
            - SOLANA
            - SUI

  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://login-staging.venly.io/auth/realms/Arkane/protocol/openid-connect/token
          scopes:
            openid: openid
    Signing-Method:
      type: apiKey
      description: A valid signing method for the user. The format should be id:value
      name: Signing-Method
      in: header
    Encrypted-Signing-Method:
      type: apiKey
      description: "Use this for encrypted PIN transfers. The `Encrypted-Signing-Method` indicates that the signing method and the request body are encrypted. Click [here](https://docs.venly.io/docs/encrypted-pin-transfer) to read about encrypted PIN transfers."
      name: Encrypted-Signing-Method
      in: header

  responses:
    BadRequest:
      description: Request validation failed (400)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            invalidInput:
              value:
                success: false
                errors:
                  - code: VALIDATION_ERROR
                    message: "The 'walletId' is not a valid UUID."
                    field: walletId

    Unauthorized:
      description: Authentication required or failed (401)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            auth:
              value:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: "Missing or invalid OAuth2 token."

    Forbidden:
      description: User lacks required permissions (403)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            forbidden:
              value:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: "User does not have permission to access this wallet."

    NotFound:
      description: Resource not found (404)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            notFound:
              value:
                success: false
                errors:
                  - code: NOT_FOUND
                    message: "Wallet with ID 'abc123' was not found."

    MethodNotAllowed:
      description: HTTP method not supported (405)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            method:
              value:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: "HttpMethod is not supported. Supported methods are [GET, POST]."

    UnsupportedMediaType:
      description: Request body is not valid JSON or wrong media type (415)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            media:
              value:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
                    message: "Request must be application/json."

    InternalServerError:
      description: Unexpected server error (500)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            server:
              value:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: "An unexpected error occurred. Please try again later."
