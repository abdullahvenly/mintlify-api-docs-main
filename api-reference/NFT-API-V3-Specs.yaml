openapi: 3.1.0
info:
  title: NFT API
  description: NFT API v3 Documentation.
  contact:
    name: Venly
    url: https://venly.io
    email: contact@venly.io
  version: 0.40.0
servers:
  - url: https://token-api-sandbox.venly.io/
    description: Sandbox Environment
  - url: https://token-api.venly.io/
    description: Production Environment
paths:
  /actuator/health:
    get:
      tags:
        - NFT-API Health
      summary: Check Health
      description: This endpoint is used to check the current health of the **NFT-API**. It returns the API health status as either **UP** or **DOWN**.
      operationId: healthCheckNftv3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    description: "Indicates the status of the API service as either `UP` or `DOWN`."
                    example: "UP"
      security:
        - OAuth2: []
  /api/v3/erc1155/chains:
    get:
      tags:
        - Get Supported Chains
      summary: Get Supported Chains
      description: This endpoint is used to retrieve the supported chains for the NFT API.
      operationId: getSupportedChainsErc1155
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: array
                    items:
                      type: string
                    examples:
                      - ETHEREUM
                      - MATIC
                      - AVAC
                      - BSC
                      - HEDERA
                      - ARBITRUM
      security:
        - OAuth2: []
  /api/v3/wallets:
    get:
      tags:
        - Company Wallets
      summary: 'Get All Company Wallets'
      description: "This endpoint retrieves all company minter wallets."
      operationId: getCompanyWallets
      parameters:
        - name: pageableDto
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/PageableDto'
        - name: includeBalance
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWalletBalanceDto'
      security:
        - OAuth2:
            - manage:minter-wallet
  /api/v3/wallets/{chain}:
    get:
      tags:
        - Company Wallets
      summary: 'Get Company Wallets by Chain'
      description: "This endpoint retrieves company minter wallets by blockchain."
      operationId: getCompanyWalletByChain_1
      parameters:
        - name: chain
          in: path
          required: true
          description: "The blockchain to filter the result by"
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - ARBITRUM
        - name: pageableDto
          in: query
          required: true
          description: "Pagination filter for the response"
          schema:
            $ref: '#/components/schemas/PageableDto'
        - name: includeBalance
          in: query
          required: false
          description: "This flag indicates to include the balance of company minter wallets in the response or not. Note that setting it to `true` will impact the endpoint's response time if you have too many company minter wallets."
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWalletBalanceDto'
      security:
        - OAuth2:
            - manage:minter-wallet
  /api/v3/wallets/{chain}/{address}:
    delete:
      tags:
        - Company Wallets
      operationId: deleteMinterWallet
      summary: "Delete Company Wallet"
      description: "This endpoint deletes a company wallet by blockchain and wallet address."
      parameters:
        - name: chain
          description: "The blockchain of the company wallet."
          in: path
          required: true
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - ARBITRUM
        - name: address
          description: "This is the wallet `address` of the company wallet."
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Company Minter Wallet deleted successfully.
      security:
        - OAuth2:
            - manage:minter-wallet
  /api/v3/erc1155/contracts:
    get:
      tags:
        - Contract
      summary: 'Get all contracts'
      description: "This endpoint fetches all of your contracts."
      operationId: getContracts
      parameters:
        - name: companyId
          in: query
          description: "Query contracts linked to your company by specifying the company ID"
          required: false
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenContractViewV3'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:contracts
  /api/v3/erc1155/contracts/{chain}/{contractAddress}/metadata:
    get:
      tags:
        - Contract Metadata
      summary: 'Get Contract Metadata'
      description: "This endpoint is used to fetch the metadata of as contract."
      operationId: getContractMetadata
      parameters:
        - name: chain
          in: path
          description: "The blockchain of the contract."
          required: true
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          required: true
          description: "The contract address whose metadata you want to fetch."
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenContractMetadataView'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:contracts
    patch:
      tags:
        - Contract Metadata
      summary: 'Update Contract Metadata'
      description: "This endpoint is used to update the metadata of a contract."
      operationId: patchContractMetadata
      parameters:
        - name: chain
          in: path
          required: true
          description: "The blockchain of the contract."
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          required: true
          description: "The contract address whose metadata you want to update."
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContractMetadataCommand'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TokenContractMetadataView'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:contracts
  /api/v3/erc1155/contracts/{chain}/{contractAddress}/token-types:
    get:
      tags:
        - Token-Types
      summary: 'Get All Token-types'
      operationId: getAllTokenTypes
      parameters:
        - name: chain
          in: path
          required: true
          description: "The blockchain of the contract."
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          required: true
          description: "The contract address."
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenTypeListItemView'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - view:token-types
  /api/v3/erc1155/contracts/{chain}/{contractAddress}/token-types/{tokenTypeId}/metadata:
    get:
      tags:
        - Token-Type Metadata
      summary: 'Get Token-type Metadata'
      description: "This endpoint is used to fetch the metadata of a token-type"
      operationId: getTokenMetadata_1
      parameters:
        - name: chain
          in: path
          required: true
          description: "The blockchain of the contract."
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          required: true
          description: "The contract address."
          schema:
            type: string
        - name: tokenTypeId
          in: path
          required: true
          description: "The `id` of the token-type whose metadata you want to fetch."
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/MetadataDto'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - view:token-types
    put:
      tags:
        - Token-Type Metadata
      summary: 'Update Token-type Metadata'
      description: "This endpoint is used to update the metadata of a token-type."
      operationId: updateMetadataForTokenType
      parameters:
        - name: chain
          in: path
          required: true
          description: "The blockchain of the contract."
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          required: true
          description: "The contract address."
          schema:
            type: string
        - name: tokenTypeId
          in: path
          required: true
          description: "The `id` of the token-type whose metadata you want to update."
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMetadataCommand'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/MetadataDto'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:token-types
  /api/v3/erc1155/contracts/{chain}/{contractAddress}/tokens:
    get:
      tags:
        - Mint Tokens
      summary: 'Get All Tokens'
      description: "This endpoint is used to get all tokens in a contract."
      operationId: getTokens
      parameters:
        - name: chain
          in: path
          required: true
          description: "The blockchain of the contract."
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          description: "The contract address whose tokens you want to fetch."
          required: true
          schema:
            type: string
        - name: tokenTypeId
          in: query
          description: "Filter your tokens based on `tokenTypeId`."
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/TokenListItemViewV3'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - view:tokens
  /api/v3/erc1155/contracts/{chain}/{contractAddress}/tokens/{tokenId}/metadata:
    get:
      tags:
        - Token Metadata
      summary: 'Get Token Metadata'
      description: "This endpoint fetches the metadata of a token by `tokenId`."
      operationId: getTokenMetadata
      parameters:
        - name: chain
          in: path
          description: "The blockchain of the contract."
          required: true
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          required: true
          description: "The contract address."
          schema:
            type: string
        - name: tokenId
          in: path
          description: "The `id` of the token whose metadata you want to fetch."
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/MetadataDto'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - view:tokens
  /api/v3/erc1155/contracts/{chain}/{contractAddress}/tokens/{tokenId}/metadata/{propertyName}:
    put:
      tags:
        - Token Metadata
      summary: 'Update Property'
      description: "This endpoint is used to update a property for a specific NFT. You can also add a property using this endpoint."
      operationId: updatePropertyForToken
      parameters:
        - name: chain
          in: path
          description: "The blockchain of the NFT collection"
          required: true
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          description: "The NFT contract address"
          required: true
          schema:
            type: string
        - name: tokenId
          in: path
          description: "The `ID` of the token you want to update"
          required: true
          schema:
            type: integer
        - name: propertyName
          in: path
          required: true
          description: "The name of the property you want to update (**NOTE**: This param is case sensitive.)"
          schema:
            type: string
            enum:
              - name
              - description
              - externalUrl
              - image
              - backgroundColor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTokenPropertyCommand'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/MetadataDto'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:tokens
    delete:
      tags:
        - Token Metadata
      summary: 'Delete Property'
      description: "This endpoint is used to delete a property for a specific NFT."
      operationId: deletePropertyForToken
      parameters:
        - name: chain
          in: path
          description: "The blockchain of the NFT collection"
          required: true
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          description: "The NFT contract address"
          required: true
          schema:
            type: string
        - name: tokenId
          in: path
          description: "The `ID` of the token you want to update"
          required: true
          schema:
            type: integer
        - name: propertyName
          in: path
          description: "The name of the property you want to update (**NOTE**: This param is case sensitive.)"
          required: true
          schema:
            type: string
            enum:
              - description
              - externalUrl
              - image
              - backgroundColor
      responses:
        '200':
          description: Token property deleted successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/MetadataDto'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:tokens
  /api/v3/erc1155/contracts/{chain}/{contractAddress}/tokens/{tokenId}/metadata/attributes:
    post:
      tags:
        - Token Metadata
      summary: 'Add Attribute'
      description: "This endpoint is used to add attributes to a specific NFT."
      operationId: addAttributeForToken
      parameters:
        - name: chain
          in: path
          description: "The blockchain of the NFT collection"
          required: true
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          description: "The NFT contract address"
          required: true
          schema:
            type: string
        - name: tokenId
          in: path
          description: "The `ID` of the token"
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributeCommand'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/MetadataDto'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:tokens
  /api/v3/erc1155/contracts/{chain}/{contractAddress}/tokens/{tokenId}/metadata/attributes/{attributeName}:
    put:
      tags:
        - Token Metadata
      summary: 'Update Attribute'
      description: "This endpoint is used to update an attribute's data for a specific NFT."
      operationId: updateAttributeForToken
      parameters:
        - name: chain
          in: path
          description: "The blockchain of the NFT collection"
          required: true
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          description: "The NFT contract address"
          required: true
          schema:
            type: string
        - name: tokenId
          in: path
          description: "The `ID` of the token you want to update"
          required: true
          schema:
            type: integer
        - name: attributeName
          in: path
          description: "The name of the attribute you want to update (**NOTE**: This param is case sensitive.)"
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTokenAttributeCommand'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/MetadataDto'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:tokens
    delete:
      tags:
        - Token Metadata
      summary: 'Delete Attribute'
      description: "This endpoint is used to delete an attribute for a specific NFT."
      operationId: deleteAttributeForToken
      parameters:
        - name: chain
          in: path
          description: "The blockchain of the NFT collection"
          required: true
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          description: "The NFT contract address"
          required: true
          schema:
            type: string
        - name: tokenId
          in: path
          description: "The `ID` of the token for which you want to delete the attribute"
          required: true
          schema:
            type: integer
        - name: attributeName
          in: path
          description: "The name of the attribute you want to delete. (**NOTE**: This param is case sensitive.)"
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Token attribute deleted successfully.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/MetadataDto'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:tokens
  /api/v3/erc1155/contracts/{chain}/{contractAddress}/tokens/{tokenId}/metadata/animationUrls:
    put:
      tags:
        - Token Metadata
      summary: 'Update Animation URLs'
      description: "This endpoint is used to update the `animationUrls` for a specific NFT."
      operationId: updateAnimationUrlsMetadataForToken
      parameters:
        - name: chain
          in: path
          description: "The blockchain of the NFT collection"
          required: true
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          description: "The NFT contract address"
          required: true
          schema:
            type: string
        - name: tokenId
          in: path
          description: "The `ID` of the token you want to update"
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AnimationUrlsDtoV3'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/MetadataDto'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:tokens
    delete:
      tags:
        - Token Metadata
      summary: 'Delete Animation URLs'
      description: "This endpoint is used to delete `animationUrls` for a specific NFT."
      operationId: deleteAnimationUrlsMetadataForToken
      parameters:
        - name: chain
          in: path
          description: "The blockchain of the NFT collection"
          required: true
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          description: "The NFT contract address"
          required: true
          schema:
            type: string
        - name: tokenId
          in: path
          description: "The `ID` of the token"
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: "Token `animationUrls` array deleted successfully."
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/MetadataDto'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:tokens
  /api/v3/erc1155/tokens/mints:
    get:
      tags:
        - Mint Tokens
      summary: 'Get All Token Mints'
      description: "This endpoint is used to retrieve all of your token mint requests."
      operationId: getAll
      parameters:
        - name: companyId
          in: query
          description: "Query token mints linked to your company by specifying the company ID"
          required: false
          schema:
            type: string
            format: uuid
        - name: destinationAddress
          in: query
          description: "Filter results by destination wallet address"
          required: false
          schema:
            type: string
        - name: mintIds
          in: query
          description: "Filter the results based on `mintId`. Multiple mintIds can be added."
          required: false
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
        - name: status
          in: query
          description: "Filter the results by the token mint status."
          required: false
          schema:
            type: string
            enum:
              - PENDING
              - SUCCEEDED
              - FAILED
        - name: contractAddress
          in: query
          description: "Filter the results by the contract address."
          required: false
          schema:
            type: string
        - name: createdOnFrom
          in: query
          description: "Indicating the start time of the interval in which the token mint request was created"
          required: false
          schema:
            type: string
            format: date-time
        - name: createdOnTo
          in: query
          description: "Indicating the end time of the interval in which the token mint request was created"
          required: false
          schema:
            type: string
            format: date-time
        - name: sortOn
          in: query
          description: "The name of the parameter that you want to sort on"
          required: false
          schema:
            type: string
            enum:
              - createdOn
        - name: sortOrder
          in: query
          description: "Indication to sort in ascending or descending order"
          required: false
          schema:
            type: string
            enum:
              - ASC
              - DESC
        - name: page
          in: query
          description: "The current page number"
          required: false
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          description: "Number of items per page"
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  pagination:
                    type: object
                    $ref: '#/components/schemas/PaginationTokenMintResponse'
                  sort:
                    type: object
                    properties:
                      orders:
                        type: array
                        items:
                          $ref: '#/components/schemas/SortOrderDto'
                  result:
                    type: array
                    description: "List of token mints records."
                    items:
                      $ref: '#/components/schemas/PageTokenMintResponse'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - view:tokens
    post:
      tags:
        - Mint Tokens
      summary: 'Mint Tokens'
      description: "This endpoint is used to mint fungible or non-fungible tokens."
      operationId: mintTokens
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MintTokensCommandV3'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TokenMintDetailedResponse'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:tokens
  /api/v3/erc1155/token-types/creations:
    post:
      tags:
        - Token-Types
      summary: 'Create Token-type'
      description: "This endpoint is used to create a token-type."
      operationId: createTokenType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenTypeCommandV3'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TokenTypeCreationViewV3'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:token-types
            - manage:tokens
  /api/v3/media:
    post:
      tags:
        - Media
      summary: 'Upload Media File'
      description: "This endpoint is used to upload a media file to our servers."
      operationId: addMedia
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - file
              type: object
              properties:
                file:
                  description: "Upload the media file"
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/UploadNftMediaResponse'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - upload:media
  /api/v3/images:
    post:
      tags:
        - Media
      summary: 'Upload Image'
      description: "This endpoint is used to upload an NFT image to our servers. Make sure to only upload images to with this endpoint."
      operationId: addNftImage
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - file
              type: object
              properties:
                file:
                  description: "Upload the NFT image"
                  type: string
                  format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    type: object
                    $ref: '#/components/schemas/UploadNftImageResponse'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - upload:media
  /api/v3/erc1155/contracts/deployments:
    post:
      tags:
        - Contract
      summary: 'Create Contract'
      description: "This endpoint is used to create a contract."
      operationId: deployContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeployContractCommandV3'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/DeployedContractViewV3'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:contracts
  /api/v3/erc1155/contracts/deployments/{deploymentId}:
    get:
      tags:
        - Contract
      summary: 'Check Contract Status'
      description: "This endpoint is used to check the status of the contract creation request."
      operationId: getContract_1
      parameters:
        - name: deploymentId
          in: path
          required: true
          description: "To track the status of contract creation. It is in the response body of the create contract endpoint as `result.id`."
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/DeployedContractViewV3'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:contracts
  /api/v3/erc1155/contracts/{chain}/{contractAddress}/owner:
    put:
      tags:
        - Contract
      summary: 'Update Contract Owner'
      operationId: updateOwner
      description: "This endpoint is used to update the `owner` of an NFT contract. The updated owner will have admin rights on the contract."
      parameters:
        - name: chain
          in: path
          required: true
          description: "The blockchain of the contract."
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          description: "The contract address."
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContractOwnerCommand'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TransactionHashResult'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:contracts
  /api/v3/erc1155/contracts/{chain}/{contractAddress}/royalties:
    put:
      tags:
        - Contract
      summary: 'Update Royalty for NFT Contract'
      description: "This endpoint is used to add/update the royalties for an NFT contract. You can add a royalty recipient wallet address and specifiy the royalty percentage. (_only for contracts created with the NFT v3_)"
      operationId: updateRoyalties
      parameters:
        - name: chain
          in: path
          required: true
          description: "The blockchain of the contract."
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          required: true
          description: "The contract address whose royalty information you want to update."
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                royalties:
                  type: object
                  description: "Define the royalty percentage and royalty receiver's wallet address:"
                  $ref: '#/components/schemas/RoyaltiesReceiverDto'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TransactionHashResult'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:contracts
  /api/v3/erc1155/tokens/mints/{mintId}:
    get:
      tags:
        - Mint Tokens
      summary: 'Check Token Mint Status'
      description: "This endpoint is used to check the status of a token mint request."
      operationId: getTokenMint
      parameters:
        - name: mintId
          in: path
          description: "To track the status of token mint. It is in the response body of the mint tokens endpoint as `creations.mints.id`."
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TokenMintView'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - view:tokens
  /api/v3/erc1155/token-types/creations/{creationId}:
    get:
      tags:
        - Token-Types
      summary: 'Check Token-type Status'
      description: "This endpoint is used to check the status of token-type creation request."
      operationId: getTokenType
      parameters:
        - name: creationId
          in: path
          description: "To track the status of token-type creation. It is in the response body of the create token-type endpoint as `result.id`."
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenTypeCreationDetailView'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - view:token-types
  /api/v3/erc1155/contracts/{chain}/{contractAddress}:
    get:
      tags:
        - Contract
      summary: 'Get Contract by Chain and Contract Address'
      description: "This endpoint is used to get a specific contract by blockchain and contract address."
      operationId: getContract
      parameters:
        - name: chain
          in: path
          description: "The blockchain of the contract"
          required: true
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          required: true
          description: "The contract address whose details you want to fetch."
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenContractDetailView'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:contracts
    delete:
      tags:
        - Contract
      summary: 'Archive Contract'
      description: "This endpoint allows you to archive a contract. When you archive an NFT contract, it will be removed from all API responses, rendering it inaccessible via any API calls. Furthermore, you will lose the ability to create new token-types under the deleted contract. All token-types and minted NFTs associated with the archived contract will also be archived and cannot be accessed via API calls. However, the NFT contract will remain on the blockchain."
      operationId: archiveTokenContract
      parameters:
        - name: chain
          in: path
          description: "The blockchain of the contract."
          required: true
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          description: "The contract address that you want to delete."
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Contract deleted successfully.
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:contracts
  /api/v3/erc1155/contracts/{chain}/{contractAddress}/tokens/{tokenId}:
    get:
      tags:
        - Mint Tokens
      summary: 'Get Specific Token Details'
      description: "This endpoint fetches the details of a specific token by tokenId."
      operationId: getToken
      parameters:
        - name: contractAddress
          in: path
          description: "The contract address."
          required: true
          schema:
            type: string
        - name: tokenId
          in: path
          description: "The `id` of the token whose details you want to fetch."
          required: true
          schema:
            type: integer
        - name: chain
          in: path
          required: true
          description: "The blockchain of the contract."
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TokenViewV3'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - view:tokens
    delete:
      tags:
        - Mint Tokens
      summary: 'Archive a Token'
      description: "This endpoint is used to archive a token by `tokenId`. The archived token will continue to exist on-chain but it will not be returned in API calls anymore."
      operationId: archiveToken
      parameters:
        - name: chain
          in: path
          description: "The blockchain of the contract/token."
          required: true
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          description: "The token's contract address."
          required: true
          schema:
            type: string
        - name: tokenId
          in: path
          description: "The `Id` of the token you want to archive."
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Token archived successfully.
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:tokens
  /api/v3/erc1155/contracts/{chain}/{contractAddress}/token-types/{tokenTypeId}:
    get:
      tags:
        - Token-Types
      summary: 'Get Specific Token-type Details'
      description: "This endpoint fetches the details of a specific token-type by `tokenTypeId`."
      operationId: getTokenType_1
      parameters:
        - name: chain
          in: path
          required: true
          description: "The blockchain of the contract."
          schema:
            type: string
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          required: true
          description: "The contract address"
          schema:
            type: string
        - name: tokenTypeId
          in: path
          description: "This is the `id` of the token-type."
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: true
                  result:
                    $ref: '#/components/schemas/TokenTypeDetailsViewV3'
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - view:token-types
    delete:
      tags:
        - Token-Types
      summary: 'Archive Token-type'
      description: "This endpoint archives a token type, removing it from all API responses and making it inaccessible through API calls. Once archived, you will no longer be able to mint new NFTs under this token type. Additionally, all NFTs associated with the archived token type will also be archived and cannot be accessed via API calls."
      operationId: archiveTokenType
      parameters:
        - name: chain
          in: path
          required: true
          schema:
            type: string
            description: "The blockchain of the contract."
            enum:
              - AVAC
              - BSC
              - ETHEREUM
              - MATIC
              - HEDERA
              - ARBITRUM
        - name: contractAddress
          in: path
          required: true
          description: "The contract address."
          schema:
            type: string
        - name: tokenTypeId
          in: path
          required: true
          description: "The `id` of the token-type that you want to archive."
          schema:
            type: integer
      responses:
        '200':
          description: Token-type deleted successfully.
        '400':
          description: When the request contains invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: validation-error
                    message: A descriptive error message
        '401':
          description: When the user is not authorized to access the resource
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: UNAUTHORIZED
                    message: Access is denied.
        '403':
          description: When a user doesn't have proper security authority
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: FORBIDDEN
                    message: User doesn't have proper authority to access this resource
        '404':
          description: When a resource is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: NOT_FOUND
        '405':
          description: When the HttpMethod is not supported
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: METHOD_NOT_SUPPORTED
                    message: HttpMethod is not supported. Supported methods are [..]
        '415':
          description: Usually when the input is not a valid json
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INVALID_MEDIA_TYPE
        '500':
          description: When there's an unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ErrorBody'
                  result:
                    type: object
              example:
                success: false
                errors:
                  - code: INTERNAL_SERVER_ERROR
                    message: A description of the error (optional)
      security:
        - OAuth2:
            - manage:token-types
components:
  schemas:
    UpdateTokenPropertyCommand:
      required:
        - value
      type: object
      properties:
        value:
          type: string
          description: "The new value of the property you wish to update."
    EvmMetadataDto:
      title: "EVM Chain Metadata"
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        symbol:
          type: string
        image:
          type: string
        imagePreview:
          type: string
        imageThumbnail:
          type: string
        backgroundColor:
          type: string
        background_color:
          type: string
        animationUrl:
          type: string
        animation_url:
          type: string
        externalUrl:
          type: string
        external_url:
          type: string
        youtubeUrl:
          type: string
        youtube_url:
          type: string
        animationUrls:
          type: array
          items:
            $ref: '#/components/schemas/TypeValueDto'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/MetadataAttribute'
        contract:
          $ref: '#/components/schemas/MetadataContractDto'
        fungible:
          type: boolean

    HederaMetadataDto:
      title: "HEDERA Metadata"
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        symbol:
          type: string
        image:
          type: string
        imagePreview:
          type: string
        imageThumbnail:
          type: string
        backgroundColor:
          type: string
        background_color:
          type: string
        animationUrl:
          type: string
        animation_url:
          type: string
        externalUrl:
          type: string
        external_url:
          type: string
        youtubeUrl:
          type: string
        youtube_url:
          type: string
        animationUrls:
          type: array
          items:
            $ref: '#/components/schemas/TypeValueDto'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/MetadataAttribute'
        contract:
          $ref: '#/components/schemas/MetadataContractDto'
        fungible:
          type: boolean 
    MetadataAttribute:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        value:
          type: string
        maxValue:
          type: string
        displayType:
          type: string
        display_type:
          type: string
        traitType:
          type: string
        trait_type:
          type: string
    MetadataContractDto:
      type: object
      properties:
        address:
          type: string
        name:
          type: string
        symbol:
          type: string
        image:
          type: string
        imageUrl:
          type: string
        image_url:
          type: string
        description:
          type: string
        externalLink:
          type: string
        external_link:
          type: string
        externalUrl:
          type: string
        external_url:
          type: string
        media:
          type: array
          items:
            $ref: '#/components/schemas/TypeValueDto'
        type:
          type: string
    MetadataDto:
      type: object
      oneOf:
        - $ref: '#/components/schemas/EvmMetadataDto'
        - $ref: '#/components/schemas/HederaMetadataDto'
    UpdateTokenAttributeCommand:
      required:
        - type
        - value
      type: object
      properties:
        type:
          type: string
          description: "Can be one of these: **property | stat | boost**"
          enum:
          - property
          - stat
          - boost
        value:
          type: string
          description: "Value of the attribute"
        maxValue:
          type: string
          description: "Max value for the attribute"
    AnimationUrlsDtoV3:
      type: object
      anyOf:
      - $ref: '#/components/schemas/animationUrlsImage'
      - $ref: '#/components/schemas/animationUrlsAudio'
      - $ref: '#/components/schemas/animationUrlsVideo'
      discriminator:
        propertyName: type
        mapping:
          image: '#/components/schemas/animationUrlsImage'
          audio: '#/components/schemas/animationUrlsAudio'
          video: '#/components/schemas/animationUrlsVideo'
    animationUrlsImage:
      title: Add image
      required:
        - type
        - value
      type: object
      properties:
        type:
          type: string
          description: "Type of the animation media: `image`. Supported formats: `gif / png / jpg / jpeg / bmp / webp / svg`"
          default: "image"
        value:
          type: string
          description: "URL of the animation media"
    animationUrlsAudio:
      title: Add audio
      required:
        - type
        - value
      type: object
      properties:
        type:
          type: string
          description: "Type of the animation media: `audio`. Supported formats: `mp3 / wav / oga`"
          default: "audio"
        value:
          type: string
          description: "URL of the animation media"
    animationUrlsVideo:
      title: Add video
      required:
        - type
        - value
      type: object
      properties:
        type:
          type: string
          description: "Type of the animation media: `video`. Supported formats: `mp4 / webm / m4v / ogv / ogm / ogg`"
          default: "video"
        value:
          type: string
          description: "URL of the animation media"

    AttributeCommand:
      type: object
      anyOf:
      - $ref: '#/components/schemas/NFTProperty'
      - $ref: '#/components/schemas/NFTBoost'
      - $ref: '#/components/schemas/NFTStat'
      discriminator:
        propertyName: type
        mapping:
          property: '#/components/schemas/NFTProperty'
          boost: '#/components/schemas/NFTBoost'
          stat: '#/components/schemas/NFTStat'
    NFTProperty:
      title: "Define NFT Property"
      type: object
      required:
        - name
        - type
        - value
      properties:
        type:
          type: string
          description: "The properties section is mostly used to display text-based attributes such as the type or category of an item, a team, certain year, or a rarity."
          default: "property"
        name:
          type: string
          description: "Name of the property"
          example: "Talent"
        value:
          type: string
          description: "Value of the property"
          example: "Leadership"
    NFTStat:
      title: "Define NFT Stat"
      type: object
      required:
        - name
        - type
        - value
      properties:
        type:
          type: string
          description: "The stats section is used to display certain stats and metrics, such as the level of a certain item, and the amount of defense, power, or top speed a certain item possesses. When a stat also has a max value defined it will be visualized as a progress bar, otherwise, it will be shown as a card."
          default: "stat"
        name:
          type: string
          description: "Name of the stat"
          example: "Health"
        value:
          type: string
          description: "Value of the stat"
          example: "80"
        maxValue:
          type: string
          description: "The maximum value of the stat" 
          example: "100"
    NFTBoost:
      title: "Define NFT Boost"
      type: object
      required:
        - name
        - type
        - value
      properties:
        type:
          type: string
          description: "Boosts is a category to display gains that are achieved by possessing or using a certain item. It usually is accompanied by a positive or negative identifier. Examples of a boost are the increase or decrease of speed, and armor but equally, it can be a reduction of certain fees or an increase in chance."
          default: "boost"
        name:
          type: string
          description: "Name of the boost"
          example: "Skill"
        value:
          type: string
          description: "Value of the boost"
          example: "+10"

    UpdateMetadataCommand:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: "The name of the NFT"
        description:
          type: string
          description: "The description of the NFT"
        image:
          type: string
          description: "The image URL for the image of the NFT"
        externalUrl:
          type: string
          description: "This can be anything such as a link to your website, landing page, etc"
        backgroundColor:
          type: string
          description: "A hex color code for the background of the NFT"
        animationUrls:
          type: array
          description: "The `animationUrls` is an array so you can add more than one piece of media to an NFT. [Read more](https://docs.venly.io/docs/animation-media#animationurls)"
          items:
            $ref: '#/components/schemas/AnimationUrlsDtoV3'
        attributes:
          type: array
          description: "In the token type you can define an attribute as one of three types: `property, stat, boost`. [Read more](https://docs.venly.io/docs/nft-attributes)"
          items:
            $ref: '#/components/schemas/AttributeCommand'
    MintTokensCommandV3:
      required:
        - contractAddress
        - chain
        - tokenTypeId
      type: object
      properties:
        chain:
          type: string
          description: "The blockchain of the contract"
          enum:
            - AVAC
            - BSC
            - ETHEREUM
            - MATIC
            - HEDERA
            - ARBITRUM
        contractAddress:
          type: string
          description: "The contract address"
        tokenTypeId:
          type: integer
          description: "The `id` of the token-type"
        destinations:
          type: array
          description: "An array of objects which include the wallet address or email address where token is to be sent and the amount of tokens to send"
          items:
            $ref: '#/components/schemas/TokenDestination'
    TokenDestination:
      required:
        - address
        - amount
      type: object
      properties:
        address:
          type: string
          description: "Wallet address or email address where minted tokens will be sent"
        amount:
          type: integer
          description: "Amount of tokens to be minted and sent to specified address"
          format: int64
    TokenMintDetailedResponse:
      type: object
      properties:
        mints:
          type: array
          items:
            $ref: '#/components/schemas/TokenMintResponse'
        metadata:
          $ref: '#/components/schemas/MetadataDto'
    TokenMintResponse:
      type: object
      properties:
        id:
          type: string
        tokenId:
          type: integer
        createdOn:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - PENDING
            - SUCCEEDED
            - FAILED
        transactionHash:
          type: string
        destination:
          $ref: '#/components/schemas/TokenDestination'
    CreateTokenTypeCommandV3:
      required:
        - contractAddress
        - creations
        - chain
      type: object
      properties:
        chain:
          type: string
          description: "The blockchain of the contract"
          enum:
            - AVAC
            - BSC
            - ETHEREUM
            - MATIC
            - HEDERA
            - ARBITRUM
        contractAddress:
          type: string
          description: "The contract address under which you want to create the token-type"
        creations:
          type: array
          description: "This array defines the properties of the token-type"
          nullable: false
          items:
            $ref: '#/components/schemas/CreateTokenTypeCommand' 
    StorageDto:
      type: object
      properties:
        type:
          type: string
          description: "Can be one of: `cloud | ipfs | custom`. **cloud:** We store metadata in our cloud. **ipfs:** metadata will be stored in ipfs. **custom:** You determine where you will store the metadata for this NFT template."
          enum:
            - CLOUD
            - IPFS
            - CUSTOM
        location:
          type: string
          description: "Location of the NFT metadata. This property is mandatory only if `storage.type` is set to custom"
    TokenTypeCreationDetailView:
          type: object
          properties:
            success:
              type: boolean
              example: true
            result:
              type: object
              properties:
                id:
                  type: string
                  format: uuid
                  example: "70b2e24d-db38-4c88-95a3-41137e05a31a"
                status:
                  type: string
                  example: "SUCCEEDED"
                transactionHash:
                  type: string
                  example: "0xd6ca225989c6075f6e45ea2927d51f571f49d117b7e2aa7185fd5ffb09a69f63"
                tokenTypeId:
                  type: integer
                  example: 1
                mints:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: "410b8105-e6b0-4f3e-a12a-ddac472d1ad4"
                      createdOn:
                        type: string
                        format: date-time
                        example: "2024-11-22T14:19:31.49856"
                      status:
                        type: string
                        example: "SUCCEEDED"
                      destination:
                        type: object
                        properties:
                          address:
                            type: string
                            example: "0x7312750DF4d2057b758a61C7017729c6Ec9bB3E9"
                          amount:
                            type: integer
                            example: 1
                metadata:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Test NFT Collection 1.0"
                    description:
                      type: string
                      example: "Enter the Venly Zap Village!"
                    image:
                      type: string
                      format: uri
                      example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/3lgO6llMSJ2lxzA-XcrAjA.jpg"
                    imagePreview:
                      type: string
                      format: uri
                      example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/3lgO6llMSJ2lxzA-XcrAjA.jpg"
                    imageThumbnail:
                      type: string
                      format: uri
                      example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/3lgO6llMSJ2lxzA-XcrAjA.jpg"
                    backgroundColor:
                      type: string
                      example: "#8000800"
                    animationUrl:
                      type: string
                      format: uri
                      example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/purplevillage.jpeg"
                    externalUrl:
                      type: string
                      format: uri
                      example: "https://www.venly.io/"
                    animationUrls:
                      type: array
                      items:
                        type: object
                        properties:
                          type:
                            type: string
                            example: "image"
                          value:
                            type: string
                            format: uri
                            example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/purplevillage.jpeg"
                    attributes:
                      type: array
                      items:
                        type: object
                        properties:
                          type:
                            type: string
                            example: "property"
                          name:
                            type: string
                            example: "Area"
                          value:
                            type: string
                            example: "Isolated"
                          traitType:
                            type: string
                            example: "Area"
                    contract:
                      type: object
                      properties:
                        address:
                          type: string
                          example: "0xfe70a8d4c3c1c53aea3753d38eec27d7f5137b3a"
                        name:
                          type: string
                          example: "Updated Contract Name"
                        symbol:
                          type: string
                          example: "ABCD"
                        image:
                          type: string
                          format: uri
                          example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/logovenly.png"
                        description:
                          type: string
                          example: "Updated description."
                        externalUrl:
                          type: string
                          format: uri
                          example: "https://www.venly.io/"
                        type:
                          type: string
                          example: "ERC_1155"
                fungible:
                  type: boolean
                  example: true
    TokenTypeCreationViewV3:
              type: object
              properties:
                creations:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "70b2e24d-db38-4c88-95a3-41137e05a31a"
                      status:
                        type: string
                        example: "PENDING"
                      tokenTypeId:
                        type: integer
                        example: 1
                      mints:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: string
                              example: "410b8105-e6b0-4f3e-a12a-ddac472d1ad4"
                            createdOn:
                              type: string
                              format: date-time
                              example: "2024-11-22T14:19:31.4985603"
                            status:
                              type: string
                              example: "PENDING"
                            destination:
                              type: object
                              properties:
                                address:
                                  type: string
                                  example: "0x7312750DF4d2057b758a61C7017729c6Ec9bB3E9"
                                amount:
                                  type: integer
                                  example: 1
                      metadata:
                        type: object
                        properties:
                          name:
                            type: string
                            example: "Test NFT Collection 1.0"
                          description:
                            type: string
                            example: "Enter the Venly Zap Village!"
                          image:
                            type: string
                            format: uri
                            example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/3lgO6llMSJ2lxzA-XcrAjA.jpg"
                          imagePreview:
                            type: string
                            format: uri
                            example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/3lgO6llMSJ2lxzA-XcrAjA.jpg"
                          imageThumbnail:
                            type: string
                            format: uri
                            example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/3lgO6llMSJ2lxzA-XcrAjA.jpg"
                          backgroundColor:
                            type: string
                            example: "#8000800"
                          animationUrl:
                            type: string
                            format: uri
                            example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/purplevillage.jpeg"
                          externalUrl:
                            type: string
                            format: uri
                            example: "https://www.venly.io/"
                          animationUrls:
                            type: array
                            items:
                              type: object
                              properties:
                                type:
                                  type: string
                                  example: "image"
                                value:
                                  type: string
                                  format: uri
                                  example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/purplevillage.jpeg"
                          attributes:
                            type: array
                            items:
                              type: object
                              properties:
                                type:
                                  type: string
                                  example: "property"
                                name:
                                  type: string
                                  example: "Area"
                                value:
                                  type: string
                                  example: "Isolated"
                                maxValue:
                                  type: integer
                                  example: 100
                                traitType:
                                  type: string
                                  example: "Area"
                                displayType:
                                  type: string
                                  example: "boost_number"
                          contract:
                            type: object
                            properties:
                              address:
                                type: string
                                example: "0xfe70a8d4c3c1c53aea3753d38eec27d7f5137b3a"
                              name:
                                type: string
                                example: "Updated Contract Name"
                              symbol:
                                type: string
                                example: "ABCD"
                              image:
                                type: string
                                format: uri
                              description:
                                type: string
                                example: "Updated description."
                              externalLink:
                                type: string
                                format: uri  
                              type:
                                type: string
                                example: "ERC_1155"
                          fungible:
                            type: boolean
                            example: true
    UploadNftMediaResponse:
      type: object
      properties:
        media:
          type: string
    UploadNftImageResponse:
      type: object
      properties:
        image:
          type: string
        imagePreview:
          type: string
        imageThumbnail:
          type: string
    DeployContractCommandV3:
      required:
        - description
        - externalUrl
        - image
        - name
      type: object
      properties:
        chain:
          type: string
          description: "The blockchain on which your contract/collection will be created"
          enum:
            - AVAC
            - BSC
            - ETHEREUM
            - MATIC
            - HEDERA
            - ARBITRUM
        name:
          type: string
          description: "The name of the contract/collection"
        symbol:
          type: string
          description: "The symbol for the contract such as **VENS**"
        description:
          type: string
          description: "The description of the contract/collection"
        image:
          type: string
          description: "The URL of the image that will be displayed for your collection"
        externalUrl:
          type: string
          description: "You can add an external URL to your collection. This can be anything such as a link to your website"
        media:
          type: array
          description: "This is the media object where you can add an optional key-value pair"
          items:
            $ref: '#/components/schemas/MediaDtoV3'
        owner:
          type: string
          description: "The wallet address which will have admin access to the contract. The owner can call the admin right functions on the contract. You will be co-owning the contract with Venly where you will be the public owner of the contract. Venly is still allowed to do mints on your behalf."
        autoApprovedAddressesLocked:
          type: boolean
        royalties:
          type: object
          $ref: '#/components/schemas/RoyaltiesReceiverDto'
        storage:
          type: object
          description: "This object holds the storage details for the metadata of the contract"
          $ref: '#/components/schemas/StorageDtoV3'
        companyId:
          type: string
          description: "You can optionally provide the `companyId` to specify for which company the contract should be created."
    RoyaltiesReceiverDto:
      required:
        - receiver
        - percentage
      type: object
      properties:
        percentage:
          description: "The percentage royalties that will be paid out automatically with each succeeding sale of an NFT in the secondary market. The royalty percentage can only contain up to 2 decimals."
          maximum: 100
          minimum: 0
          type: number
        receiver:
          type: string
          description: "The recipient wallet address where the royalties will be transferred."
    MediaDtoV3:
      type: object
      properties:
        type:
          type: string
          description: "Add media to the NFT contract/collection. [Read more](https://docs.venly.io/docs/collection-info)"
          enum:
            - "image"
            - "banner"
            - "instagram"
            - "twitter"
            - "facebook"
            - "discord"
            - "medium"
            - "twitch"
            - "telegram"
            - "youtube"
        value:
          type: string
          description: "URL of image or URL of social links"
    StorageDtoV3:
      type: object
      oneOf:
      - $ref: '#/components/schemas/StorageDtoCloud'
      - $ref: '#/components/schemas/StorageDtoIpfs'
      - $ref: '#/components/schemas/StorageDtoCustom'
      discriminator:
        propertyName: type
        mapping:
          cloud: '#/components/schemas/StorageDtoCloud'
          ipfs: '#/components/schemas/StorageDtoIpfs'
          custom: '#/components/schemas/StorageDtoCustom'
    StorageDtoCloud:
      title: "Cloud"
      type: object
      properties:
        type:
          type: string
          description: "The default option. Venly will generate the metadata file and store it safely in the cloud. This option allows metadata of NFTs to be updated."
          default: "cloud"
    StorageDtoIpfs:
      title: "IPFS"
      type: object
      properties:
        type:
          type: string
          description: "Venly will generate the metadata file, but now it will store the file on IPFS for you. This option will not allow you to update the metadata for that NFT."
          default: "ipfs"
    StorageDtoCustom:
      title: "CUSTOM"
      required:
        - location
      type: object
      properties:
        type:
          type: string
          description: "The third option is to provide a custom URL. In this option, Venly is not generating, nor taking care of hosting the metadata file for you. You are able to host and construct it any way you like. Note, this option allows you to change your metadata, since you are in control of the hosting, but it does not allow you to update the URL towards the metadata."
          default: "custom"
        location:
          type: string
          description: "URL where the NFT metadata will be stored"

    DeployedContractViewV3:
          type: object
          properties:
                name:
                  type: string
                  example: "Dynamic NFTs Collection"
                description:
                  type: string
                  example: "This NFT collection is created for the dynamic NFTs tutorial video."
                address:
                  type: string
                  example: "0xfe70a8d4c3c1c53aea3753d38eec27d7f5137b3a"
                id:
                  type: string
                  format: uuid
                  example: "f1283093-c5da-4cfb-b41a-bbedc1ffd3f9"
                chain:
                  type: string
                  example: "MATIC"
                  enum:
                    - AVAC
                    - BSC
                    - ETHEREUM
                    - MATIC
                    - HEDERA
                    - ARBITRUM
                symbol:
                  type: string
                  example: "DNC"
                externalUrl:
                  type: string
                  format: uri
                  example: "https://www.venly.io/"
                image:
                  type: string
                  format: uri
                  example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/logovenly.png"
                media:
                  type: array
                  items:
                    type: object
                    properties:
                      type:
                        type: string
                      value:
                        type: string
                transactionHash:
                  type: string
                  example: "0x48aecf24d7bb5b772ac8f4a829b4b393de6430669bcbfb1e0e8487001572fb24"
                status:
                  type: string
                  enum:
                    - PENDING
                    - SUCCEEDED
                    - FAILED
                  example: "SUCCEEDED"
                owner:
                  type: string
                  example: "0x7312750DF4d2057b758a61C7017729c6Ec9bB3E9"
                storage:
                  type: object
                  properties:
                    type:
                      type: string
                      examples:
                        - "cloud"
                        - "ipfs"
                        - "custom"
                    location:
                      type: string
                      format: uri
                      example: "https://metadata-staging.venly.io/metadata/contracts/70858"
                contractUri:
                  type: string
                  format: uri
                  example: "https://metadata-staging.venly.io/metadata/contracts/70858"
                royalties:
                  type: object
                  properties:
                    percentage:
                      type: number
                      format: float
                      example: 10.00
                    receiver:
                      type: string
                      example: "0x7312750DF4d2057b758a61C7017729c6Ec9bB3E9"
                external_link:
                  type: string
                  format: uri
                  example: "https://www.venly.io/"

    TypeValueDto_TokenContractViewV3:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
    MintTokensCommand:
      required:
        - destinations
      type: object
      properties:
        destinations:
          type: array
          items:
            $ref: '#/components/schemas/TokenDestination'
    MintTokenResponse:
      type: object
      properties:
        transactionHash:
          type: string
          deprecated: true
        metadata:
          $ref: '#/components/schemas/MetadataDto'
        destinations:
          type: array
          deprecated: true
          items:
            type: string
        tokenIds:
          type: array
          deprecated: true
          items:
            type: integer
        mintedTokens:
          type: array
          items:
            $ref: '#/components/schemas/MintedTokenDestination'
    MintedTokenDestination:
      type: object
      properties:
        destination:
          type: string
        tokenId:
          type: integer
        txHash:
          type: string
    CreateTokenTypeCommand:
      required:
        - name
      type: object
      properties:
        fungible:
          type: boolean
          description: "Determines if the NFTs from this token-type will be minted as fungible/non fungible. If missing it defaults to false."
        burnable:
          type: boolean
          description: "Determines if the NFTs from this token-type will be burnable. If missing it defaults to false."
        name:
          type: string
          description: "Name of the NFTs that will be created from this token-type"
        description:
          type: string
          description: "Description of the NFTs that will be created from this token-type"
        image:
          type: string
          description: "Image of the NFTs that will be created from this token-type"
        externalUrl:
          type: string
          description: "External URL of the NFTs that will be created from this token-type"
        backgroundColor:
          type: string
          description: "Background color of the NFTs that will be created from this token-type"
        animationUrls:
          type: array
          description: "The `animationUrls` is an array so you can add more than one piece of media to an NFT. [Read more](https://docs.venly.io/docs/animation-media#animationurls)"
          items:
            $ref: '#/components/schemas/AnimationUrlsDtoV3'
        maxSupply:
          type: integer
          description: "Max Supply for NFTs created by this token-type"
        animationUrl:
          type: string
          deprecated: true
        youtubeUrl:
          type: string
          deprecated: true
        attributes:
          type: array
          description: "In the token type you can define an attribute as one of three types: `property, stat, boost`. [Read more](https://docs.venly.io/docs/nft-attributes)"
          items:
            $ref: '#/components/schemas/AttributeCommand'
        destinations:
          type: array
          description: "This array if defined will create the token-type and also mint tokens to the provided wallet/email addresses."
          items:
            $ref: '#/components/schemas/TokenDestination'
        storage:
          description: "Define where the metadata of the NFT should be hosted. [Read more](https://docs.venly.io/docs/metadata-storage)"
          $ref: '#/components/schemas/StorageDtoV3'
    AttributeDto:
      type: object
      properties:
        type:
          type: string
        name:
          type: string
        value:
          type: string
        maxValue:
          type: string
    TokenTypeView:
      type: object
      properties:
        id:
          type: integer
        confirmed:
          type: boolean
        name:
          type: string
        description:
          type: string
        fungible:
          type: boolean
        burnable:
          type: boolean
        externalUrl:
          type: string
        backgroundColor:
          type: string
        image:
          type: string
        imageThumbnail:
          type: string
        imagePreview:
          type: string
        maxSupply:
          type: integer
        currentSupply:
          type: integer
        pendingSupply:
          type: integer
        animationUrls:
          type: array
          items:
            $ref: '#/components/schemas/TypeValueDto'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeDto'
        transactionHash:
          type: string
        storage:
          $ref: '#/components/schemas/StorageDto'
    TypeValueDto:
      type: object
      properties:
        type:
          type: string
          description: "The type of media. Allowed type are `image, audio, video`"
        value:
          type: string
          description: "The URL of the media file"
    UpdateContractOwnerCommand:
      required:
        - owner
      type: object
      properties:
        owner:
          type: string
          description: "The wallet address of the new owner that will have admin rights on the contract."
    UpdateContractMetadataCommand:
      type: object
      properties:
        name:
          type: string
          description: "The name of the contract/collection"
        symbol:
          type: string
          description: "The symbol for the contract such as **VENS**"
        description:
          type: string
          description: "The description of the contract/collection"
        image:
          type: string
          description: "The URL of the image that will be displayed for your collection"
        externalUrl:
          type: string
          description: "You can add an external URL to your collection. This can be anything such as a link to your website"
        media:
          type: array
          description: "This is the media object where you can add an social links"
          items:
            $ref: '#/components/schemas/MediaDtoV3'
    PaginationTokenMintResponse:
          properties:
            pageNumber:
              type: integer
              description: "Current page number."
              example: 1
            pageSize:
              type: integer
              description: "Number of items per page."
              example: 5
            numberOfPages:
              type: integer
              description: "Total number of pages."
              example: 31
            numberOfElements:
              type: integer
              description: "Total number of items across all pages."
              example: 151
            hasNextPage:
              type: boolean
              description: "Indicates if there is a next page."
              example: true
            hasPreviousPage:
              type: boolean
              description: "Indicates if there is a previous page."
              example: false
    SortOrderDto:
      type: object
      properties:
        property:
          type: string
          description: Property by which the result is sorted
        direction:
          type: string
          enum: [ASC, DESC]
          description: Sorting direction
    PageTokenMintResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "Unique identifier or Mint ID."
          example: "198ecf2c-cfd6-42ba-a11d-705a69efd019"
        chain:
          type: string
          description: "The blockchain of the token mint"
        contractAddress:
          type: string
          description: "The contract address"
        tokenTypeId:
          type: integer
          description: "The token-type `ID`"
        tokenId:
          type: integer
          description: "The token `ID`"
        createdOn:
          type: string
          format: date-time
          description: "Timestamp when the transaction was created."
          example: "2024-08-16T12:28:41.821439"
        status:
          type: string
          description: "Current status of the transaction."
          example: "SUCCEEDED"
        transactionHash:
          type: string
          description: "Blockchain transaction hash."
          example: "0xc4e76bdbc48e2c0049f34bd6ee5fceeefd028ae2383b02d447832a1ca008121f"
        destination:
          type: object
          description: "Details of the transaction destination."
          required:
            - address
            - amount
          properties:
            address:
              type: string
              description: "Destination wallet address."
              example: "0xb811Fac088E8E80F56258a5f29D47d0FF1a37BD5"
            amount:
              type: number
              format: float
              description: "Amount sent to the destination."
              example: 1

    TokenContractMetadataView:
          type: object
          properties:
            success:
              type: boolean
              example: true
            result:
              type: object
              properties:
                name:
                  type: string
                  example: "Dynamic NFTs Collection"
                description:
                  type: string
                  example: "This NFT collection is created for the dynamic NFTs tutorial video."
                symbol:
                  type: string
                  example: "DNC"
                externalUrl:
                  type: string
                  format: uri
                  example: "https://www.venly.io/"
                image:
                  type: string
                  format: uri
                  example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/logovenly.png"
                media:
                  type: array
                  items:
                    type: object
                external_link:
                  type: string
                  format: uri
                  example: "https://www.venly.io/"
    TokenView:
      type: object
      properties:
        chain:
          type: string
          enum:
            - AVAC
            - BSC
            - ETHEREUM
            - MATIC
            - HEDERA
            - ARBITRUM
        contractAddress:
          type: string
        id:
          type: integer
        tokenType:
          $ref: '#/components/schemas/TokenTypeView'
        amount:
          type: integer
          format: int64
        imageUrl:
          type: string
        imagePreviewUrl:
          type: string
        imageThumbnailUrl:
          type: string
        externalUrl:
          type: string
        backgroundColor:
          type: string
    PageableDto:
      type: object
      properties:
        page:
          type: integer
          format: int32
          description: "The current page number"
        size:
          type: integer
          format: int32
          description: "The number of items per page"
    PageWalletBalanceDto:
          type: object
          properties:
            success:
              type: boolean
              default: true
            result:
              type: array
              items:
                type: object
                properties:
                  chain:
                    type: string
                    example: "MATIC"
                  address:
                    type: string
                    example: "0x7a713665de42d7ad47ec91ed0755e87d7d0616f5"
                  balance:
                    type: number
                    format: float
                    example: 0.249076699354985414
                  symbol:
                    type: string
                    example: "POL"
                  rawBalance:
                    type: string
                    example: "249076699354985414"
                  decimals:
                    type: integer
                    example: 18
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        unpaged:
          type: boolean
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    SortObject:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    Sort:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean
    WalletBalanceDto:
      type: object
      properties:
        chain:
          type: string
          enum:
            - AVAC
            - BSC
            - ETHEREUM
            - MATIC
            - HEDERA
            - ARBITRUM
        address:
          type: string
        balance:
          type: number
        symbol:
          type: string
        rawBalance:
          type: string
        decimals:
          type: integer
          format: int32
    TransactionHashResult:
      type: object
      properties:
        transactionHash:
          type: string
    TokenMintView:
      type: object
      properties:
        id:
          type: string
        chain:
          type: string
        contractAddress:
          type: string
        tokenTypeId:
          type: integer
        tokenId:
          type: integer
        createdOn:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - PENDING
            - SUCCEEDED
            - FAILED
        transactionHash:
          type: string
        destination:
          $ref: '#/components/schemas/TokenDestination'
        metadata:
          $ref: '#/components/schemas/MetadataDto'
    TokenContractViewV3:
          type: object
          properties:
            success:
              type: boolean
              example: true
            result:
              type: array
              items:
                type: object
                properties:
                  chain:
                    type: string
                    description: "The blockchain of the contract"
                    examples:
                      - AVAC
                      - BSC
                      - ETHEREUM
                      - MATIC
                      - HEDERA
                      - ARBITRUM
                  address:
                    type: string
                    nullable: true
                    example: "0x21e55c3dbcd38da726c6cc4c0242d0fdcf962feb"
                    description: "The contract address"
                  contractUri:
                    type: string
                    format: uri
                    example: "https://metadata-staging.venly.io/metadata/contracts/68285"
                    description: "URI of the contract metadata"
                  name:
                    type: string
                    example: "Venly Test Collection"
                    description: "The name of the contract"
                  symbol:
                    type: string
                    example: "VETECO"
                    description: "The symbol of the contract"
                  image:
                    type: string
                    format: uri
                    description: "The URI of the contract's image"
                    example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/fe1ae5254854c3871817c1ba8f7b827e75a18cce.png"
                  onChainStatus:
                    type: string
                    description: "Indication of the on-chain deployment status of the contract"
                    examples:
                      - FAILED
                      - SUCCEEDED
    TokenContractDetailView:
          type: object
          properties:
            success:
              type: boolean
              example: true
            result:
              type: object
              properties:
                chain:
                  type: string
                  example: "MATIC"
                  enum:
                    - AVAC
                    - BSC
                    - ETHEREUM
                    - MATIC
                    - HEDERA
                    - ARBITRUM
                address:
                  type: string
                  example: "0xfe70a8d4c3c1c53aea3753d38eec27d7f5137b3a"
                contractUri:
                  type: string
                  format: uri
                  example: "https://metadata-staging.venly.io/metadata/contracts/70858"
                onChainStatus:
                  type: string
                  enum:
                    - PENDING
                    - SUCCEEDED
                    - FAILED
                  example: "SUCCEEDED"
                owner:
                  type: string
                  example: "0xb811Fac088E8E80F56258a5f29D47d0FF1a37BD5"
                royalties:
                  type: object
                  properties:
                    percentage:
                      type: number
                      format: float
                      example: 10.00
                    receiver:
                      type: string
                      example: "0x7312750DF4d2057b758a61C7017729c6Ec9bB3E9"
                metadata:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Dynamic NFTs Collection"
                    description:
                      type: string
                      example: "This NFT collection is created for the dynamic NFTs tutorial video."
                    symbol:
                      type: string
                      example: "DNC"
                    externalUrl:
                      type: string
                      format: uri
                      example: "https://www.venly.io/"
                    image:
                      type: string
                      format: uri
                      example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/logovenly.png"
                    media:
                      type: array
                      items:
                        type: object
                    external_link:
                      type: string
                      format: uri
                      example: "https://www.venly.io/"

    TokenListItemViewV3:
      type: object
      properties:
        chain:
          type: string
          enum:
            - AVAC
            - BSC
            - ETHEREUM
            - MATIC
            - HEDERA
            - ARBITRUM
        contractAddress:
          type: string
          description: "The address of the NFT's smart contract."
          example: "0xfe70a8d4c3c1c53aea3753d38eec27d7f5137b3a"
        tokenTypeId:
          type: integer
          description: "Unique identifier for the token-type."
          example: 1
        tokenId:
          type: integer
          description: "Unique identifier for the token."
          example: 1
        tokenUri:
          type: string
          description: "URI pointing to the token's metadata."
          example: "https://metadata-staging.venly.io/metadata/contracts/70858/tokens/{id}"
        name:
          type: string
          description: "The name of the NFT."
          example: "Test NFT Collection 1.0"
        image:
          type: string
          description: "URL of the token's main image."
          example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/3lgO6llMSJ2lxzA-XcrAjA.jpg"
        imagePreview:
          type: string
          description: "URL of the token's preview image."
          example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/3lgO6llMSJ2lxzA-XcrAjA.jpg"
        imageThumbnail:
          type: string
          description: "URL of the token's thumbnail image."
          example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/3lgO6llMSJ2lxzA-XcrAjA.jpg"
        fungible:
          type: boolean
          description: "Indicates whether the token is fungible."
          example: false
        mints:
          $ref: '#/components/schemas/TokenMintsView'
    TokenMintsView:
      type: object
      properties:
        pending:
          type: integer
          format: int64
          description: "Number of pending mints."
        succeeded:
          type: integer
          format: int64
          description: "Number of successful mints."
        failed:
          type: integer
          format: int64
          description: "Number of failed mints."
    TokenViewV3:
      type: object
      properties:
        chain:
          type: string
          enum:
            - AVAC
            - BSC
            - ETHEREUM
            - MATIC
            - HEDERA
            - ARBITRUM
        contractAddress:
          type: string
        tokenTypeId:
          type: integer
        tokenId:
          type: integer
        tokenUri:
          type: string
        mints:
          $ref: '#/components/schemas/TokenMintsView'
        metadata:
          $ref: '#/components/schemas/MetadataDto'
    TokenTypeListItemView:
          type: object
          properties:
            success:
              type: boolean
              example: true
            result:
              type: array
              items:
                type: object
                properties:
                  chain:
                    type: string
                    example: "MATIC"
                  contractAddress:
                    type: string
                    example: "0xfe70a8d4c3c1c53aea3753d38eec27d7f5137b3a"
                  tokenTypeId:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: "Test NFT Collection 1.0"
                  image:
                    type: string
                    format: uri
                    example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/3lgO6llMSJ2lxzA-XcrAjA.jpg"
                  imagePreview:
                    type: string
                    format: uri
                    example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/3lgO6llMSJ2lxzA-XcrAjA.jpg"
                  imageThumbnail:
                    type: string
                    format: uri
                    example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/3lgO6llMSJ2lxzA-XcrAjA.jpg"
                  fungible:
                    type: boolean
                    example: true
                  onChainStatus:
                    type: string
                    example: "SUCCEEDED"
                  supply:
                    type: object
                    properties:
                      current:
                        type: integer
                        description: The current quantity of tokens minted.
                      pending:
                        type: integer
                        description: The quantity of tokens that are pending/ being minted.
                      max:
                        type: integer
                        description: The maximum quantity of tokens allowed to be minted.

    TokenTypeDetailsViewV3:
          type: object
          properties:
                chain:
                  type: string
                  example: "MATIC"
                contractAddress:
                  type: string
                  example: "0xfe70a8d4c3c1c53aea3753d38eec27d7f5137b3a"
                tokenTypeId:
                  type: integer
                  example: 1
                onChainStatus:
                  type: string
                  example: "SUCCEEDED"
                burnable:
                  type: boolean
                supply:
                  type: object
                  properties:
                    current:
                      type: integer
                    pending:
                      type: integer
                    max:
                      type: integer
                storage:
                  type: object
                  properties:
                    type:
                      type: string
                    location:
                      type: string
                metadata:
                  type: object
                  properties:
                    name:
                      type: string
                      example: "Test NFT Collection 1.0"
                    description:
                      type: string
                      example: "Enter the Venly Zap Village!"
                    image:
                      type: string
                      format: uri
                      example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/3lgO6llMSJ2lxzA-XcrAjA.jpg"
                    imagePreview:
                      type: string
                      format: uri
                      example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/3lgO6llMSJ2lxzA-XcrAjA.jpg"
                    imageThumbnail:
                      type: string
                      format: uri
                      example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/3lgO6llMSJ2lxzA-XcrAjA.jpg"
                    backgroundColor:
                      type: string
                      example: "#8000800"
                    animationUrl:
                      type: string
                      format: uri
                      example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/purplevillage.jpeg"
                    externalUrl:
                      type: string
                      format: uri
                      example: "https://www.venly.io/"
                    animationUrls:
                      type: array
                      items:
                        type: object
                        properties:
                          type:
                            type: string
                            example: "image"
                          value:
                            type: string
                            format: uri
                            example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/purplevillage.jpeg"
                    attributes:
                      type: array
                      items:
                        type: object
                        properties:
                          type:
                            type: string
                            example: "property"
                          name:
                            type: string
                            example: "Area"
                          value:
                            type: string
                            example: "Isolated"
                          traitType:
                            type: string
                            example: "Area"
                    contract:
                      type: object
                      properties:
                        address:
                          type: string
                          example: "0xfe70a8d4c3c1c53aea3753d38eec27d7f5137b3a"
                        name:
                          type: string
                          example: "Updated Contract Name"
                        symbol:
                          type: string
                          example: "ABCD"
                        image:
                          type: string
                          format: uri
                          example: "https://storage-staging.venly.io/applications/bff93371-db40-4363-9692-4fbe64a34b54/logovenly.png"
                        description:
                          type: string
                          example: "Updated description."
                        externalUrl:
                          type: string
                          format: uri
                          example: "https://www.venly.io/"
                        type:
                          type: string
                          example: "ERC_1155"
                    fungible:
                      type: boolean
                      example: true
    TokenListItemView:
      type: object
      properties:
        id:
          type: integer
        typeId:
          type: integer
        metadata:
          $ref: '#/components/schemas/MetadataDto'
        mineDate:
          type: string
          format: date-time
        confirmed:
          type: boolean
        amount:
          type: integer
          format: int64
        transactionHash:
          type: string
    TokenTypeDetailsView:
      type: object
      properties:
        id:
          type: integer
        confirmed:
          type: boolean
        name:
          type: string
        description:
          type: string
        image:
          type: string
        imageThumbnail:
          type: string
        imagePreview:
          type: string
        externalUrl:
          type: string
        youtubeUrl:
          type: string
        backgroundColor:
          type: string
        fungible:
          type: boolean
        burnable:
          type: boolean
        maxSupply:
          type: integer
        currentSupply:
          type: integer
        pendingSupply:
          type: integer
        animationUrls:
          type: array
          items:
            $ref: '#/components/schemas/TypeValueDto'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeDto'
        transactionHash:
          type: string
        storage:
          $ref: '#/components/schemas/StorageDto'
    TokenContractDto:
      type: object
      properties:
        id:
          type: string
        contractId:
          type: integer
        address:
          type: string
        name:
          type: string
        symbol:
          type: string
        description:
          type: string
        image:
          type: string
        externalUrl:
          type: string
        deployDate:
          type: string
          format: date-time
        mineDate:
          type: string
          format: date-time
        userId:
          type: string
        companyId:
          type: string
        transactionHash:
          type: string
        status:
          type: string
          enum:
            - QUEUED
            - PROCESSING
            - PENDING
            - MINT_PENDING
            - MINT_SUCCEEDED
            - SUCCEEDED
            - MINT_FAILED
            - FAILED
        media:
          type: array
          items:
            $ref: '#/components/schemas/TypeValueDto'
        chain:
          type: string
          enum:
            - AVAC
            - BSC
            - ETHEREUM
            - MATIC
            - HEDERA
            - ARBITRUM
        version:
          type: integer
          format: int64
        autoApprovedAddressesLocked:
          type: boolean
        contractVersion:
          type: string
          enum:
            - V1
            - V2
            - V3
        secondaryOwner:
          type: string
        childChainManager:
          type: string
        storageType:
          type: string
          enum:
            - CLOUD
            - IPFS
            - CUSTOM
        uri:
          type: string
        additionalOwners:
          type: array
          items:
            $ref: '#/components/schemas/TokenContractOwnerDto'
        apiVersion:
          type: string
          enum:
            - V1
            - V2
    TokenContractOwnerDto:
      type: object
      properties:
        address:
          type: string
        type:
          type: string
          enum:
            - SECONDARY_OWNER
            - COMPANY_WALLET
    ApplicationDto:
      type: object
      properties:
        id:
          type: string
        clientId:
          type: string
        name:
          type: string
        description:
          type: string
        rootURL:
          type: string
        redirectURIs:
          type: array
          items:
            type: string
        imageUrl:
          type: string
    ErrorBody:
      type: object
      properties:
        errorCode:
          type: string
        errorMessage:
          type: string
    PaginationDto:
      type: object
      properties:
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        numberOfPages:
          type: integer
          format: int32
        numberOfElements:
          type: integer
          format: int64
        hasNextPage:
          type: boolean
        hasPreviousPage:
          type: boolean
    ResponseEnvelope:
      type: object
      properties:
        success:
          type: boolean
        pagination:
          $ref: '#/components/schemas/PaginationDto'
        sort:
          $ref: '#/components/schemas/SortDto'
        result:
          type: object
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ErrorBody'
    SortDto:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/SortOrderDto'
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://login-staging.venly.io/auth/realms/Arkane/protocol/openid-connect/token
          scopes:
            openid: openid
